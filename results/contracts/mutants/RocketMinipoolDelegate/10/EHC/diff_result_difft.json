{
    "number_of_changes": 105,
    "timing": 1.7724947929382324,
    "diff_chunks": [
        [
            {
                "lhs": {
                    "line_number": 68,
                    "changes": [
                        {
                            "start": 8,
                            "end": 15,
                            "content": "require",
                            "highlight": "normal"
                        },
                        {
                            "start": 15,
                            "end": 16,
                            "content": "(",
                            "highlight": "delimiter"
                        },
                        {
                            "start": 16,
                            "end": 28,
                            "content": "storageState",
                            "highlight": "normal"
                        },
                        {
                            "start": 29,
                            "end": 31,
                            "content": "==",
                            "highlight": "keyword"
                        },
                        {
                            "start": 32,
                            "end": 44,
                            "content": "StorageState",
                            "highlight": "normal"
                        },
                        {
                            "start": 44,
                            "end": 45,
                            "content": ".",
                            "highlight": "normal"
                        },
                        {
                            "start": 45,
                            "end": 56,
                            "content": "Initialised",
                            "highlight": "normal"
                        },
                        {
                            "start": 56,
                            "end": 57,
                            "content": ",",
                            "highlight": "normal"
                        },
                        {
                            "start": 58,
                            "end": 89,
                            "content": "\"Storage state not initialised\"",
                            "highlight": "string"
                        },
                        {
                            "start": 89,
                            "end": 90,
                            "content": ")",
                            "highlight": "delimiter"
                        }
                    ]
                },
                "rhs": {
                    "line_number": 68,
                    "changes": [
                        {
                            "start": 8,
                            "end": 97,
                            "content": "/* require(storageState == StorageState.Initialised, \"Storage state not initialised\"); */",
                            "highlight": "comment"
                        }
                    ]
                }
            }
        ],
        [
            {
                "lhs": {
                    "line_number": 73,
                    "changes": [
                        {
                            "start": 8,
                            "end": 15,
                            "content": "require",
                            "highlight": "normal"
                        },
                        {
                            "start": 15,
                            "end": 16,
                            "content": "(",
                            "highlight": "delimiter"
                        },
                        {
                            "start": 16,
                            "end": 28,
                            "content": "storageState",
                            "highlight": "normal"
                        },
                        {
                            "start": 29,
                            "end": 31,
                            "content": "==",
                            "highlight": "keyword"
                        },
                        {
                            "start": 32,
                            "end": 44,
                            "content": "StorageState",
                            "highlight": "normal"
                        },
                        {
                            "start": 44,
                            "end": 45,
                            "content": ".",
                            "highlight": "normal"
                        },
                        {
                            "start": 45,
                            "end": 58,
                            "content": "Uninitialised",
                            "highlight": "normal"
                        },
                        {
                            "start": 58,
                            "end": 59,
                            "content": ",",
                            "highlight": "normal"
                        },
                        {
                            "start": 60,
                            "end": 95,
                            "content": "\"Storage state already initialised\"",
                            "highlight": "string"
                        },
                        {
                            "start": 95,
                            "end": 96,
                            "content": ")",
                            "highlight": "delimiter"
                        }
                    ]
                },
                "rhs": {
                    "line_number": 73,
                    "changes": [
                        {
                            "start": 8,
                            "end": 103,
                            "content": "/* require(storageState == StorageState.Uninitialised, \"Storage state already initialised\"); */",
                            "highlight": "comment"
                        }
                    ]
                }
            }
        ],
        [
            {
                "lhs": {
                    "line_number": 79,
                    "changes": [
                        {
                            "start": 8,
                            "end": 15,
                            "content": "require",
                            "highlight": "normal"
                        },
                        {
                            "start": 15,
                            "end": 16,
                            "content": "(",
                            "highlight": "delimiter"
                        },
                        {
                            "start": 16,
                            "end": 28,
                            "content": "_nodeAddress",
                            "highlight": "normal"
                        },
                        {
                            "start": 29,
                            "end": 31,
                            "content": "==",
                            "highlight": "keyword"
                        },
                        {
                            "start": 32,
                            "end": 43,
                            "content": "nodeAddress",
                            "highlight": "normal"
                        },
                        {
                            "start": 43,
                            "end": 44,
                            "content": ",",
                            "highlight": "normal"
                        },
                        {
                            "start": 45,
                            "end": 69,
                            "content": "\"Invalid minipool owner\"",
                            "highlight": "string"
                        },
                        {
                            "start": 69,
                            "end": 70,
                            "content": ")",
                            "highlight": "delimiter"
                        }
                    ]
                },
                "rhs": {
                    "line_number": 79,
                    "changes": [
                        {
                            "start": 8,
                            "end": 77,
                            "content": "/* require(_nodeAddress == nodeAddress, \"Invalid minipool owner\"); */",
                            "highlight": "comment"
                        }
                    ]
                }
            }
        ],
        [
            {
                "lhs": {
                    "line_number": 85,
                    "changes": [
                        {
                            "start": 8,
                            "end": 15,
                            "content": "require",
                            "highlight": "normal"
                        },
                        {
                            "start": 15,
                            "end": 16,
                            "content": "(",
                            "highlight": "delimiter"
                        },
                        {
                            "start": 16,
                            "end": 28,
                            "content": "_nodeAddress",
                            "highlight": "normal"
                        },
                        {
                            "start": 29,
                            "end": 31,
                            "content": "==",
                            "highlight": "keyword"
                        },
                        {
                            "start": 32,
                            "end": 43,
                            "content": "nodeAddress",
                            "highlight": "normal"
                        },
                        {
                            "start": 44,
                            "end": 46,
                            "content": "||",
                            "highlight": "keyword"
                        },
                        {
                            "start": 47,
                            "end": 59,
                            "content": "_nodeAddress",
                            "highlight": "normal"
                        },
                        {
                            "start": 60,
                            "end": 62,
                            "content": "==",
                            "highlight": "keyword"
                        },
                        {
                            "start": 63,
                            "end": 76,
                            "content": "rocketStorage",
                            "highlight": "normal"
                        },
                        {
                            "start": 76,
                            "end": 77,
                            "content": ".",
                            "highlight": "normal"
                        },
                        {
                            "start": 77,
                            "end": 101,
                            "content": "getNodeWithdrawalAddress",
                            "highlight": "normal"
                        },
                        {
                            "start": 101,
                            "end": 102,
                            "content": "(",
                            "highlight": "delimiter"
                        },
                        {
                            "start": 102,
                            "end": 113,
                            "content": "nodeAddress",
                            "highlight": "normal"
                        },
                        {
                            "start": 113,
                            "end": 114,
                            "content": ")",
                            "highlight": "delimiter"
                        },
                        {
                            "start": 114,
                            "end": 115,
                            "content": ",",
                            "highlight": "normal"
                        },
                        {
                            "start": 116,
                            "end": 140,
                            "content": "\"Invalid minipool owner\"",
                            "highlight": "string"
                        },
                        {
                            "start": 140,
                            "end": 141,
                            "content": ")",
                            "highlight": "delimiter"
                        }
                    ]
                },
                "rhs": {
                    "line_number": 85,
                    "changes": [
                        {
                            "start": 8,
                            "end": 148,
                            "content": "/* require(_nodeAddress == nodeAddress || _nodeAddress == rocketStorage.getNodeWithdrawalAddress(nodeAddress), \"Invalid minipool owner\"); */",
                            "highlight": "comment"
                        }
                    ]
                }
            }
        ],
        [
            {
                "lhs": {
                    "line_number": 91,
                    "changes": [
                        {
                            "start": 8,
                            "end": 15,
                            "content": "require",
                            "highlight": "normal"
                        },
                        {
                            "start": 15,
                            "end": 16,
                            "content": "(",
                            "highlight": "delimiter"
                        },
                        {
                            "start": 16,
                            "end": 32,
                            "content": "_contractAddress",
                            "highlight": "normal"
                        },
                        {
                            "start": 33,
                            "end": 35,
                            "content": "==",
                            "highlight": "keyword"
                        },
                        {
                            "start": 36,
                            "end": 54,
                            "content": "getContractAddress",
                            "highlight": "normal"
                        },
                        {
                            "start": 54,
                            "end": 55,
                            "content": "(",
                            "highlight": "delimiter"
                        },
                        {
                            "start": 55,
                            "end": 68,
                            "content": "_contractName",
                            "highlight": "normal"
                        },
                        {
                            "start": 68,
                            "end": 69,
                            "content": ")",
                            "highlight": "delimiter"
                        },
                        {
                            "start": 69,
                            "end": 70,
                            "content": ",",
                            "highlight": "normal"
                        },
                        {
                            "start": 71,
                            "end": 101,
                            "content": "\"Invalid or outdated contract\"",
                            "highlight": "string"
                        },
                        {
                            "start": 101,
                            "end": 102,
                            "content": ")",
                            "highlight": "delimiter"
                        }
                    ]
                },
                "rhs": {
                    "line_number": 91,
                    "changes": [
                        {
                            "start": 8,
                            "end": 109,
                            "content": "/* require(_contractAddress == getContractAddress(_contractName), \"Invalid or outdated contract\"); */",
                            "highlight": "comment"
                        }
                    ]
                }
            }
        ],
        [
            {
                "lhs": {
                    "line_number": 98,
                    "changes": [
                        {
                            "start": 8,
                            "end": 15,
                            "content": "require",
                            "highlight": "normal"
                        },
                        {
                            "start": 15,
                            "end": 16,
                            "content": "(",
                            "highlight": "delimiter"
                        },
                        {
                            "start": 16,
                            "end": 31,
                            "content": "contractAddress",
                            "highlight": "normal"
                        },
                        {
                            "start": 32,
                            "end": 34,
                            "content": "!=",
                            "highlight": "keyword"
                        },
                        {
                            "start": 35,
                            "end": 42,
                            "content": "address",
                            "highlight": "normal"
                        },
                        {
                            "start": 42,
                            "end": 43,
                            "content": "(",
                            "highlight": "delimiter"
                        },
                        {
                            "start": 43,
                            "end": 46,
                            "content": "0x0",
                            "highlight": "normal"
                        },
                        {
                            "start": 46,
                            "end": 47,
                            "content": ")",
                            "highlight": "delimiter"
                        },
                        {
                            "start": 47,
                            "end": 48,
                            "content": ",",
                            "highlight": "normal"
                        },
                        {
                            "start": 49,
                            "end": 69,
                            "content": "\"Contract not found\"",
                            "highlight": "string"
                        },
                        {
                            "start": 69,
                            "end": 70,
                            "content": ")",
                            "highlight": "delimiter"
                        }
                    ]
                },
                "rhs": {
                    "line_number": 98,
                    "changes": [
                        {
                            "start": 8,
                            "end": 77,
                            "content": "/* require(contractAddress != address(0x0), \"Contract not found\"); */",
                            "highlight": "comment"
                        }
                    ]
                }
            }
        ],
        [
            {
                "lhs": {
                    "line_number": 104,
                    "changes": [
                        {
                            "start": 8,
                            "end": 15,
                            "content": "require",
                            "highlight": "normal"
                        },
                        {
                            "start": 15,
                            "end": 16,
                            "content": "(",
                            "highlight": "delimiter"
                        },
                        {
                            "start": 16,
                            "end": 28,
                            "content": "_nodeAddress",
                            "highlight": "normal"
                        },
                        {
                            "start": 29,
                            "end": 31,
                            "content": "!=",
                            "highlight": "keyword"
                        },
                        {
                            "start": 32,
                            "end": 39,
                            "content": "address",
                            "highlight": "normal"
                        },
                        {
                            "start": 39,
                            "end": 40,
                            "content": "(",
                            "highlight": "delimiter"
                        },
                        {
                            "start": 40,
                            "end": 43,
                            "content": "0x0",
                            "highlight": "normal"
                        },
                        {
                            "start": 43,
                            "end": 44,
                            "content": ")",
                            "highlight": "delimiter"
                        },
                        {
                            "start": 44,
                            "end": 45,
                            "content": ",",
                            "highlight": "normal"
                        },
                        {
                            "start": 46,
                            "end": 68,
                            "content": "\"Invalid node address\"",
                            "highlight": "string"
                        },
                        {
                            "start": 68,
                            "end": 69,
                            "content": ")",
                            "highlight": "delimiter"
                        }
                    ]
                },
                "rhs": {
                    "line_number": 104,
                    "changes": [
                        {
                            "start": 8,
                            "end": 76,
                            "content": "/* require(_nodeAddress != address(0x0), \"Invalid node address\"); */",
                            "highlight": "comment"
                        }
                    ]
                }
            },
            {
                "lhs": {
                    "line_number": 105,
                    "changes": [
                        {
                            "start": 8,
                            "end": 15,
                            "content": "require",
                            "highlight": "normal"
                        },
                        {
                            "start": 15,
                            "end": 16,
                            "content": "(",
                            "highlight": "delimiter"
                        },
                        {
                            "start": 16,
                            "end": 28,
                            "content": "_depositType",
                            "highlight": "normal"
                        },
                        {
                            "start": 29,
                            "end": 31,
                            "content": "!=",
                            "highlight": "keyword"
                        },
                        {
                            "start": 32,
                            "end": 47,
                            "content": "MinipoolDeposit",
                            "highlight": "normal"
                        },
                        {
                            "start": 47,
                            "end": 48,
                            "content": ".",
                            "highlight": "normal"
                        },
                        {
                            "start": 48,
                            "end": 52,
                            "content": "None",
                            "highlight": "normal"
                        },
                        {
                            "start": 52,
                            "end": 53,
                            "content": ",",
                            "highlight": "normal"
                        },
                        {
                            "start": 54,
                            "end": 76,
                            "content": "\"Invalid deposit type\"",
                            "highlight": "string"
                        },
                        {
                            "start": 76,
                            "end": 77,
                            "content": ")",
                            "highlight": "delimiter"
                        }
                    ]
                },
                "rhs": {
                    "line_number": 105,
                    "changes": [
                        {
                            "start": 8,
                            "end": 84,
                            "content": "/* require(_depositType != MinipoolDeposit.None, \"Invalid deposit type\"); */",
                            "highlight": "comment"
                        }
                    ]
                }
            }
        ],
        [
            {
                "lhs": {
                    "line_number": 127,
                    "changes": [
                        {
                            "start": 8,
                            "end": 15,
                            "content": "require",
                            "highlight": "normal"
                        },
                        {
                            "start": 15,
                            "end": 16,
                            "content": "(",
                            "highlight": "delimiter"
                        },
                        {
                            "start": 16,
                            "end": 17,
                            "content": "!",
                            "highlight": "keyword"
                        },
                        {
                            "start": 17,
                            "end": 36,
                            "content": "nodeDepositAssigned",
                            "highlight": "normal"
                        },
                        {
                            "start": 36,
                            "end": 37,
                            "content": ",",
                            "highlight": "normal"
                        },
                        {
                            "start": 38,
                            "end": 82,
                            "content": "\"The node deposit has already been assigned\"",
                            "highlight": "string"
                        },
                        {
                            "start": 82,
                            "end": 83,
                            "content": ")",
                            "highlight": "delimiter"
                        }
                    ]
                },
                "rhs": {
                    "line_number": 127,
                    "changes": [
                        {
                            "start": 8,
                            "end": 90,
                            "content": "/* require(!nodeDepositAssigned, \"The node deposit has already been assigned\"); */",
                            "highlight": "comment"
                        }
                    ]
                }
            },
            {
                "lhs": {
                    "line_number": 126,
                    "changes": [
                        {
                            "start": 8,
                            "end": 15,
                            "content": "require",
                            "highlight": "normal"
                        },
                        {
                            "start": 15,
                            "end": 16,
                            "content": "(",
                            "highlight": "delimiter"
                        },
                        {
                            "start": 16,
                            "end": 22,
                            "content": "status",
                            "highlight": "normal"
                        },
                        {
                            "start": 23,
                            "end": 25,
                            "content": "==",
                            "highlight": "keyword"
                        },
                        {
                            "start": 26,
                            "end": 40,
                            "content": "MinipoolStatus",
                            "highlight": "normal"
                        },
                        {
                            "start": 40,
                            "end": 41,
                            "content": ".",
                            "highlight": "normal"
                        },
                        {
                            "start": 41,
                            "end": 52,
                            "content": "Initialized",
                            "highlight": "normal"
                        },
                        {
                            "start": 52,
                            "end": 53,
                            "content": ",",
                            "highlight": "normal"
                        },
                        {
                            "start": 54,
                            "end": 111,
                            "content": "\"The node deposit can only be assigned while initialized\"",
                            "highlight": "string"
                        },
                        {
                            "start": 111,
                            "end": 112,
                            "content": ")",
                            "highlight": "delimiter"
                        }
                    ]
                },
                "rhs": {
                    "line_number": 126,
                    "changes": [
                        {
                            "start": 8,
                            "end": 119,
                            "content": "/* require(status == MinipoolStatus.Initialized, \"The node deposit can only be assigned while initialized\"); */",
                            "highlight": "comment"
                        }
                    ]
                }
            }
        ]
    ]
}