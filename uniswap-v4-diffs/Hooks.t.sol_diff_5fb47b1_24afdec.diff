diff --git a/test/Hooks.t.sol b/test/Hooks.t.sol
index a2786893..4b626fc5 100644
--- a/test/Hooks.t.sol
+++ b/test/Hooks.t.sol
@@ -11,6 +11,7 @@ import {IPoolManager} from "../src/interfaces/IPoolManager.sol";
 import {MockERC20} from "solmate/test/utils/mocks/MockERC20.sol";
 import {IHooks} from "../src/interfaces/IHooks.sol";
 import {Currency} from "../src/types/Currency.sol";
+import {IERC20Minimal} from "../src/interfaces/external/IERC20Minimal.sol";
 import {PoolManager} from "../src/PoolManager.sol";
 import {PoolModifyPositionTest} from "../src/test/PoolModifyPositionTest.sol";
 import {PoolSwapTest} from "../src/test/PoolSwapTest.sol";
@@ -33,15 +34,14 @@ contract HooksTest is Test, Deployers, GasSnapshot {
         MockHooks impl = new MockHooks();
         vm.etch(ALL_HOOKS_ADDRESS, address(impl).code);
         mockHooks = MockHooks(ALL_HOOKS_ADDRESS);
-        (manager, key,) = Deployers.createAndInitFreshPool(mockHooks, 3000, SQRT_RATIO_1_1);
+        (manager, key,) = Deployers.createFreshPool(mockHooks, 3000, SQRT_RATIO_1_1);
         modifyPositionRouter = new PoolModifyPositionTest(IPoolManager(address(manager)));
         swapRouter = new PoolSwapTest(IPoolManager(address(manager)));
         donateRouter = new PoolDonateTest(IPoolManager(address(manager)));
     }
 
     function testInitializeSucceedsWithHook() public {
-        (PoolManager _manager,, PoolId id) =
-            Deployers.createAndInitFreshPool(mockHooks, 3000, SQRT_RATIO_1_1, new bytes(123));
+        (PoolManager _manager,, PoolId id) = Deployers.createFreshPool(mockHooks, 3000, SQRT_RATIO_1_1, new bytes(123));
         (uint160 sqrtPriceX96,,,) = _manager.getSlot0(id);
         assertEq(sqrtPriceX96, SQRT_RATIO_1_1);
         assertEq(mockHooks.beforeInitializeData(), new bytes(123));
@@ -66,7 +66,7 @@ contract HooksTest is Test, Deployers, GasSnapshot {
 
     function testModifyPositionSucceedsWithHook() public {
         MockERC20(Currency.unwrap(key.currency0)).mint(address(this), 10 ** 18);
-        MockERC20(Currency.unwrap(key.currency0)).approve(address(modifyPositionRouter), 10 ** 18);
+        IERC20Minimal(Currency.unwrap(key.currency0)).approve(address(modifyPositionRouter), 10 ** 18);
         modifyPositionRouter.modifyPosition(key, IPoolManager.ModifyPositionParams(0, 60, 100), new bytes(111));
         assertEq(mockHooks.beforeModifyPositionData(), new bytes(111));
         assertEq(mockHooks.afterModifyPositionData(), new bytes(111));
@@ -75,7 +75,7 @@ contract HooksTest is Test, Deployers, GasSnapshot {
     function testBeforeModifyPositionInvalidReturn() public {
         mockHooks.setReturnValue(mockHooks.beforeModifyPosition.selector, bytes4(0xdeadbeef));
         MockERC20(Currency.unwrap(key.currency0)).mint(address(this), 10 ** 18);
-        MockERC20(Currency.unwrap(key.currency0)).approve(address(modifyPositionRouter), 10 ** 18);
+        IERC20Minimal(Currency.unwrap(key.currency0)).approve(address(modifyPositionRouter), 10 ** 18);
         vm.expectRevert(Hooks.InvalidHookResponse.selector);
         modifyPositionRouter.modifyPosition(key, IPoolManager.ModifyPositionParams(0, 60, 100), ZERO_BYTES);
     }
@@ -83,30 +83,20 @@ contract HooksTest is Test, Deployers, GasSnapshot {
     function testAfterModifyPositionInvalidReturn() public {
         mockHooks.setReturnValue(mockHooks.afterModifyPosition.selector, bytes4(0xdeadbeef));
         MockERC20(Currency.unwrap(key.currency0)).mint(address(this), 10 ** 18);
-        MockERC20(Currency.unwrap(key.currency0)).approve(address(modifyPositionRouter), 10 ** 18);
+        IERC20Minimal(Currency.unwrap(key.currency0)).approve(address(modifyPositionRouter), 10 ** 18);
         vm.expectRevert(Hooks.InvalidHookResponse.selector);
         modifyPositionRouter.modifyPosition(key, IPoolManager.ModifyPositionParams(0, 60, 100), ZERO_BYTES);
     }
 
     function testSwapSucceedsWithHook() public {
         MockERC20(Currency.unwrap(key.currency0)).mint(address(this), 10 ** 18);
-        MockERC20(Currency.unwrap(key.currency1)).mint(address(this), 10 ** 18);
-        MockERC20(Currency.unwrap(key.currency0)).approve(address(swapRouter), 10 ** 18);
-        MockERC20(Currency.unwrap(key.currency1)).approve(address(swapRouter), 10 ** 18);
-        MockERC20(Currency.unwrap(key.currency0)).approve(address(modifyPositionRouter), 10 ** 18);
-        MockERC20(Currency.unwrap(key.currency1)).approve(address(modifyPositionRouter), 10 ** 18);
-
-        IPoolManager.ModifyPositionParams memory liqParams =
-            IPoolManager.ModifyPositionParams({tickLower: -120, tickUpper: 120, liquidityDelta: 1e18});
-
-        IPoolManager.SwapParams memory swapParams =
-            IPoolManager.SwapParams({zeroForOne: true, amountSpecified: 100, sqrtPriceLimitX96: SQRT_RATIO_1_2});
-
-        PoolSwapTest.TestSettings memory testSettings =
-            PoolSwapTest.TestSettings({withdrawTokens: true, settleUsingTransfer: true});
-
-        modifyPositionRouter.modifyPosition(key, liqParams, new bytes(111));
-        swapRouter.swap(key, swapParams, testSettings, new bytes(222));
+        IERC20Minimal(Currency.unwrap(key.currency0)).approve(address(swapRouter), 10 ** 18);
+        swapRouter.swap(
+            key,
+            IPoolManager.SwapParams(false, 100, SQRT_RATIO_1_1 + 60),
+            PoolSwapTest.TestSettings(false, false),
+            new bytes(222)
+        );
         assertEq(mockHooks.beforeSwapData(), new bytes(222));
         assertEq(mockHooks.afterSwapData(), new bytes(222));
     }
@@ -114,7 +104,7 @@ contract HooksTest is Test, Deployers, GasSnapshot {
     function testBeforeSwapInvalidReturn() public {
         mockHooks.setReturnValue(mockHooks.beforeSwap.selector, bytes4(0xdeadbeef));
         MockERC20(Currency.unwrap(key.currency0)).mint(address(this), 10 ** 18);
-        MockERC20(Currency.unwrap(key.currency0)).approve(address(swapRouter), 10 ** 18);
+        IERC20Minimal(Currency.unwrap(key.currency0)).approve(address(swapRouter), 10 ** 18);
         vm.expectRevert(Hooks.InvalidHookResponse.selector);
         swapRouter.swap(
             key,
@@ -127,7 +117,7 @@ contract HooksTest is Test, Deployers, GasSnapshot {
     function testAfterSwapInvalidReturn() public {
         mockHooks.setReturnValue(mockHooks.afterSwap.selector, bytes4(0xdeadbeef));
         MockERC20(Currency.unwrap(key.currency0)).mint(address(this), 10 ** 18);
-        MockERC20(Currency.unwrap(key.currency0)).approve(address(swapRouter), 10 ** 18);
+        IERC20Minimal(Currency.unwrap(key.currency0)).approve(address(swapRouter), 10 ** 18);
         vm.expectRevert(Hooks.InvalidHookResponse.selector);
         swapRouter.swap(
             key,
@@ -140,8 +130,8 @@ contract HooksTest is Test, Deployers, GasSnapshot {
     function testDonateSucceedsWithHook() public {
         addLiquidity(0, 60, 100);
 
-        MockERC20(Currency.unwrap(key.currency0)).approve(address(donateRouter), 100);
-        MockERC20(Currency.unwrap(key.currency1)).approve(address(donateRouter), 200);
+        IERC20Minimal(Currency.unwrap(key.currency0)).approve(address(donateRouter), 100);
+        IERC20Minimal(Currency.unwrap(key.currency1)).approve(address(donateRouter), 200);
         donateRouter.donate(key, 100, 200, new bytes(333));
         assertEq(mockHooks.beforeDonateData(), new bytes(333));
         assertEq(mockHooks.afterDonateData(), new bytes(333));
@@ -151,8 +141,8 @@ contract HooksTest is Test, Deployers, GasSnapshot {
         mockHooks.setReturnValue(mockHooks.beforeDonate.selector, bytes4(0xdeadbeef));
         addLiquidity(0, 60, 100);
 
-        MockERC20(Currency.unwrap(key.currency0)).approve(address(donateRouter), 100);
-        MockERC20(Currency.unwrap(key.currency1)).approve(address(donateRouter), 200);
+        IERC20Minimal(Currency.unwrap(key.currency0)).approve(address(donateRouter), 100);
+        IERC20Minimal(Currency.unwrap(key.currency1)).approve(address(donateRouter), 200);
         vm.expectRevert(Hooks.InvalidHookResponse.selector);
         donateRouter.donate(key, 100, 200, ZERO_BYTES);
     }
@@ -161,8 +151,8 @@ contract HooksTest is Test, Deployers, GasSnapshot {
         mockHooks.setReturnValue(mockHooks.beforeDonate.selector, bytes4(0xdeadbeef));
         addLiquidity(0, 60, 100);
 
-        MockERC20(Currency.unwrap(key.currency0)).approve(address(donateRouter), 100);
-        MockERC20(Currency.unwrap(key.currency1)).approve(address(donateRouter), 200);
+        IERC20Minimal(Currency.unwrap(key.currency0)).approve(address(donateRouter), 100);
+        IERC20Minimal(Currency.unwrap(key.currency1)).approve(address(donateRouter), 200);
         vm.expectRevert(Hooks.InvalidHookResponse.selector);
         donateRouter.donate(key, 100, 200, ZERO_BYTES);
     }
@@ -645,8 +635,8 @@ contract HooksTest is Test, Deployers, GasSnapshot {
     function addLiquidity(int24 tickLower, int24 tickUpper, int256 amount) internal {
         MockERC20(Currency.unwrap(key.currency0)).mint(address(this), 10 ** 18);
         MockERC20(Currency.unwrap(key.currency1)).mint(address(this), 10 ** 18);
-        MockERC20(Currency.unwrap(key.currency0)).approve(address(modifyPositionRouter), 10 ** 18);
-        MockERC20(Currency.unwrap(key.currency1)).approve(address(modifyPositionRouter), 10 ** 18);
+        IERC20Minimal(Currency.unwrap(key.currency0)).approve(address(modifyPositionRouter), 10 ** 18);
+        IERC20Minimal(Currency.unwrap(key.currency1)).approve(address(modifyPositionRouter), 10 ** 18);
         modifyPositionRouter.modifyPosition(
             key, IPoolManager.ModifyPositionParams(tickLower, tickUpper, amount), ZERO_BYTES
         );
