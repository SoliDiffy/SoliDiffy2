diff --git a/src/ProtocolFees.sol b/src/ProtocolFees.sol
index 02c14a55..d71318bb 100644
--- a/src/ProtocolFees.sol
+++ b/src/ProtocolFees.sol
@@ -61,11 +61,11 @@ abstract contract ProtocolFees is IProtocolFees, Owned {
     /// @dev this is overriden in PoolManager.sol to give access to the _pools mapping
     function _getPool(PoolId id) internal virtual returns (Pool.State storage);
 
-    /// @notice Fetch the protocol fees for a given pool, returning false if the call fails or the returned fees are invalid.
+    /// @notice Fetch the protocol fees for a given pool
+    /// @dev the success of this function is false if the call fails or the returned fees are invalid
     /// @dev to prevent an invalid protocol fee controller from blocking pools from being initialized
-    ///      the success of this function is NOT checked on initialize and if the call fails, the protocol fees are set to 0.
-    /// @dev the success of this function must be checked when called in setProtocolFee
-    function _fetchProtocolFee(PoolKey memory key) internal returns (bool success, uint24 protocolFee) {
+    /// the success of this function is NOT checked on initialize and if the call fails, the protocol fees are set to 0.
+    function _fetchProtocolFee(PoolKey memory key) internal returns (uint24 protocolFee) {
         if (address(protocolFeeController) != address(0)) {
             // note that EIP-150 mandates that calls requesting more than 63/64ths of remaining gas
             // will be allotted no more than this amount, so controllerGasLimit must be set with this
@@ -76,6 +76,8 @@ abstract contract ProtocolFees is IProtocolFees, Owned {
             address toAddress = address(protocolFeeController);
 
             bytes memory data = abi.encodeCall(IProtocolFeeController.protocolFeeForPool, (key));
+
+            bool success;
             uint256 returnData;
             assembly ("memory-safe") {
                 // only load the first 32 bytes of the return data to prevent gas griefing
@@ -88,8 +90,9 @@ abstract contract ProtocolFees is IProtocolFees, Owned {
             }
 
             // Ensure return data does not overflow a uint24 and that the underlying fees are within bounds.
-            (success, protocolFee) = success && (returnData == uint24(returnData))
-                && uint24(returnData).isValidProtocolFee() ? (true, uint24(returnData)) : (false, 0);
+            protocolFee = success && (returnData == uint24(returnData)) && uint24(returnData).isValidProtocolFee()
+                ? uint24(returnData)
+                : 0;
         }
     }
 
