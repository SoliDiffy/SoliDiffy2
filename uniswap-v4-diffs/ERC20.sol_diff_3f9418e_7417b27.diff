diff --git a/contracts/token/ERC20.sol b/contracts/token/ERC20.sol
index a198a2a6..2cc4f038 100644
--- a/contracts/token/ERC20.sol
+++ b/contracts/token/ERC20.sol
@@ -16,9 +16,12 @@ contract ERC20 is IERC20 {
 	mapping (address => uint256) public balanceOf;
 	mapping (address => mapping (address => uint256)) public allowance;
 
-	// EIP-191
-	uint256 public chainId;
+	// EIP-712
     mapping (address => uint) public nonceFor;
+	bytes32 public DOMAIN_SEPARATOR;
+    bytes32 public APPROVE_TYPEHASH = keccak256(
+		"Approve(address owner,address spender,uint256 value,uint256 nonce,uint256 expiration)"
+	);
 
 	event Transfer(address indexed from, address indexed to, uint256 value);
 	event Approval(address indexed owner, address indexed spender, uint256 value);
@@ -30,9 +33,15 @@ contract ERC20 is IERC20 {
 		mint(msg.sender, _totalSupply);
 	}
 
-    function initialize(uint256 _chainId) internal {
-        require(chainId == 0, "ERC20: ALREADY_INITIALIZED");
-		chainId = _chainId;
+    function initialize(uint256 chainId) internal {
+		require(DOMAIN_SEPARATOR == bytes32(0), "ERC20: ALREADY_INITIALIZED");
+		DOMAIN_SEPARATOR = keccak256(abi.encode(
+            keccak256("EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"),
+            keccak256(bytes(name)),
+            keccak256(bytes("1")),
+            chainId,
+            address(this)
+        ));
 	}
 
 	function mint(address to, uint256 value) internal {
@@ -97,20 +106,20 @@ contract ERC20 is IERC20 {
 		bytes32 r,
 		bytes32 s
 	) external {
-		require(chainId != 0, "ERC20: UNINITIALIZED");
+		require(DOMAIN_SEPARATOR != bytes32(0), "ERC20: UNINITIALIZED");
         require(nonce == nonceFor[owner]++, "ERC20: INVALID_NONCE");
 		require(expiration > block.timestamp, "ERC20: EXPIRED_SIGNATURE");
 
         bytes32 digest = keccak256(abi.encodePacked(
-			hex'19',
-			hex'00',
-			address(this),
-			keccak256(abi.encodePacked(
-				owner, spender, value, nonce, expiration, chainId
+			byte(0x19),
+			byte(0x01),
+			DOMAIN_SEPARATOR,
+			keccak256(abi.encode(
+				APPROVE_TYPEHASH, owner, spender, value, nonce, expiration
 			))
-		));
+        ));
         require(owner == ecrecover(digest, v, r, s), "ERC20: INVALID_SIGNATURE"); // TODO add ECDSA checks? https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/cryptography/ECDSA.sol
 
-		_approve(owner, spender, value);
+		_approve(msg.sender, spender, value);
 	}
 }
