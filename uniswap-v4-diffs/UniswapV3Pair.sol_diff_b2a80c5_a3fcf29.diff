diff --git a/contracts/UniswapV3Pair.sol b/contracts/UniswapV3Pair.sol
index c7cb9833..2cc696ca 100644
--- a/contracts/UniswapV3Pair.sol
+++ b/contracts/UniswapV3Pair.sol
@@ -6,11 +6,7 @@ import '@uniswap/lib/contracts/libraries/FixedPoint.sol';
 import '@uniswap/lib/contracts/libraries/Babylonian.sol';
 import '@uniswap/lib/contracts/libraries/TransferHelper.sol';
 
-import '@openzeppelin/contracts/math/SafeMath.sol';
-import '@openzeppelin/contracts/math/SignedSafeMath.sol';
-
-import './libraries/SafeCast.sol';
-import './libraries/MixedSafeMath.sol';
+import './libraries/SafeMath.sol';
 import './libraries/TickMath.sol';
 import './libraries/PriceMath.sol';
 
@@ -19,12 +15,7 @@ import './interfaces/IUniswapV3Factory.sol';
 import './interfaces/IUniswapV3Callee.sol';
 
 contract UniswapV3Pair is IUniswapV3Pair {
-    using SafeMath for uint256;
-    using SafeMath for uint112;
-    using SignedSafeMath for int256;
-    using SignedSafeMath for int112;
-    using SafeCast for *;
-    using MixedSafeMath for *;
+    using SafeMath for *;
     using FixedPoint for *;
 
     // Number of fee options
@@ -207,8 +198,8 @@ contract UniswapV3Pair is IUniswapV3Pair {
         pure
         returns (int112 amount0, int112 amount1)
     {
-        amount0 = price.reciprocal().sqrt().muli(liquidity).toInt112();
-        amount1 = price.muli(amount0).toInt112();
+        amount0 = price.reciprocal().sqrt().muli(liquidity).itoInt112();
+        amount1 = price.muli(amount0).itoInt112();
     }
 
     constructor(
@@ -472,31 +463,31 @@ contract UniswapV3Pair is IUniswapV3Pair {
         // regardless of current price, when lower tick is crossed from left to right, amount0Lower should be added
         if (tickLower > TickMath.MIN_TICK) {
             tickInfoLower.token0VirtualDeltas[feeVote] = tickInfoLower.token0VirtualDeltas[feeVote]
-                .add(amount0Lower)
-                .toInt112();
+                .iadd(amount0Lower)
+                .itoInt112();
         }
         // regardless of current price, when upper tick is crossed from left to right amount0Upper should be removed
         if (tickUpper < TickMath.MAX_TICK) {
             tickInfoUpper.token0VirtualDeltas[feeVote] = tickInfoUpper.token0VirtualDeltas[feeVote]
-                .sub(amount0Upper)
-                .toInt112();
+                .isub(amount0Upper)
+                .itoInt112();
         }
 
         // the current price is below the passed range, so the liquidity can only become in range by crossing from left
         // to right, at which point we'll need _more_ token0 (it's becoming more valuable) so the user must provide it
         if (tickCurrent < tickLower) {
-            amount0 = amount0.add(amount0Lower.sub(amount0Upper)).toInt112();
+            amount0 = amount0.iadd(amount0Lower.isub(amount0Upper)).itoInt112();
         } else if (tickCurrent < tickUpper) {
             // the current price is inside the passed range
             (int112 amount0Current, int112 amount1Current) = updateReservesAndVirtualSupply(liquidityDelta, feeVote);
 
             // charge the user whatever is required to cover their position
-            amount0 = amount0.add(amount0Current.sub(amount0Upper)).toInt112();
-            amount1 = amount1.add(amount1Current.sub(amount1Lower)).toInt112();
+            amount0 = amount0.iadd(amount0Current.isub(amount0Upper)).itoInt112();
+            amount1 = amount1.iadd(amount1Current.isub(amount1Lower)).itoInt112();
         } else {
             // the current price is above the passed range, so the liquidity can only become in range by crossing from right
             // to left, at which point we'll need _more_ token1 (it's becoming more valuable) so the user must provide it
-            amount1 = amount1.add(amount1Upper.sub(amount1Lower)).toInt112();
+            amount1 = amount1.iadd(amount1Upper.isub(amount1Lower)).itoInt112();
         }
 
         if (amount0 > 0) {
@@ -617,7 +608,7 @@ contract UniswapV3Pair is IUniswapV3Pair {
                     // TODO this should always move the price _down_ (if it has to move at all), because that's the
                     // direction we're moving...floor division should ensure that this is the case with positive deltas,
                     // but not with negative
-                    int112 token1VirtualDelta = step.nextPrice.muli(token0VirtualDelta).toInt112();
+                    int112 token1VirtualDelta = step.nextPrice.muli(token0VirtualDelta).itoInt112();
                     // TODO i think we could squeeze out a tiny bit more precision under certain circumstances by doing:
                     // a) summing total negative and positive token0VirtualDeltas
                     // b) calculating the total negative and positive virtualSupply delta
@@ -626,9 +617,9 @@ contract UniswapV3Pair is IUniswapV3Pair {
                     // note: this may be overkill/unnecessary
                     uint112 virtualSupply = getVirtualSupply();
                     for (uint8 i = 0; i < NUM_FEE_OPTIONS; i++) {
-                        int112 virtualSupplyDelta = (tickInfo.token0VirtualDeltas[i].mul(virtualSupply) /
+                        int112 virtualSupplyDelta = (tickInfo.token0VirtualDeltas[i].imul(virtualSupply) /
                             reserveInVirtual)
-                            .toInt112();
+                            .itoInt112();
                         // TODO are these SSTOREs optimized/packed?
                         virtualSupplies[i] = virtualSupplies[i].subi(virtualSupplyDelta).toUint112();
                     }
