diff --git a/contracts/test/PoolSwapTest.sol b/contracts/test/PoolSwapTest.sol
index 189c8e45..bcdfc464 100644
--- a/contracts/test/PoolSwapTest.sol
+++ b/contracts/test/PoolSwapTest.sol
@@ -1,15 +1,14 @@
 // SPDX-License-Identifier: UNLICENSED
 pragma solidity =0.8.19;
 
-import {CurrencyLibrary, Currency} from "../libraries/CurrencyLibrary.sol";
-import {IERC20Minimal} from "../interfaces/external/IERC20Minimal.sol";
+import {CurrencyLibrary, Currency} from '../libraries/CurrencyLibrary.sol';
+import {IERC20Minimal} from '../interfaces/external/IERC20Minimal.sol';
 
-import {ILockCallback} from "../interfaces/callback/ILockCallback.sol";
-import {IPoolManager} from "../interfaces/IPoolManager.sol";
+import {ILockCallback} from '../interfaces/callback/ILockCallback.sol';
+import {IPoolManager} from '../interfaces/IPoolManager.sol';
 
 contract PoolSwapTest is ILockCallback {
     using CurrencyLibrary for Currency;
-
     IPoolManager public immutable manager;
 
     constructor(IPoolManager _manager) {
@@ -34,7 +33,8 @@ contract PoolSwapTest is ILockCallback {
         TestSettings memory testSettings
     ) external payable returns (IPoolManager.BalanceDelta memory delta) {
         delta = abi.decode(
-            manager.lock(abi.encode(CallbackData(msg.sender, testSettings, key, params))), (IPoolManager.BalanceDelta)
+            manager.lock(abi.encode(CallbackData(msg.sender, testSettings, key, params))),
+            (IPoolManager.BalanceDelta)
         );
 
         uint256 ethBalance = address(this).balance;
@@ -57,7 +57,9 @@ contract PoolSwapTest is ILockCallback {
                         manager.settle{value: uint256(delta.amount0)}(data.key.currency0);
                     } else {
                         IERC20Minimal(Currency.unwrap(data.key.currency0)).transferFrom(
-                            data.sender, address(manager), uint256(delta.amount0)
+                            data.sender,
+                            address(manager),
+                            uint256(delta.amount0)
                         );
                         manager.settle(data.key.currency0);
                     }
@@ -68,16 +70,14 @@ contract PoolSwapTest is ILockCallback {
                         address(manager),
                         uint256(uint160(Currency.unwrap(data.key.currency0))),
                         uint256(delta.amount0),
-                        ""
+                        ''
                     );
                 }
             }
             if (delta.amount1 < 0) {
-                if (data.testSettings.withdrawTokens) {
+                if (data.testSettings.withdrawTokens)
                     manager.take(data.key.currency1, data.sender, uint256(-delta.amount1));
-                } else {
-                    manager.mint(data.key.currency1, data.sender, uint256(-delta.amount1));
-                }
+                else manager.mint(data.key.currency1, data.sender, uint256(-delta.amount1));
             }
         } else {
             if (delta.amount1 > 0) {
@@ -86,7 +86,9 @@ contract PoolSwapTest is ILockCallback {
                         manager.settle{value: uint256(delta.amount1)}(data.key.currency1);
                     } else {
                         IERC20Minimal(Currency.unwrap(data.key.currency1)).transferFrom(
-                            data.sender, address(manager), uint256(delta.amount1)
+                            data.sender,
+                            address(manager),
+                            uint256(delta.amount1)
                         );
                         manager.settle(data.key.currency1);
                     }
@@ -97,16 +99,14 @@ contract PoolSwapTest is ILockCallback {
                         address(manager),
                         uint256(uint160(Currency.unwrap(data.key.currency1))),
                         uint256(delta.amount1),
-                        ""
+                        ''
                     );
                 }
             }
             if (delta.amount0 < 0) {
-                if (data.testSettings.withdrawTokens) {
+                if (data.testSettings.withdrawTokens)
                     manager.take(data.key.currency0, data.sender, uint256(-delta.amount0));
-                } else {
-                    manager.mint(data.key.currency0, data.sender, uint256(-delta.amount0));
-                }
+                else manager.mint(data.key.currency0, data.sender, uint256(-delta.amount0));
             }
         }
 
