diff --git a/contracts/UniswapV3Pair.sol b/contracts/UniswapV3Pair.sol
index 2d626d84..071b2ba3 100644
--- a/contracts/UniswapV3Pair.sol
+++ b/contracts/UniswapV3Pair.sol
@@ -104,8 +104,7 @@ contract UniswapV3Pair is IUniswapV3Pair, NoDelegateCall {
     Oracle.Observation[65535] public override observations;
 
     /// @dev Mutually exclusive reentrancy protection into the pair to/from a method. This method also prevents entrance
-    /// to a function before the pair is initialized. The reentrancy guard is required throughout the contract because
-    /// we use balance checks to determine the payment status of interactions such as mint, swap and flash.
+    /// to a function before the pair is initialized.
     modifier lock() {
         require(slot0.unlocked, 'LOK');
         slot0.unlocked = false;
@@ -139,12 +138,12 @@ contract UniswapV3Pair is IUniswapV3Pair, NoDelegateCall {
         return uint32(block.timestamp); // truncation is desired
     }
 
-    /// @dev Get the pair's balance of token0
+    /// @dev Get the balance of token0
     function balance0() private view returns (uint256) {
         return balanceOfToken(token0);
     }
 
-    /// @dev Get the pair's balance of token1
+    /// @dev Get the balance of token1
     function balance1() private view returns (uint256) {
         return balanceOfToken(token1);
     }
