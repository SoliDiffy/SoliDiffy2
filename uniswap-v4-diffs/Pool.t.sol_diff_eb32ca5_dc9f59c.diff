diff --git a/test/Pool.t.sol b/test/Pool.t.sol
index 668e62cb..f105a2be 100644
--- a/test/Pool.t.sol
+++ b/test/Pool.t.sol
@@ -17,14 +17,27 @@ contract PoolTest is Test {
 
     Pool.State state;
 
-    function testPoolInitialize(uint160 sqrtPriceX96, uint16 protocolFee, uint24 dynamicFee) public {
+    function testPoolInitialize(uint160 sqrtPriceX96, uint16 protocolFee, uint16 hookFee, uint24 dynamicFee) public {
+        protocolFee = uint16(bound(protocolFee, 0, (2 ** 12) - 1));
+        hookFee = uint16(bound(hookFee, 0, (2 ** 12) - 1));
+
         if (sqrtPriceX96 < TickMath.MIN_SQRT_RATIO || sqrtPriceX96 >= TickMath.MAX_SQRT_RATIO) {
             vm.expectRevert(TickMath.InvalidSqrtRatio.selector);
-            state.initialize(sqrtPriceX96, protocolFee, dynamicFee);
+            state.initialize(
+                sqrtPriceX96,
+                _formatSwapAndWithdrawFee(protocolFee, protocolFee),
+                _formatSwapAndWithdrawFee(hookFee, hookFee),
+                dynamicFee
+            );
         } else {
-            state.initialize(sqrtPriceX96, protocolFee, dynamicFee);
+            state.initialize(
+                sqrtPriceX96,
+                _formatSwapAndWithdrawFee(protocolFee, protocolFee),
+                _formatSwapAndWithdrawFee(hookFee, hookFee),
+                dynamicFee
+            );
             assertEq(state.slot0.sqrtPriceX96, sqrtPriceX96);
-            assertEq(state.slot0.protocolFee, protocolFee);
+            assertEq(state.slot0.protocolFees >> 12, protocolFee);
             assertEq(state.slot0.tick, TickMath.getTickAtSqrtRatio(sqrtPriceX96));
             assertLt(state.slot0.tick, TickMath.MAX_TICK);
             assertGt(state.slot0.tick, TickMath.MIN_TICK - 1);
@@ -35,7 +48,7 @@ contract PoolTest is Test {
         // Assumptions tested in PoolManager.t.sol
         params.tickSpacing = int24(bound(params.tickSpacing, TickMath.MIN_TICK_SPACING, TickMath.MAX_TICK_SPACING));
 
-        testPoolInitialize(sqrtPriceX96, 0, 0);
+        testPoolInitialize(sqrtPriceX96, 0, 0, 0);
 
         if (params.tickLower >= params.tickUpper) {
             vm.expectRevert(abi.encodeWithSelector(Pool.TicksMisordered.selector, params.tickLower, params.tickUpper));
@@ -81,7 +94,7 @@ contract PoolTest is Test {
         params.tickSpacing = int24(bound(params.tickSpacing, TickMath.MIN_TICK_SPACING, TickMath.MAX_TICK_SPACING));
         swapFee = uint24(bound(swapFee, 0, 999999));
 
-        testPoolInitialize(sqrtPriceX96, 0, 0);
+        testPoolInitialize(sqrtPriceX96, 0, 0, 0);
         Pool.Slot0 memory slot0 = state.slot0;
 
         if (params.amountSpecified == 0) {
@@ -116,4 +129,8 @@ contract PoolTest is Test {
             assertGe(state.slot0.sqrtPriceX96, params.sqrtPriceLimitX96);
         }
     }
+
+    function _formatSwapAndWithdrawFee(uint16 swapFee, uint16 withdrawFee) internal pure returns (uint24) {
+        return (uint24(swapFee) << 12) | withdrawFee;
+    }
 }
