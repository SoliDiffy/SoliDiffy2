diff --git a/contracts/libraries/PriceMath.sol b/contracts/libraries/PriceMath.sol
index b548f38c..f130bb47 100644
--- a/contracts/libraries/PriceMath.sol
+++ b/contracts/libraries/PriceMath.sol
@@ -9,8 +9,11 @@ import '@uniswap/lib/contracts/libraries/FullMath.sol';
 import '@uniswap/lib/contracts/libraries/Babylonian.sol';
 import '@uniswap/lib/contracts/libraries/BitMath.sol';
 
+import './SafeCast.sol';
+
 library PriceMath {
     using SafeMath for uint256;
+    using SafeCast for uint256;
 
     uint16 public constant LP_FEE_BASE = 1e4; // i.e. 10k bips, 100%
 
@@ -75,4 +78,73 @@ library PriceMath {
         // scale amountIn by the current fee (rounding up)
         amountIn = mulDivRoundingUp(amountIn, LP_FEE_BASE, LP_FEE_BASE - lpFee);
     }
+
+    function getAmount0Delta(
+        FixedPoint.uq112x112 memory priceLower,
+        FixedPoint.uq112x112 memory priceUpper,
+        int112 liquidity
+    ) internal pure returns (int256) {
+        if (liquidity == 0) return 0;
+
+        uint8 safeShiftBits = ((255 - BitMath.mostSignificantBit(priceUpper._x)) / 2) * 2;
+        if (liquidity < 0) safeShiftBits -= 2; // ensure that our denominator won't overflow
+
+        uint256 priceLowerScaled = uint256(priceLower._x) << safeShiftBits; // priceLower * 2**safeShiftBits
+        uint256 priceLowerScaledRoot = Babylonian.sqrt(priceLowerScaled); // sqrt(priceLowerScaled)
+        bool roundUpLower = priceLowerScaledRoot**2 < priceLowerScaled;
+
+        uint256 priceUpperScaled = uint256(priceUpper._x) << safeShiftBits; // priceUpper * 2**safeShiftBits
+        uint256 priceUpperScaledRoot = Babylonian.sqrt(priceUpperScaled); // sqrt(priceUpperScaled)
+        bool roundUpUpper = priceUpperScaledRoot**2 < priceUpperScaled;
+
+        // calculate liquidity * (sqrt(priceUpper) - sqrt(priceLower)) / sqrt(priceUpper) * sqrt(priceLower)
+        if (liquidity > 0) {
+            uint256 amount0 = PriceMath.mulDivRoundingUp(
+                uint256(liquidity) << (safeShiftBits / 2), // * 2**(SSB/2)
+                (priceUpperScaledRoot + (roundUpUpper ? 1 : 0) - priceLowerScaledRoot) << 56, // * 2**56
+                priceLowerScaledRoot * priceUpperScaledRoot
+            );
+            return amount0.toInt256();
+        }
+        uint256 amount0 = FullMath.mulDiv(
+            uint256(uint112(-liquidity)) << (safeShiftBits / 2), // * 2**(SSB/2)
+            priceUpperScaledRoot.sub(priceLowerScaledRoot + (roundUpLower ? 1 : 0)) << 56, // * 2**56
+            (priceLowerScaledRoot + (roundUpLower ? 1 : 0)) * (priceUpperScaledRoot + (roundUpUpper ? 1 : 0))
+        );
+        return -amount0.toInt256();
+    }
+
+    function getAmount1Delta(
+        FixedPoint.uq112x112 memory priceLower,
+        FixedPoint.uq112x112 memory priceUpper,
+        int112 liquidity
+    ) internal pure returns (int256) {
+        if (liquidity == 0) return 0;
+
+        uint8 safeShiftBits = ((255 - BitMath.mostSignificantBit(priceUpper._x)) / 2) * 2;
+
+        uint256 priceLowerScaled = uint256(priceLower._x) << safeShiftBits; // priceLower * 2**safeShiftBits
+        uint256 priceLowerScaledRoot = Babylonian.sqrt(priceLowerScaled); // sqrt(priceLowerScaled)
+        bool roundUpLower = priceLowerScaledRoot**2 < priceLowerScaled;
+
+        uint256 priceUpperScaled = uint256(priceUpper._x) << safeShiftBits; // priceUpper * 2**safeShiftBits
+        uint256 priceUpperScaledRoot = Babylonian.sqrt(priceUpperScaled); // sqrt(priceUpperScaled)
+        bool roundUpUpper = priceUpperScaledRoot**2 < priceUpperScaled;
+
+        // calculate liquidity * (sqrt(priceUpper) - sqrt(priceLower))
+        if (liquidity > 0) {
+            uint256 amount1 = PriceMath.mulDivRoundingUp(
+                uint256(liquidity),
+                priceUpperScaledRoot + (roundUpUpper ? 1 : 0) - priceLowerScaledRoot,
+                uint256(1) << (56 + safeShiftBits / 2)
+            );
+            return amount1.toInt256();
+        }
+        uint256 amount1 = FullMath.mulDiv(
+            uint256(uint112(-liquidity)),
+            priceUpperScaledRoot.sub(priceLowerScaledRoot + (roundUpLower ? 1 : 0)),
+            uint256(1) << (56 + safeShiftBits / 2)
+        );
+        return -amount1.toInt256();
+    }
 }
