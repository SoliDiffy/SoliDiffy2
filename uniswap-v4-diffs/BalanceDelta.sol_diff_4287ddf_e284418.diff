diff --git a/src/types/BalanceDelta.sol b/src/types/BalanceDelta.sol
index 0dcfc1b1..3d39d0ef 100644
--- a/src/types/BalanceDelta.sol
+++ b/src/types/BalanceDelta.sol
@@ -1,5 +1,5 @@
 // SPDX-License-Identifier: MIT
-pragma solidity ^0.8.20;
+pragma solidity ^0.8.0;
 
 import {SafeCast} from "../libraries/SafeCast.sol";
 
@@ -12,7 +12,7 @@ using BalanceDeltaLibrary for BalanceDelta global;
 using SafeCast for int256;
 
 function toBalanceDelta(int128 _amount0, int128 _amount1) pure returns (BalanceDelta balanceDelta) {
-    assembly ("memory-safe") {
+    assembly {
         balanceDelta := or(shl(128, _amount0), and(sub(shl(128, 1), 1), _amount1))
     }
 }
@@ -20,7 +20,7 @@ function toBalanceDelta(int128 _amount0, int128 _amount1) pure returns (BalanceD
 function add(BalanceDelta a, BalanceDelta b) pure returns (BalanceDelta) {
     int256 res0;
     int256 res1;
-    assembly ("memory-safe") {
+    assembly {
         let a0 := sar(128, a)
         let a1 := signextend(15, a)
         let b0 := sar(128, b)
@@ -34,7 +34,7 @@ function add(BalanceDelta a, BalanceDelta b) pure returns (BalanceDelta) {
 function sub(BalanceDelta a, BalanceDelta b) pure returns (BalanceDelta) {
     int256 res0;
     int256 res1;
-    assembly ("memory-safe") {
+    assembly {
         let a0 := sar(128, a)
         let a1 := signextend(15, a)
         let b0 := sar(128, b)
@@ -57,13 +57,13 @@ library BalanceDeltaLibrary {
     BalanceDelta public constant ZERO_DELTA = BalanceDelta.wrap(0);
 
     function amount0(BalanceDelta balanceDelta) internal pure returns (int128 _amount0) {
-        assembly ("memory-safe") {
+        assembly {
             _amount0 := sar(128, balanceDelta)
         }
     }
 
     function amount1(BalanceDelta balanceDelta) internal pure returns (int128 _amount1) {
-        assembly ("memory-safe") {
+        assembly {
             _amount1 := signextend(15, balanceDelta)
         }
     }
