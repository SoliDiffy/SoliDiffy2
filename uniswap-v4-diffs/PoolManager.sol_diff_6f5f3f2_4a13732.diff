diff --git a/src/PoolManager.sol b/src/PoolManager.sol
index 21b2fab1..d18015b5 100644
--- a/src/PoolManager.sol
+++ b/src/PoolManager.sol
@@ -19,8 +19,7 @@ import {Fees} from "./Fees.sol";
 import {ERC6909Claims} from "./ERC6909Claims.sol";
 import {PoolId, PoolIdLibrary} from "./types/PoolId.sol";
 import {BalanceDelta, BalanceDeltaLibrary} from "./types/BalanceDelta.sol";
-import {Locker} from "./libraries/Locker.sol";
-import {NonZeroDeltaCount} from "./libraries/NonZeroDeltaCount.sol";
+import {Lockers} from "./libraries/Lockers.sol";
 import {PoolGetters} from "./libraries/PoolGetters.sol";
 
 /// @notice Holds the state for all pools
@@ -89,21 +88,27 @@ contract PoolManager is IPoolManager, Fees, NoDelegateCall, ERC6909Claims {
     }
 
     /// @inheritdoc IPoolManager
-    function getLocker() external view override returns (address locker) {
-        return Locker.getLocker();
+    function getLock(uint256 i) external view override returns (address locker, address lockCaller) {
+        return (Lockers.getLocker(i), Lockers.getLockCaller(i));
     }
 
     /// @notice This will revert if a function is called by any address other than the current locker OR the most recently called, pre-permissioned hook.
-    modifier isLocked() {
-        if (!Locker.isLocked()) revert ManagerNotLocked();
+    modifier onlyByLocker() {
+        _checkLocker(msg.sender, Lockers.getCurrentLocker(), Lockers.getCurrentHook());
         _;
     }
 
+    function _checkLocker(address caller, address locker, IHooks hook) internal pure {
+        if (caller == locker) return;
+        if (caller == address(hook) && hook.hasPermission(Hooks.ACCESS_LOCK_FLAG)) return;
+        revert LockedBy(locker, address(hook));
+    }
+
     /// @inheritdoc IPoolManager
     function initialize(PoolKey memory key, uint160 sqrtPriceX96, bytes calldata hookData)
         external
         override
-        isLocked
+        onlyByLocker
         returns (int24 tick)
     {
         if (key.fee.isStaticFeeTooLarge()) revert FeeTooLarge();
@@ -130,33 +135,35 @@ contract PoolManager is IPoolManager, Fees, NoDelegateCall, ERC6909Claims {
 
     /// @inheritdoc IPoolManager
     function lock(address lockTarget, bytes calldata data) external payable override returns (bytes memory result) {
-        // Get the lock caller because thats an EOA and is not user-controlable
-        if (Locker.isLocked()) revert AlreadyLocked();
-
-        Locker.setLocker(lockTarget);
+        Lockers.push(lockTarget, msg.sender);
 
         // the caller does everything in this callback, including paying what they owe via calls to settle
         result = ILockCallback(lockTarget).lockAcquired(msg.sender, data);
 
-        if (NonZeroDeltaCount.read() != 0) revert CurrencyNotSettled();
-        Locker.clearLocker();
+        if (Lockers.length() == 1) {
+            if (Lockers.nonzeroDeltaCount() != 0) revert CurrencyNotSettled();
+            Lockers.clear();
+        } else {
+            Lockers.pop();
+        }
     }
 
     function _accountDelta(Currency currency, int128 delta) internal {
         if (delta == 0) return;
 
-        int256 current = currencyDelta[msg.sender][currency];
+        address locker = Lockers.getCurrentLocker();
+        int256 current = currencyDelta[locker][currency];
         int256 next = current + delta;
 
         unchecked {
             if (next == 0) {
-                NonZeroDeltaCount.decrement();
+                Lockers.decrementNonzeroDeltaCount();
             } else if (current == 0) {
-                NonZeroDeltaCount.increment();
+                Lockers.incrementNonzeroDeltaCount();
             }
         }
 
-        currencyDelta[msg.sender][currency] = next;
+        currencyDelta[locker][currency] = next;
     }
 
     /// @dev Accumulates a balance change to a map of currency to balance changes
@@ -174,7 +181,7 @@ contract PoolManager is IPoolManager, Fees, NoDelegateCall, ERC6909Claims {
         PoolKey memory key,
         IPoolManager.ModifyLiquidityParams memory params,
         bytes calldata hookData
-    ) external override noDelegateCall isLocked returns (BalanceDelta delta) {
+    ) external override noDelegateCall onlyByLocker returns (BalanceDelta delta) {
         PoolId id = key.toId();
         _checkPoolInitialized(id);
 
@@ -204,7 +211,7 @@ contract PoolManager is IPoolManager, Fees, NoDelegateCall, ERC6909Claims {
         external
         override
         noDelegateCall
-        isLocked
+        onlyByLocker
         returns (BalanceDelta delta)
     {
         PoolId id = key.toId();
@@ -247,7 +254,7 @@ contract PoolManager is IPoolManager, Fees, NoDelegateCall, ERC6909Claims {
         external
         override
         noDelegateCall
-        isLocked
+        onlyByLocker
         returns (BalanceDelta delta)
     {
         PoolId id = key.toId();
@@ -265,14 +272,14 @@ contract PoolManager is IPoolManager, Fees, NoDelegateCall, ERC6909Claims {
     }
 
     /// @inheritdoc IPoolManager
-    function take(Currency currency, address to, uint256 amount) external override noDelegateCall isLocked {
+    function take(Currency currency, address to, uint256 amount) external override noDelegateCall onlyByLocker {
         _accountDelta(currency, amount.toInt128());
         reservesOf[currency] -= amount;
         currency.transfer(to, amount);
     }
 
     /// @inheritdoc IPoolManager
-    function settle(Currency currency) external payable override noDelegateCall isLocked returns (uint256 paid) {
+    function settle(Currency currency) external payable override noDelegateCall onlyByLocker returns (uint256 paid) {
         uint256 reservesBefore = reservesOf[currency];
         reservesOf[currency] = currency.balanceOfSelf();
         paid = reservesOf[currency] - reservesBefore;
@@ -281,13 +288,13 @@ contract PoolManager is IPoolManager, Fees, NoDelegateCall, ERC6909Claims {
     }
 
     /// @inheritdoc IPoolManager
-    function mint(address to, uint256 id, uint256 amount) external override noDelegateCall isLocked {
+    function mint(address to, uint256 id, uint256 amount) external override noDelegateCall onlyByLocker {
         _accountDelta(CurrencyLibrary.fromId(id), amount.toInt128());
         _mint(to, id, amount);
     }
 
     /// @inheritdoc IPoolManager
-    function burn(address from, uint256 id, uint256 amount) external override noDelegateCall isLocked {
+    function burn(address from, uint256 id, uint256 amount) external override noDelegateCall onlyByLocker {
         _accountDelta(CurrencyLibrary.fromId(id), -(amount.toInt128()));
         _burnFrom(from, id, amount);
     }
@@ -331,8 +338,16 @@ contract PoolManager is IPoolManager, Fees, NoDelegateCall, ERC6909Claims {
         return value;
     }
 
+    function getLockLength() external view returns (uint256 _length) {
+        return Lockers.length();
+    }
+
     function getLockNonzeroDeltaCount() external view returns (uint256 _nonzeroDeltaCount) {
-        return NonZeroDeltaCount.read();
+        return Lockers.nonzeroDeltaCount();
+    }
+
+    function getCurrentHook() external view returns (IHooks) {
+        return Lockers.getCurrentHook();
     }
 
     function getPoolTickInfo(PoolId id, int24 tick) external view returns (Pool.TickInfo memory) {
