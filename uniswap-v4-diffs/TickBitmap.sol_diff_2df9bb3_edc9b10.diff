diff --git a/src/libraries/TickBitmap.sol b/src/libraries/TickBitmap.sol
index d98cdfff..6cdde14b 100644
--- a/src/libraries/TickBitmap.sol
+++ b/src/libraries/TickBitmap.sol
@@ -43,32 +43,11 @@ library TickBitmap {
     /// @param tick The tick to flip
     /// @param tickSpacing The spacing between usable ticks
     function flipTick(mapping(int16 => uint256) storage self, int24 tick, int24 tickSpacing) internal {
-        /**
-         * Equivalent to the following Solidity:
-         *     if (tick % tickSpacing != 0) revert TickMisaligned(tick, tickSpacing);
-         *     (int16 wordPos, uint8 bitPos) = position(tick / tickSpacing);
-         *     uint256 mask = 1 << bitPos;
-         *     self[wordPos] ^= mask;
-         */
-        /// @solidity memory-safe-assembly
-        assembly {
-            // ensure that the tick is spaced
-            if smod(tick, tickSpacing) {
-                mstore(0, 0xd4d8f3e6) // selector for TickMisaligned(int24,int24)
-                mstore(0x20, tick)
-                mstore(0x40, tickSpacing)
-                revert(0x1c, 0x44)
-            }
-            tick := sdiv(tick, tickSpacing)
-            // calculate the storage slot corresponding to the tick
-            // wordPos = tick >> 8
-            mstore(0, sar(8, tick))
-            mstore(0x20, self.slot)
-            // the slot of self[wordPos] is keccak256(abi.encode(wordPos, self.slot))
-            let slot := keccak256(0, 0x40)
-            // mask = 1 << bitPos = 1 << (tick % 256)
-            // self[wordPos] ^= mask
-            sstore(slot, xor(sload(slot), shl(and(tick, 0xff), 1)))
+        unchecked {
+            if (tick % tickSpacing != 0) revert TickMisaligned(tick, tickSpacing); // ensure that the tick is spaced
+            (int16 wordPos, uint8 bitPos) = position(tick / tickSpacing);
+            uint256 mask = 1 << bitPos;
+            self[wordPos] ^= mask;
         }
     }
 
