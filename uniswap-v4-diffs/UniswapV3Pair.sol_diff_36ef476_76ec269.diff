diff --git a/contracts/UniswapV3Pair.sol b/contracts/UniswapV3Pair.sol
index 40dba252..4655803d 100644
--- a/contracts/UniswapV3Pair.sol
+++ b/contracts/UniswapV3Pair.sol
@@ -65,7 +65,7 @@ contract UniswapV3Pair is IUniswapV3Pair {
     // meant to be accessed via getPriceCumulative
     //    FixedPoint128.uq128x128 private price0CumulativeLast; // cumulative (token1 / token0) oracle price
     //    FixedPoint128.uq128x128 private price1CumulativeLast; // cumulative (token0 / token1) oracle price
-    uint64 public override blockTimestampLast;
+    uint32 public override blockTimestampLast;
 
     // the fee as of the end of the last block with a swap or setPosition/initialize
     // this is stored to protect liquidity providers from add/swap/remove sandwiching attacks
@@ -94,7 +94,7 @@ contract UniswapV3Pair is IUniswapV3Pair {
         FixedPoint128.uq128x128 feeGrowthOutside1;
         // seconds spent on the _other_ side of this tick (relative to the current tick)
         // only has relative meaning, not absolute â€” the value depends on when the tick is initialized
-        uint64 secondsOutside;
+        uint32 secondsOutside;
         // amount of liquidity added (subtracted) when tick is crossed from left to right (right to left),
         // i.e. as the price goes up (down), for each fee vote
         int128[NUM_FEE_OPTIONS] liquidityDelta;
@@ -238,11 +238,11 @@ contract UniswapV3Pair is IUniswapV3Pair {
     //        returns (FixedPoint128.uq128x128 memory price0Cumulative, FixedPoint128.uq128x128 memory price1Cumulative)
     //    {
     //        require(isInitialized(), 'UniswapV3Pair::getCumulativePrices: pair not initialized');
-    //        uint64 blockTimestamp = _blockTimestamp();
+    //        uint32 blockTimestamp = _blockTimestamp();
     //
     //        if (blockTimestampLast != blockTimestamp) {
     //            // overflow desired in both of the following lines
-    //            uint64 timeElapsed = blockTimestamp - blockTimestampLast;
+    //            uint32 timeElapsed = blockTimestamp - blockTimestampLast;
     //            return (
     //                FixedPoint128.uq128x128(price0CumulativeLast._x + priceCurrent.mul(timeElapsed)._x),
     //                FixedPoint128.uq128x128(price1CumulativeLast._x + priceCurrent.reciprocal().mul(timeElapsed)._x)
@@ -262,15 +262,16 @@ contract UniswapV3Pair is IUniswapV3Pair {
         token1 = _token1;
     }
 
-    // returns the block timestamp % 2**64
+    // returns the block timestamp % 2**32
+    // the timestamp is truncated to 32 bits because the pair only ever uses it for relative timestamp computations
     // overridden for tests
-    function _blockTimestamp() internal view virtual returns (uint64) {
-        return uint64(block.timestamp); // truncation is desired
+    function _blockTimestamp() internal view virtual returns (uint32) {
+        return uint32(block.timestamp); // truncation is desired
     }
 
     // on the first interaction per block, update the oracle price accumulator and fee
     function _update() private {
-        uint64 blockTimestamp = _blockTimestamp();
+        uint32 blockTimestamp = _blockTimestamp();
 
         if (blockTimestampLast != blockTimestamp) {
             //            (price0CumulativeLast, price1CumulativeLast) = getCumulativePrices();
