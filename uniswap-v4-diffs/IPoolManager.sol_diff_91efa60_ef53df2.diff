diff --git a/contracts/interfaces/IPoolManager.sol b/contracts/interfaces/IPoolManager.sol
index 2131071e..01d3cbc7 100644
--- a/contracts/interfaces/IPoolManager.sol
+++ b/contracts/interfaces/IPoolManager.sol
@@ -14,7 +14,7 @@ interface IPoolManager is IERC1155 {
     error ProtocolFeeCannotBeFetched();
 
     /// @notice Thrown when a currency is not netted out after a lock
-    error CurrencyNotSettled();
+    error CurrencyNotSettled(address locker);
 
     /// @notice Thrown when a function is called by an address that is not the current locker
     /// @param locker The current locker
@@ -128,21 +128,14 @@ interface IPoolManager is IERC1155 {
     /// @notice Initialize the state for a given pool ID
     function initialize(PoolKey memory key, uint160 sqrtPriceX96) external returns (int24 tick);
 
-    /// @notice Represents the stack of addresses that have locked the pool. Each call to #lock pushes the address onto the stack
-    /// @param index The index of the locker, also known as the id of the locker
-    function lockedBy(uint256 index) external view returns (address);
-
-    /// @notice Getter for the length of the lockedBy array
-    function lockedByLength() external view returns (uint256);
-
     /// @notice Returns the count of nonzero deltas for the given locker ID
-    /// @param id The ID of the locker
-    function getNonzeroDeltaCount(uint256 id) external view returns (uint256);
+    /// @param locker The address of the locker
+    function getNonzeroDeltaCount(address locker) external view returns (uint256);
 
     /// @notice Get the current delta for a given currency, and its position in the currencies touched array
-    /// @param id The ID of the locker
+    /// @param locker The address of the locker
     /// @param currency The currency for which to lookup the delta
-    function getCurrencyDelta(uint256 id, Currency currency) external view returns (int256);
+    function getCurrencyDelta(address locker, Currency currency) external view returns (int256);
 
     /// @notice All operations go through this function
     /// @param data Any data to pass to the callback, via `ILockCallback(msg.sender).lockCallback(data)`
