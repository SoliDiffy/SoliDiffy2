diff --git a/contracts/UniswapV3Pair.sol b/contracts/UniswapV3Pair.sol
index 8c3b5e53..701685a4 100644
--- a/contracts/UniswapV3Pair.sol
+++ b/contracts/UniswapV3Pair.sol
@@ -172,8 +172,7 @@ contract UniswapV3Pair is IUniswapV3Pair, NoDelegateCall {
         uint16 observationCardinalityNextNew =
             observations.grow(observationCardinalityNextOld, observationCardinalityNext);
         slot0.observationCardinalityNext = observationCardinalityNextNew;
-        if (observationCardinalityNextOld != observationCardinalityNextNew)
-            emit IncreaseObservationCardinalityNext(observationCardinalityNextOld, observationCardinalityNextNew);
+        emit ObservationCardinalityNextIncreased(observationCardinalityNextOld, observationCardinalityNextNew);
     }
 
     // not locked because it initializes unlocked
@@ -196,7 +195,7 @@ contract UniswapV3Pair is IUniswapV3Pair, NoDelegateCall {
             unlocked: true
         });
 
-        emit Initialize(sqrtPriceX96, tick);
+        emit Initialized(sqrtPriceX96, tick);
     }
 
     struct ModifyPositionParams {
@@ -350,7 +349,6 @@ contract UniswapV3Pair is IUniswapV3Pair, NoDelegateCall {
         _modifyPosition(
             ModifyPositionParams({owner: owner, tickLower: tickLower, tickUpper: tickUpper, liquidityDelta: 0})
         );
-        emit Poke(msg.sender, owner, tickLower, tickUpper);
     }
 
     // noDelegateCall is applied indirectly via _modifyPosition
@@ -385,7 +383,7 @@ contract UniswapV3Pair is IUniswapV3Pair, NoDelegateCall {
         if (amount0 > 0) require(balance0Before.add(amount0) <= balance0(), 'M0');
         if (amount1 > 0) require(balance1Before.add(amount1) <= balance1(), 'M1');
 
-        emit Mint(msg.sender, recipient, tickLower, tickUpper, amount, amount0, amount1);
+        emit Mint(recipient, tickLower, tickUpper, msg.sender, amount, amount0, amount1);
     }
 
     function collect(
@@ -410,7 +408,8 @@ contract UniswapV3Pair is IUniswapV3Pair, NoDelegateCall {
             TransferHelper.safeTransfer(token1, recipient, amount1);
         }
 
-        emit Collect(msg.sender, recipient, tickLower, tickUpper, amount0, amount1);
+        // note that spurious `Collect` events can be emitted with zero amounts - just ignore them
+        emit Collect(msg.sender, tickLower, tickUpper, recipient, amount0, amount1);
     }
 
     // noDelegateCall is applied indirectly via _modifyPosition
@@ -437,7 +436,7 @@ contract UniswapV3Pair is IUniswapV3Pair, NoDelegateCall {
         if (amount0 > 0) TransferHelper.safeTransfer(token0, recipient, amount0);
         if (amount1 > 0) TransferHelper.safeTransfer(token1, recipient, amount1);
 
-        emit Burn(msg.sender, recipient, tickLower, tickUpper, amount, amount0, amount1);
+        emit Burn(msg.sender, tickLower, tickUpper, recipient, amount, amount0, amount1);
     }
 
     struct SwapCache {
@@ -663,7 +662,7 @@ contract UniswapV3Pair is IUniswapV3Pair, NoDelegateCall {
 
     function setFeeProtocol(uint8 feeProtocol) external override onlyFactoryOwner {
         require(feeProtocol == 0 || (feeProtocol <= 10 && feeProtocol >= 4));
-        emit SetFeeProtocol(slot0.feeProtocol, feeProtocol);
+        emit FeeProtocolChanged(slot0.feeProtocol, feeProtocol);
         slot0.feeProtocol = feeProtocol;
     }
 
@@ -686,6 +685,6 @@ contract UniswapV3Pair is IUniswapV3Pair, NoDelegateCall {
             TransferHelper.safeTransfer(token1, recipient, amount1);
         }
 
-        emit CollectProtocol(msg.sender, recipient, amount0, amount1);
+        emit CollectProtocol(recipient, amount0, amount1);
     }
 }
