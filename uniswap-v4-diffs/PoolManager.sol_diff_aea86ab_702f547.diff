diff --git a/src/PoolManager.sol b/src/PoolManager.sol
index a94d44c5..61beeac4 100644
--- a/src/PoolManager.sol
+++ b/src/PoolManager.sol
@@ -5,16 +5,17 @@ import {Hooks} from "./libraries/Hooks.sol";
 import {Pool} from "./libraries/Pool.sol";
 import {SafeCast} from "./libraries/SafeCast.sol";
 import {Position} from "./libraries/Position.sol";
-import {SwapFeeLibrary} from "./libraries/SwapFeeLibrary.sol";
+import {FeeLibrary} from "./libraries/FeeLibrary.sol";
 import {Currency, CurrencyLibrary} from "./types/Currency.sol";
 import {PoolKey} from "./types/PoolKey.sol";
 import {TickMath} from "./libraries/TickMath.sol";
 import {NoDelegateCall} from "./NoDelegateCall.sol";
 import {Owned} from "./Owned.sol";
 import {IHooks} from "./interfaces/IHooks.sol";
+import {IDynamicFeeManager} from "./interfaces/IDynamicFeeManager.sol";
 import {IPoolManager} from "./interfaces/IPoolManager.sol";
 import {ILockCallback} from "./interfaces/callback/ILockCallback.sol";
-import {ProtocolFees} from "./ProtocolFees.sol";
+import {Fees} from "./Fees.sol";
 import {ERC6909Claims} from "./ERC6909Claims.sol";
 import {PoolId, PoolIdLibrary} from "./types/PoolId.sol";
 import {BalanceDelta, BalanceDeltaLibrary} from "./types/BalanceDelta.sol";
@@ -23,14 +24,14 @@ import {NonZeroDeltaCount} from "./libraries/NonZeroDeltaCount.sol";
 import {PoolGetters} from "./libraries/PoolGetters.sol";
 
 /// @notice Holds the state for all pools
-contract PoolManager is IPoolManager, ProtocolFees, NoDelegateCall, ERC6909Claims {
+contract PoolManager is IPoolManager, Fees, NoDelegateCall, ERC6909Claims {
     using PoolIdLibrary for PoolKey;
     using SafeCast for *;
     using Pool for *;
     using Hooks for IHooks;
     using Position for mapping(bytes32 => Position.Info);
     using CurrencyLibrary for Currency;
-    using SwapFeeLibrary for uint24;
+    using FeeLibrary for uint24;
     using PoolGetters for Pool.State;
 
     /// @inheritdoc IPoolManager
@@ -49,18 +50,18 @@ contract PoolManager is IPoolManager, ProtocolFees, NoDelegateCall, ERC6909Claim
 
     mapping(PoolId id => Pool.State) public pools;
 
-    constructor(uint256 controllerGasLimit) ProtocolFees(controllerGasLimit) {}
+    constructor(uint256 controllerGasLimit) Fees(controllerGasLimit) {}
 
     /// @inheritdoc IPoolManager
     function getSlot0(PoolId id)
         external
         view
         override
-        returns (uint160 sqrtPriceX96, int24 tick, uint16 protocolFee, uint24 swapFee)
+        returns (uint160 sqrtPriceX96, int24 tick, uint16 protocolFee)
     {
         Pool.Slot0 memory slot0 = pools[id].slot0;
 
-        return (slot0.sqrtPriceX96, slot0.tick, slot0.protocolFee, slot0.swapFee);
+        return (slot0.sqrtPriceX96, slot0.tick, slot0.protocolFee);
     }
 
     /// @inheritdoc IPoolManager
@@ -103,18 +104,19 @@ contract PoolManager is IPoolManager, ProtocolFees, NoDelegateCall, ERC6909Claim
         override
         returns (int24 tick)
     {
+        if (key.fee.isStaticFeeTooLarge()) revert FeeTooLarge();
+
         // see TickBitmap.sol for overflow conditions that can arise from tick spacing being too large
         if (key.tickSpacing > MAX_TICK_SPACING) revert TickSpacingTooLarge();
         if (key.tickSpacing < MIN_TICK_SPACING) revert TickSpacingTooSmall();
         if (key.currency0 >= key.currency1) revert CurrenciesOutOfOrderOrEqual();
         if (!key.hooks.isValidHookAddress(key.fee)) revert Hooks.HookAddressNotValid(address(key.hooks));
 
-        uint24 swapFee = key.fee.getSwapFee();
-
         key.hooks.beforeInitialize(key, sqrtPriceX96, hookData);
 
         PoolId id = key.toId();
         (, uint16 protocolFee) = _fetchProtocolFee(key);
+        uint24 swapFee = key.fee.isDynamicFee() ? _fetchDynamicSwapFee(key) : key.fee.getStaticFee();
 
         tick = pools[id].initialize(sqrtPriceX96, protocolFee, swapFee);
 
@@ -289,11 +291,15 @@ contract PoolManager is IPoolManager, ProtocolFees, NoDelegateCall, ERC6909Claim
         emit ProtocolFeeUpdated(id, newProtocolFee);
     }
 
-    function updateDynamicSwapFee(PoolKey memory key, uint24 newDynamicSwapFee) external {
-        if (!key.fee.isDynamicFee() || msg.sender != address(key.hooks)) revert UnauthorizedDynamicSwapFeeUpdate();
-        newDynamicSwapFee.validate();
-        PoolId id = key.toId();
-        pools[id].setSwapFee(newDynamicSwapFee);
+    function updateDynamicSwapFee(PoolKey memory key) external {
+        if (key.fee.isDynamicFee()) {
+            uint24 newDynamicSwapFee = _fetchDynamicSwapFee(key);
+            PoolId id = key.toId();
+            pools[id].setSwapFee(newDynamicSwapFee);
+            emit DynamicSwapFeeUpdated(id, newDynamicSwapFee);
+        } else {
+            revert FeeNotDynamic();
+        }
     }
 
     function extsload(bytes32 slot) external view returns (bytes32 value) {
