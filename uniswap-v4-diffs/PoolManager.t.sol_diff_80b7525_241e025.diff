diff --git a/test/PoolManager.t.sol b/test/PoolManager.t.sol
index 8376fab5..7d8fcce8 100644
--- a/test/PoolManager.t.sol
+++ b/test/PoolManager.t.sol
@@ -8,9 +8,6 @@ import {IPoolManager} from "../src/interfaces/IPoolManager.sol";
 import {IProtocolFees} from "../src/interfaces/IProtocolFees.sol";
 import {IProtocolFeeController} from "../src/interfaces/IProtocolFeeController.sol";
 import {PoolManager} from "../src/PoolManager.sol";
-import {FeeTakingHook} from "../src/test/FeeTakingHook.sol";
-import {CustomCurveHook} from "../src/test/CustomCurveHook.sol";
-import {DeltaReturningHook} from "../src/test/DeltaReturningHook.sol";
 import {TickMath} from "../src/libraries/TickMath.sol";
 import {Pool} from "../src/libraries/Pool.sol";
 import {Deployers} from "./utils/Deployers.sol";
@@ -41,8 +38,6 @@ contract PoolManagerTest is Test, Deployers, GasSnapshot {
     using PoolIdLibrary for PoolKey;
     using LPFeeLibrary for uint24;
     using CurrencyLibrary for Currency;
-    using SafeCast for uint256;
-    using SafeCast for uint128;
     using ProtocolFeeLibrary for uint24;
 
     event UnlockCallback();
@@ -100,22 +95,22 @@ contract PoolManagerTest is Test, Deployers, GasSnapshot {
 
     function test_addLiquidity_failsIfNotInitialized() public {
         vm.expectRevert(Pool.PoolNotInitialized.selector);
-        modifyLiquidityRouter.modifyLiquidity(uninitializedKey, LIQUIDITY_PARAMS, ZERO_BYTES);
+        modifyLiquidityRouter.modifyLiquidity(uninitializedKey, LIQ_PARAMS, ZERO_BYTES);
     }
 
     function test_addLiquidity_failsIfLocked() public {
         vm.expectRevert(IPoolManager.ManagerLocked.selector);
-        manager.modifyLiquidity(uninitializedKey, LIQUIDITY_PARAMS, ZERO_BYTES);
+        manager.modifyLiquidity(uninitializedKey, LIQ_PARAMS, ZERO_BYTES);
     }
 
     function test_removeLiquidity_failsIfNotInitialized() public {
         vm.expectRevert(Pool.PoolNotInitialized.selector);
-        modifyLiquidityRouter.modifyLiquidity(uninitializedKey, REMOVE_LIQUIDITY_PARAMS, ZERO_BYTES);
+        modifyLiquidityRouter.modifyLiquidity(uninitializedKey, REMOVE_LIQ_PARAMS, ZERO_BYTES);
     }
 
     function test_removeLiquidity_failsIfLocked() public {
         vm.expectRevert(IPoolManager.ManagerLocked.selector);
-        manager.modifyLiquidity(key, REMOVE_LIQUIDITY_PARAMS, ZERO_BYTES);
+        manager.modifyLiquidity(key, REMOVE_LIQ_PARAMS, ZERO_BYTES);
     }
 
     function test_addLiquidity_succeedsIfInitialized(uint160 sqrtPriceX96) public {
@@ -125,12 +120,12 @@ contract PoolManagerTest is Test, Deployers, GasSnapshot {
         emit ModifyLiquidity(
             key.toId(),
             address(modifyLiquidityRouter),
-            LIQUIDITY_PARAMS.tickLower,
-            LIQUIDITY_PARAMS.tickUpper,
-            LIQUIDITY_PARAMS.liquidityDelta
+            LIQ_PARAMS.tickLower,
+            LIQ_PARAMS.tickUpper,
+            LIQ_PARAMS.liquidityDelta
         );
 
-        modifyLiquidityRouter.modifyLiquidity(key, LIQUIDITY_PARAMS, ZERO_BYTES);
+        modifyLiquidityRouter.modifyLiquidity(key, LIQ_PARAMS, ZERO_BYTES);
     }
 
     function test_removeLiquidity_succeedsIfInitialized(uint160 sqrtPriceX96) public {
@@ -140,76 +135,12 @@ contract PoolManagerTest is Test, Deployers, GasSnapshot {
         emit ModifyLiquidity(
             key.toId(),
             address(modifyLiquidityRouter),
-            REMOVE_LIQUIDITY_PARAMS.tickLower,
-            REMOVE_LIQUIDITY_PARAMS.tickUpper,
-            REMOVE_LIQUIDITY_PARAMS.liquidityDelta
+            REMOVE_LIQ_PARAMS.tickLower,
+            REMOVE_LIQ_PARAMS.tickUpper,
+            REMOVE_LIQ_PARAMS.liquidityDelta
         );
 
-        modifyLiquidityRouter.modifyLiquidity(key, REMOVE_LIQUIDITY_PARAMS, ZERO_BYTES);
-    }
-
-    function test_addLiquidity_withFeeTakingHook() public {
-        address hookAddr =
-            address(uint160(Hooks.AFTER_ADD_LIQUIDITY_FLAG | Hooks.AFTER_ADD_LIQUIDITY_RETURNS_DELTA_FLAG));
-        FeeTakingHook impl = new FeeTakingHook(manager);
-        vm.etch(hookAddr, address(impl).code);
-
-        (key,) = initPool(currency0, currency1, IHooks(hookAddr), 100, SQRT_RATIO_1_1, ZERO_BYTES);
-
-        uint256 balanceBefore0 = currency0.balanceOf(address(this));
-        uint256 balanceBefore1 = currency1.balanceOf(address(this));
-        uint256 hookBalanceBefore0 = currency0.balanceOf(hookAddr);
-        uint256 hookBalanceBefore1 = currency1.balanceOf(hookAddr);
-        uint256 managerBalanceBefore0 = currency0.balanceOf(address(manager));
-        uint256 managerBalanceBefore1 = currency1.balanceOf(address(manager));
-
-        modifyLiquidityRouter.modifyLiquidity(key, LIQUIDITY_PARAMS, ZERO_BYTES);
-        snapLastCall("addLiquidity CA fee");
-
-        uint256 hookGain0 = currency0.balanceOf(hookAddr) - hookBalanceBefore0;
-        uint256 hookGain1 = currency1.balanceOf(hookAddr) - hookBalanceBefore1;
-        uint256 thisLoss0 = balanceBefore0 - currency0.balanceOf(address(this));
-        uint256 thisLoss1 = balanceBefore1 - currency1.balanceOf(address(this));
-        uint256 managerGain0 = currency0.balanceOf(address(manager)) - managerBalanceBefore0;
-        uint256 managerGain1 = currency1.balanceOf(address(manager)) - managerBalanceBefore1;
-
-        // Assert that the hook got 5.43% of the added liquidity
-        assertEq(hookGain0, managerGain0 * 543 / 10000, "hook amount 0");
-        assertEq(hookGain1, managerGain1 * 543 / 10000, "hook amount 1");
-        assertEq(thisLoss0 - hookGain0, managerGain0, "manager amount 0");
-        assertEq(thisLoss1 - hookGain1, managerGain1, "manager amount 1");
-    }
-
-    function test_removeLiquidity_withFeeTakingHook() public {
-        address hookAddr =
-            address(uint160(Hooks.AFTER_REMOVE_LIQUIDITY_FLAG | Hooks.AFTER_REMOVE_LIQUIDITY_RETURNS_DELTA_FLAG));
-        FeeTakingHook impl = new FeeTakingHook(manager);
-        vm.etch(hookAddr, address(impl).code);
-
-        (key,) = initPoolAndAddLiquidity(currency0, currency1, IHooks(hookAddr), 100, SQRT_RATIO_1_1, ZERO_BYTES);
-
-        uint256 balanceBefore0 = currency0.balanceOf(address(this));
-        uint256 balanceBefore1 = currency1.balanceOf(address(this));
-        uint256 hookBalanceBefore0 = currency0.balanceOf(hookAddr);
-        uint256 hookBalanceBefore1 = currency1.balanceOf(hookAddr);
-        uint256 managerBalanceBefore0 = currency0.balanceOf(address(manager));
-        uint256 managerBalanceBefore1 = currency1.balanceOf(address(manager));
-
-        modifyLiquidityRouter.modifyLiquidity(key, REMOVE_LIQUIDITY_PARAMS, ZERO_BYTES);
-        snapLastCall("removeLiquidity CA fee");
-
-        uint256 hookGain0 = currency0.balanceOf(hookAddr) - hookBalanceBefore0;
-        uint256 hookGain1 = currency1.balanceOf(hookAddr) - hookBalanceBefore1;
-        uint256 thisGain0 = currency0.balanceOf(address(this)) - balanceBefore0;
-        uint256 thisGain1 = currency1.balanceOf(address(this)) - balanceBefore1;
-        uint256 managerLoss0 = managerBalanceBefore0 - currency0.balanceOf(address(manager));
-        uint256 managerLoss1 = managerBalanceBefore1 - currency1.balanceOf(address(manager));
-
-        // Assert that the hook got 5.43% of the withdrawn liquidity
-        assertEq(hookGain0, managerLoss0 * 543 / 10000, "hook amount 0");
-        assertEq(hookGain1, managerLoss1 * 543 / 10000, "hook amount 1");
-        assertEq(thisGain0 + hookGain0, managerLoss0, "manager amount 0");
-        assertEq(thisGain1 + hookGain1, managerLoss1, "manager amount 1");
+        modifyLiquidityRouter.modifyLiquidity(key, REMOVE_LIQ_PARAMS, ZERO_BYTES);
     }
 
     function test_addLiquidity_succeedsForNativeTokensIfInitialized(uint160 sqrtPriceX96) public {
@@ -219,12 +150,12 @@ contract PoolManagerTest is Test, Deployers, GasSnapshot {
         emit ModifyLiquidity(
             nativeKey.toId(),
             address(modifyLiquidityRouter),
-            LIQUIDITY_PARAMS.tickLower,
-            LIQUIDITY_PARAMS.tickUpper,
-            LIQUIDITY_PARAMS.liquidityDelta
+            LIQ_PARAMS.tickLower,
+            LIQ_PARAMS.tickUpper,
+            LIQ_PARAMS.liquidityDelta
         );
 
-        modifyLiquidityRouter.modifyLiquidity{value: 1 ether}(nativeKey, LIQUIDITY_PARAMS, ZERO_BYTES);
+        modifyLiquidityRouter.modifyLiquidity{value: 1 ether}(nativeKey, LIQ_PARAMS, ZERO_BYTES);
     }
 
     function test_removeLiquidity_succeedsForNativeTokensIfInitialized(uint160 sqrtPriceX96) public {
@@ -234,12 +165,12 @@ contract PoolManagerTest is Test, Deployers, GasSnapshot {
         emit ModifyLiquidity(
             nativeKey.toId(),
             address(modifyLiquidityRouter),
-            REMOVE_LIQUIDITY_PARAMS.tickLower,
-            REMOVE_LIQUIDITY_PARAMS.tickUpper,
-            REMOVE_LIQUIDITY_PARAMS.liquidityDelta
+            REMOVE_LIQ_PARAMS.tickLower,
+            REMOVE_LIQ_PARAMS.tickUpper,
+            REMOVE_LIQ_PARAMS.liquidityDelta
         );
 
-        modifyLiquidityRouter.modifyLiquidity{value: 1 ether}(nativeKey, REMOVE_LIQUIDITY_PARAMS, ZERO_BYTES);
+        modifyLiquidityRouter.modifyLiquidity{value: 1 ether}(nativeKey, REMOVE_LIQ_PARAMS, ZERO_BYTES);
     }
 
     function test_addLiquidity_succeedsWithHooksIfInitialized(uint160 sqrtPriceX96) public {
@@ -257,13 +188,12 @@ contract PoolManagerTest is Test, Deployers, GasSnapshot {
 
         (key,) = initPool(currency0, currency1, IHooks(mockAddr), 3000, sqrtPriceX96, ZERO_BYTES);
 
-        BalanceDelta balanceDelta = modifyLiquidityRouter.modifyLiquidity(key, LIQUIDITY_PARAMS, ZERO_BYTES);
+        BalanceDelta balanceDelta = modifyLiquidityRouter.modifyLiquidity(key, LIQ_PARAMS, ZERO_BYTES);
 
         bytes32 beforeSelector = MockHooks.beforeAddLiquidity.selector;
-        bytes memory beforeParams = abi.encode(address(modifyLiquidityRouter), key, LIQUIDITY_PARAMS, ZERO_BYTES);
+        bytes memory beforeParams = abi.encode(address(modifyLiquidityRouter), key, LIQ_PARAMS, ZERO_BYTES);
         bytes32 afterSelector = MockHooks.afterAddLiquidity.selector;
-        bytes memory afterParams =
-            abi.encode(address(modifyLiquidityRouter), key, LIQUIDITY_PARAMS, balanceDelta, ZERO_BYTES);
+        bytes memory afterParams = abi.encode(address(modifyLiquidityRouter), key, LIQ_PARAMS, balanceDelta, ZERO_BYTES);
 
         assertEq(MockContract(mockAddr).timesCalledSelector(beforeSelector), 1);
         assertTrue(MockContract(mockAddr).calledWithSelector(beforeSelector, beforeParams));
@@ -285,14 +215,14 @@ contract PoolManagerTest is Test, Deployers, GasSnapshot {
         MockContract(mockAddr).setImplementation(hookAddr);
 
         (key,) = initPool(currency0, currency1, IHooks(mockAddr), 3000, sqrtPriceX96, ZERO_BYTES);
-        modifyLiquidityRouter.modifyLiquidity(key, LIQUIDITY_PARAMS, ZERO_BYTES);
-        BalanceDelta balanceDelta = modifyLiquidityRouter.modifyLiquidity(key, REMOVE_LIQUIDITY_PARAMS, ZERO_BYTES);
+        modifyLiquidityRouter.modifyLiquidity(key, LIQ_PARAMS, ZERO_BYTES);
+        BalanceDelta balanceDelta = modifyLiquidityRouter.modifyLiquidity(key, REMOVE_LIQ_PARAMS, ZERO_BYTES);
 
         bytes32 beforeSelector = MockHooks.beforeRemoveLiquidity.selector;
-        bytes memory beforeParams = abi.encode(address(modifyLiquidityRouter), key, REMOVE_LIQUIDITY_PARAMS, ZERO_BYTES);
+        bytes memory beforeParams = abi.encode(address(modifyLiquidityRouter), key, REMOVE_LIQ_PARAMS, ZERO_BYTES);
         bytes32 afterSelector = MockHooks.afterRemoveLiquidity.selector;
         bytes memory afterParams =
-            abi.encode(address(modifyLiquidityRouter), key, REMOVE_LIQUIDITY_PARAMS, balanceDelta, ZERO_BYTES);
+            abi.encode(address(modifyLiquidityRouter), key, REMOVE_LIQ_PARAMS, balanceDelta, ZERO_BYTES);
 
         assertEq(MockContract(mockAddr).timesCalledSelector(beforeSelector), 1);
         assertTrue(MockContract(mockAddr).calledWithSelector(beforeSelector, beforeParams));
@@ -314,12 +244,12 @@ contract PoolManagerTest is Test, Deployers, GasSnapshot {
 
         // Fails at beforeAddLiquidity hook.
         vm.expectRevert(Hooks.InvalidHookResponse.selector);
-        modifyLiquidityRouter.modifyLiquidity(key, LIQUIDITY_PARAMS, ZERO_BYTES);
+        modifyLiquidityRouter.modifyLiquidity(key, LIQ_PARAMS, ZERO_BYTES);
 
         // Fail at afterAddLiquidity hook.
         mockHooks.setReturnValue(mockHooks.beforeAddLiquidity.selector, mockHooks.beforeAddLiquidity.selector);
         vm.expectRevert(Hooks.InvalidHookResponse.selector);
-        modifyLiquidityRouter.modifyLiquidity(key, LIQUIDITY_PARAMS, ZERO_BYTES);
+        modifyLiquidityRouter.modifyLiquidity(key, LIQ_PARAMS, ZERO_BYTES);
     }
 
     function test_removeLiquidity_failsWithIncorrectSelectors() public {
@@ -330,19 +260,19 @@ contract PoolManagerTest is Test, Deployers, GasSnapshot {
         MockHooks mockHooks = MockHooks(hookAddr);
 
         (key,) = initPool(currency0, currency1, mockHooks, 100, SQRT_RATIO_1_1, ZERO_BYTES);
-        modifyLiquidityRouter.modifyLiquidity(key, LIQUIDITY_PARAMS, ZERO_BYTES);
+        modifyLiquidityRouter.modifyLiquidity(key, LIQ_PARAMS, ZERO_BYTES);
 
         mockHooks.setReturnValue(mockHooks.beforeRemoveLiquidity.selector, bytes4(0xdeadbeef));
         mockHooks.setReturnValue(mockHooks.afterRemoveLiquidity.selector, bytes4(0xdeadbeef));
 
         // Fails at beforeRemoveLiquidity hook.
         vm.expectRevert(Hooks.InvalidHookResponse.selector);
-        modifyLiquidityRouter.modifyLiquidity(key, REMOVE_LIQUIDITY_PARAMS, ZERO_BYTES);
+        modifyLiquidityRouter.modifyLiquidity(key, REMOVE_LIQ_PARAMS, ZERO_BYTES);
 
         // Fail at afterRemoveLiquidity hook.
         mockHooks.setReturnValue(mockHooks.beforeRemoveLiquidity.selector, mockHooks.beforeRemoveLiquidity.selector);
         vm.expectRevert(Hooks.InvalidHookResponse.selector);
-        modifyLiquidityRouter.modifyLiquidity(key, REMOVE_LIQUIDITY_PARAMS, ZERO_BYTES);
+        modifyLiquidityRouter.modifyLiquidity(key, REMOVE_LIQ_PARAMS, ZERO_BYTES);
     }
 
     function test_addLiquidity_succeedsWithCorrectSelectors() public {
@@ -361,12 +291,12 @@ contract PoolManagerTest is Test, Deployers, GasSnapshot {
         emit ModifyLiquidity(
             key.toId(),
             address(modifyLiquidityRouter),
-            LIQUIDITY_PARAMS.tickLower,
-            LIQUIDITY_PARAMS.tickUpper,
-            LIQUIDITY_PARAMS.liquidityDelta
+            LIQ_PARAMS.tickLower,
+            LIQ_PARAMS.tickUpper,
+            LIQ_PARAMS.liquidityDelta
         );
 
-        modifyLiquidityRouter.modifyLiquidity(key, LIQUIDITY_PARAMS, ZERO_BYTES);
+        modifyLiquidityRouter.modifyLiquidity(key, LIQ_PARAMS, ZERO_BYTES);
     }
 
     function test_removeLiquidity_succeedsWithCorrectSelectors() public {
@@ -377,7 +307,7 @@ contract PoolManagerTest is Test, Deployers, GasSnapshot {
         MockHooks mockHooks = MockHooks(hookAddr);
 
         (key,) = initPool(currency0, currency1, mockHooks, 100, SQRT_RATIO_1_1, ZERO_BYTES);
-        modifyLiquidityRouter.modifyLiquidity(key, LIQUIDITY_PARAMS, ZERO_BYTES);
+        modifyLiquidityRouter.modifyLiquidity(key, LIQ_PARAMS, ZERO_BYTES);
 
         mockHooks.setReturnValue(mockHooks.beforeRemoveLiquidity.selector, mockHooks.beforeRemoveLiquidity.selector);
         mockHooks.setReturnValue(mockHooks.afterRemoveLiquidity.selector, mockHooks.afterRemoveLiquidity.selector);
@@ -386,12 +316,12 @@ contract PoolManagerTest is Test, Deployers, GasSnapshot {
         emit ModifyLiquidity(
             key.toId(),
             address(modifyLiquidityRouter),
-            REMOVE_LIQUIDITY_PARAMS.tickLower,
-            REMOVE_LIQUIDITY_PARAMS.tickUpper,
-            REMOVE_LIQUIDITY_PARAMS.liquidityDelta
+            REMOVE_LIQ_PARAMS.tickLower,
+            REMOVE_LIQ_PARAMS.tickUpper,
+            REMOVE_LIQ_PARAMS.liquidityDelta
         );
 
-        modifyLiquidityRouter.modifyLiquidity(key, REMOVE_LIQUIDITY_PARAMS, ZERO_BYTES);
+        modifyLiquidityRouter.modifyLiquidity(key, REMOVE_LIQ_PARAMS, ZERO_BYTES);
     }
 
     function test_addLiquidity_6909() public {
@@ -410,7 +340,7 @@ contract PoolManagerTest is Test, Deployers, GasSnapshot {
         manager.setOperator(address(modifyLiquidityRouter), true);
 
         // add liquidity with 6909: settleUsingBurn=true, takeClaims=true (unused)
-        modifyLiquidityRouter.modifyLiquidity(key, LIQUIDITY_PARAMS, ZERO_BYTES, true, true);
+        modifyLiquidityRouter.modifyLiquidity(key, LIQ_PARAMS, ZERO_BYTES, true, true);
 
         assertLt(manager.balanceOf(address(this), currency0.toId()), 10_000e18);
         assertLt(manager.balanceOf(address(this), currency1.toId()), 10_000e18);
@@ -425,7 +355,7 @@ contract PoolManagerTest is Test, Deployers, GasSnapshot {
     }
 
     function test_removeLiquidity_6909() public {
-        modifyLiquidityRouter.modifyLiquidity(key, LIQUIDITY_PARAMS, ZERO_BYTES);
+        modifyLiquidityRouter.modifyLiquidity(key, LIQ_PARAMS, ZERO_BYTES);
 
         assertEq(manager.balanceOf(address(this), currency0.toId()), 0);
         assertEq(manager.balanceOf(address(this), currency1.toId()), 0);
@@ -436,7 +366,7 @@ contract PoolManagerTest is Test, Deployers, GasSnapshot {
         uint256 currency1PMBalanceBefore = currency1.balanceOf(address(manager));
 
         // remove liquidity as 6909: settleUsingBurn=true (unused), takeClaims=true
-        modifyLiquidityRouter.modifyLiquidity(key, REMOVE_LIQUIDITY_PARAMS, ZERO_BYTES, true, true);
+        modifyLiquidityRouter.modifyLiquidity(key, REMOVE_LIQ_PARAMS, ZERO_BYTES, true, true);
 
         assertTrue(manager.balanceOf(address(this), currency0.toId()) > 0);
         assertTrue(manager.balanceOf(address(this), currency1.toId()) > 0);
@@ -451,22 +381,22 @@ contract PoolManagerTest is Test, Deployers, GasSnapshot {
     }
 
     function test_addLiquidity_gas() public {
-        modifyLiquidityRouter.modifyLiquidity(key, LIQUIDITY_PARAMS, ZERO_BYTES);
+        modifyLiquidityRouter.modifyLiquidity(key, LIQ_PARAMS, ZERO_BYTES);
         snapLastCall("addLiquidity");
     }
 
     function test_removeLiquidity_gas() public {
-        modifyLiquidityRouter.modifyLiquidity(key, REMOVE_LIQUIDITY_PARAMS, ZERO_BYTES);
+        modifyLiquidityRouter.modifyLiquidity(key, REMOVE_LIQ_PARAMS, ZERO_BYTES);
         snapLastCall("removeLiquidity");
     }
 
     function test_addLiquidity_withNative_gas() public {
-        modifyLiquidityRouter.modifyLiquidity{value: 1 ether}(nativeKey, LIQUIDITY_PARAMS, ZERO_BYTES);
+        modifyLiquidityRouter.modifyLiquidity{value: 1 ether}(nativeKey, LIQ_PARAMS, ZERO_BYTES);
         snapLastCall("addLiquidity with native token");
     }
 
     function test_removeLiquidity_withNative_gas() public {
-        modifyLiquidityRouter.modifyLiquidity{value: 1 ether}(nativeKey, REMOVE_LIQUIDITY_PARAMS, ZERO_BYTES);
+        modifyLiquidityRouter.modifyLiquidity{value: 1 ether}(nativeKey, REMOVE_LIQ_PARAMS, ZERO_BYTES);
         snapLastCall("removeLiquidity with native token");
     }
 
@@ -478,7 +408,7 @@ contract PoolManagerTest is Test, Deployers, GasSnapshot {
 
         (key,) = initPool(currency0, currency1, mockHooks, 3000, SQRT_RATIO_1_1, ZERO_BYTES);
 
-        modifyLiquidityRouter.modifyLiquidity(key, LIQUIDITY_PARAMS, ZERO_BYTES);
+        modifyLiquidityRouter.modifyLiquidity(key, LIQ_PARAMS, ZERO_BYTES);
         snapLastCall("addLiquidity with empty hook");
     }
 
@@ -489,9 +419,9 @@ contract PoolManagerTest is Test, Deployers, GasSnapshot {
         MockHooks mockHooks = MockHooks(hookEmptyAddr);
 
         (key,) = initPool(currency0, currency1, mockHooks, 3000, SQRT_RATIO_1_1, ZERO_BYTES);
-        modifyLiquidityRouter.modifyLiquidity(key, LIQUIDITY_PARAMS, ZERO_BYTES);
+        modifyLiquidityRouter.modifyLiquidity(key, LIQ_PARAMS, ZERO_BYTES);
 
-        modifyLiquidityRouter.modifyLiquidity(key, REMOVE_LIQUIDITY_PARAMS, ZERO_BYTES);
+        modifyLiquidityRouter.modifyLiquidity(key, REMOVE_LIQ_PARAMS, ZERO_BYTES);
         snapLastCall("removeLiquidity with empty hook");
     }
 
@@ -778,7 +708,7 @@ contract PoolManagerTest is Test, Deployers, GasSnapshot {
         assertEq(erc6909Balance, 71);
     }
 
-    function test_swap_againstLiquidity_gas() public {
+    function test_swap_againstLiq_gas() public {
         IPoolManager.SwapParams memory params =
             IPoolManager.SwapParams({zeroForOne: true, amountSpecified: -100, sqrtPriceLimitX96: SQRT_RATIO_1_2});
 
@@ -808,245 +738,6 @@ contract PoolManagerTest is Test, Deployers, GasSnapshot {
         snapLastCall("swap against liquidity with native token");
     }
 
-    function test_swap_afterSwapFeeOnUnspecified_exactInput() public {
-        address hookAddr = address(uint160(Hooks.AFTER_SWAP_FLAG | Hooks.AFTER_SWAP_RETURNS_DELTA_FLAG));
-        FeeTakingHook impl = new FeeTakingHook(manager);
-        vm.etch(hookAddr, address(impl).code);
-
-        (key,) = initPoolAndAddLiquidity(currency0, currency1, IHooks(hookAddr), 100, SQRT_RATIO_1_1, ZERO_BYTES);
-
-        uint256 balanceBefore0 = currency0.balanceOf(address(this));
-        uint256 balanceBefore1 = currency1.balanceOf(address(this));
-
-        uint256 amountToSwap = 1000;
-        PoolSwapTest.TestSettings memory testSettings =
-            PoolSwapTest.TestSettings({takeClaims: false, settleUsingBurn: false});
-        IPoolManager.SwapParams memory params = IPoolManager.SwapParams({
-            zeroForOne: true,
-            amountSpecified: -int256(amountToSwap),
-            sqrtPriceLimitX96: SQRT_RATIO_1_2
-        });
-        swapRouter.swap(key, params, testSettings, ZERO_BYTES);
-        snapLastCall("swap CA fee on unspecified");
-
-        // input is 1000 for output of 998 with this much liquidity available
-        // plus a fee of 1.23% on unspecified (output) => (998*123)/10000 = 12
-        assertEq(currency0.balanceOf(address(this)), balanceBefore0 - amountToSwap, "amount 0");
-        assertEq(currency1.balanceOf(address(this)), balanceBefore1 + (998 - 12), "amount 1");
-    }
-
-    function test_swap_afterSwapFeeOnUnspecified_exactOutput() public {
-        address hookAddr = address(uint160(Hooks.AFTER_SWAP_FLAG | Hooks.AFTER_SWAP_RETURNS_DELTA_FLAG));
-        FeeTakingHook impl = new FeeTakingHook(manager);
-        vm.etch(hookAddr, address(impl).code);
-
-        (key,) = initPoolAndAddLiquidity(currency0, currency1, IHooks(hookAddr), 100, SQRT_RATIO_1_1, ZERO_BYTES);
-
-        uint256 balanceBefore0 = currency0.balanceOf(address(this));
-        uint256 balanceBefore1 = currency1.balanceOf(address(this));
-
-        uint256 amountToSwap = 1000;
-        PoolSwapTest.TestSettings memory testSettings =
-            PoolSwapTest.TestSettings({takeClaims: false, settleUsingBurn: false});
-        IPoolManager.SwapParams memory params = IPoolManager.SwapParams({
-            zeroForOne: true,
-            amountSpecified: int256(amountToSwap),
-            sqrtPriceLimitX96: SQRT_RATIO_1_2
-        });
-        swapRouter.swap(key, params, testSettings, ZERO_BYTES);
-
-        // input is 1002 for output of 1000 with this much liquidity available
-        // plus a fee of 1.23% on unspecified (input) => (1002*123)/10000 = 12
-        assertEq(currency0.balanceOf(address(this)), balanceBefore0 - 1002 - 12, "amount 0");
-        assertEq(currency1.balanceOf(address(this)), balanceBefore1 + amountToSwap, "amount 1");
-    }
-
-    function test_swap_beforeSwapNoOpsSwap_exactInput() public {
-        address hookAddr = address(
-            uint160(
-                Hooks.AFTER_SWAP_FLAG | Hooks.AFTER_SWAP_RETURNS_DELTA_FLAG | Hooks.BEFORE_SWAP_FLAG
-                    | Hooks.BEFORE_SWAP_RETURNS_DELTA_FLAG
-            )
-        );
-        CustomCurveHook impl = new CustomCurveHook(manager);
-        vm.etch(hookAddr, address(impl).code);
-
-        (key,) = initPool(currency0, currency1, IHooks(hookAddr), 100, SQRT_RATIO_1_1, ZERO_BYTES);
-        // add liquidity by sending tokens straight into the contract
-        key.currency0.transfer(hookAddr, 10e18);
-        key.currency1.transfer(hookAddr, 10e18);
-
-        uint256 balanceBefore0 = currency0.balanceOf(address(this));
-        uint256 balanceBefore1 = currency1.balanceOf(address(this));
-
-        uint256 amountToSwap = 123456;
-        PoolSwapTest.TestSettings memory testSettings =
-            PoolSwapTest.TestSettings({takeClaims: false, settleUsingBurn: false});
-        IPoolManager.SwapParams memory params = IPoolManager.SwapParams({
-            zeroForOne: true,
-            amountSpecified: -int256(amountToSwap),
-            sqrtPriceLimitX96: SQRT_RATIO_1_2
-        });
-        swapRouter.swap(key, params, testSettings, ZERO_BYTES);
-        snapLastCall("swap CA custom curve + swap noop");
-
-        // the custom curve hook is 1-1 linear
-        assertEq(currency0.balanceOf(address(this)), balanceBefore0 - amountToSwap, "amount 0");
-        assertEq(currency1.balanceOf(address(this)), balanceBefore1 + amountToSwap, "amount 1");
-    }
-
-    function test_swap_beforeSwapNoOpsSwap_exactOutput() public {
-        address hookAddr = address(
-            uint160(
-                Hooks.AFTER_SWAP_FLAG | Hooks.AFTER_SWAP_RETURNS_DELTA_FLAG | Hooks.BEFORE_SWAP_FLAG
-                    | Hooks.BEFORE_SWAP_RETURNS_DELTA_FLAG
-            )
-        );
-        CustomCurveHook impl = new CustomCurveHook(manager);
-        vm.etch(hookAddr, address(impl).code);
-
-        (key,) = initPool(currency0, currency1, IHooks(hookAddr), 100, SQRT_RATIO_1_1, ZERO_BYTES);
-        // add liquidity by sending tokens straight into the contract
-        key.currency0.transfer(hookAddr, 10e18);
-        key.currency1.transfer(hookAddr, 10e18);
-
-        uint256 balanceBefore0 = currency0.balanceOf(address(this));
-        uint256 balanceBefore1 = currency1.balanceOf(address(this));
-
-        uint256 amountToSwap = 123456;
-        PoolSwapTest.TestSettings memory testSettings =
-            PoolSwapTest.TestSettings({takeClaims: false, settleUsingBurn: false});
-        IPoolManager.SwapParams memory params = IPoolManager.SwapParams({
-            zeroForOne: true,
-            amountSpecified: int256(amountToSwap),
-            sqrtPriceLimitX96: SQRT_RATIO_1_2
-        });
-        swapRouter.swap(key, params, testSettings, ZERO_BYTES);
-
-        // the custom curve hook is 1-1 linear
-        assertEq(currency0.balanceOf(address(this)), balanceBefore0 - amountToSwap, "amount 0");
-        assertEq(currency1.balanceOf(address(this)), balanceBefore1 + amountToSwap, "amount 1");
-    }
-
-    // maximum available liquidity in each direction for the pool in fuzz_swap_beforeSwapReturnsDelta
-    int128 maxPossibleIn_fuzz_test = -6018336102428409;
-    int128 maxPossibleOut_fuzz_test = 5981737760509662;
-
-    function test_fuzz_swap_beforeSwapReturnsDelta(int128 hookDeltaSpecified, int256 amountSpecified, bool zeroForOne)
-        public
-    {
-        // ------------------------ SETUP ------------------------
-        Currency specifiedCurrency;
-        bool isExactIn;
-        address hookAddr = address(uint160(Hooks.BEFORE_SWAP_FLAG | Hooks.BEFORE_SWAP_RETURNS_DELTA_FLAG));
-
-        // stack too deep management
-        {
-            // setup the hook and the pool
-
-            DeltaReturningHook impl = new DeltaReturningHook(manager);
-            vm.etch(hookAddr, address(impl).code);
-
-            // initialize the pool and give the hook tokens to pay into swaps
-            (key,) = initPoolAndAddLiquidity(currency0, currency1, IHooks(hookAddr), 100, SQRT_RATIO_1_1, ZERO_BYTES);
-            key.currency0.transfer(hookAddr, type(uint128).max);
-            key.currency1.transfer(hookAddr, type(uint128).max);
-
-            // bound amount specified to be a fair amount less than the amount of liquidity we have
-            amountSpecified = int128(bound(amountSpecified, -3e11, 3e11));
-            isExactIn = amountSpecified < 0;
-            specifiedCurrency = (isExactIn == zeroForOne) ? key.currency0 : key.currency1;
-
-            // bound delta in specified to not take more than the reserves available, nor be the minimum int to
-            // stop the hook reverting on take/settle
-            uint128 reservesOfSpecified = uint128(specifiedCurrency.balanceOf(address(manager)));
-            hookDeltaSpecified = int128(bound(hookDeltaSpecified, type(int128).min + 1, int128(reservesOfSpecified)));
-            DeltaReturningHook(hookAddr).setDeltaSpecified(hookDeltaSpecified);
-        }
-
-        // setup swap variables
-        PoolSwapTest.TestSettings memory testSettings =
-            PoolSwapTest.TestSettings({takeClaims: false, settleUsingBurn: false});
-        IPoolManager.SwapParams memory params = IPoolManager.SwapParams({
-            zeroForOne: zeroForOne,
-            amountSpecified: amountSpecified,
-            sqrtPriceLimitX96: (zeroForOne ? MIN_PRICE_LIMIT : MAX_PRICE_LIMIT)
-        });
-
-        // ------------------------ FUZZING CASES ------------------------
-        // with an amount specified of 0: the trade reverts
-        if (amountSpecified == 0) {
-            vm.expectRevert(IPoolManager.SwapAmountCannotBeZero.selector);
-            swapRouter.swap(key, params, testSettings, ZERO_BYTES);
-
-            // trade is exact input of n:, the hook cannot TAKE (+ve hookDeltaSpecified) more than n in input
-            // otherwise the user would have to send more than n in input
-        } else if (isExactIn && (hookDeltaSpecified > -amountSpecified)) {
-            vm.expectRevert(Hooks.HookDeltaExceedsSwapAmount.selector);
-            swapRouter.swap(key, params, testSettings, ZERO_BYTES);
-
-            // exact output of n: the hook cannot GIVE (-ve hookDeltaSpecified) more than n in output
-            // otherwise the user would receive more than n in output
-        } else if (!isExactIn && (amountSpecified < -hookDeltaSpecified)) {
-            vm.expectRevert(Hooks.HookDeltaExceedsSwapAmount.selector);
-            swapRouter.swap(key, params, testSettings, ZERO_BYTES);
-
-            // successful swaps !
-        } else {
-            uint256 balanceThisBefore = specifiedCurrency.balanceOf(address(this));
-            uint256 balanceHookBefore = specifiedCurrency.balanceOf(hookAddr);
-            uint256 balanceManagerBefore = specifiedCurrency.balanceOf(address(manager));
-
-            BalanceDelta delta = swapRouter.swap(key, params, testSettings, ZERO_BYTES);
-            int128 deltaSpecified = (zeroForOne == isExactIn) ? delta.amount0() : delta.amount1();
-
-            // in all cases the hook gets what they took, and the user gets the swap's output delta (checked more below)
-            assertEq(
-                balanceHookBefore.toInt256() + hookDeltaSpecified,
-                specifiedCurrency.balanceOf(hookAddr).toInt256(),
-                "hook balance change incorrect"
-            );
-            assertEq(
-                balanceThisBefore.toInt256() + deltaSpecified,
-                specifiedCurrency.balanceOf(address(this)).toInt256(),
-                "swapper balance change incorrect"
-            );
-
-            // exact input, where there arent enough input reserves available to pay swap and hook
-            // note: all 3 values are negative, so we use <
-            if (isExactIn && (hookDeltaSpecified + amountSpecified < maxPossibleIn_fuzz_test)) {
-                // the hook will have taken hookDeltaSpecified of the maxPossibleIn
-                assertEq(deltaSpecified, maxPossibleIn_fuzz_test - hookDeltaSpecified, "deltaSpecified exact input");
-                // the manager received all possible input tokens
-                assertEq(
-                    balanceManagerBefore.toInt256() - maxPossibleIn_fuzz_test,
-                    specifiedCurrency.balanceOf(address(manager)).toInt256(),
-                    "manager balance change exact input"
-                );
-
-                // exact output, where there isnt enough output reserves available to pay swap and hook
-            } else if (!isExactIn && (hookDeltaSpecified + amountSpecified > maxPossibleOut_fuzz_test)) {
-                // the hook will have taken hookDeltaSpecified of the maxPossibleOut
-                assertEq(deltaSpecified, maxPossibleOut_fuzz_test - hookDeltaSpecified, "deltaSpecified exact output");
-                // the manager sent out all possible output tokens
-                assertEq(
-                    balanceManagerBefore.toInt256() - maxPossibleOut_fuzz_test,
-                    specifiedCurrency.balanceOf(address(manager)).toInt256(),
-                    "manager balance change exact output"
-                );
-
-                // enough reserves were available, so the user got what they desired
-            } else {
-                assertEq(deltaSpecified, amountSpecified, "deltaSpecified not amountSpecified");
-                assertEq(
-                    balanceManagerBefore.toInt256() - amountSpecified - hookDeltaSpecified,
-                    specifiedCurrency.balanceOf(address(manager)).toInt256(),
-                    "manager balance change not"
-                );
-            }
-        }
-    }
-
     function test_swap_accruesProtocolFees(uint16 protocolFee0, uint16 protocolFee1, int256 amountSpecified) public {
         protocolFee0 = uint16(bound(protocolFee0, 0, 1000));
         protocolFee1 = uint16(bound(protocolFee1, 0, 1000));
@@ -1061,21 +752,21 @@ contract PoolManagerTest is Test, Deployers, GasSnapshot {
         assertEq(slot0ProtocolFee, protocolFee);
 
         // Add liquidity - Fees dont accrue for positive liquidity delta.
-        IPoolManager.ModifyLiquidityParams memory params = LIQUIDITY_PARAMS;
+        IPoolManager.ModifyLiquidityParams memory params = LIQ_PARAMS;
         modifyLiquidityRouter.modifyLiquidity(key, params, ZERO_BYTES);
 
         assertEq(manager.protocolFeesAccrued(currency0), 0);
         assertEq(manager.protocolFeesAccrued(currency1), 0);
 
         // Remove liquidity - Fees dont accrue for negative liquidity delta.
-        params.liquidityDelta = -LIQUIDITY_PARAMS.liquidityDelta;
+        params.liquidityDelta = -LIQ_PARAMS.liquidityDelta;
         modifyLiquidityRouter.modifyLiquidity(key, params, ZERO_BYTES);
 
         assertEq(manager.protocolFeesAccrued(currency0), 0);
         assertEq(manager.protocolFeesAccrued(currency1), 0);
 
         // Now re-add the liquidity to test swap
-        params.liquidityDelta = LIQUIDITY_PARAMS.liquidityDelta;
+        params.liquidityDelta = LIQ_PARAMS.liquidityDelta;
         modifyLiquidityRouter.modifyLiquidity(key, params, ZERO_BYTES);
 
         IPoolManager.SwapParams memory swapParams =
@@ -1088,7 +779,7 @@ contract PoolManagerTest is Test, Deployers, GasSnapshot {
     }
 
     function test_donate_failsIfNotInitialized() public {
-        vm.expectRevert(Pool.PoolNotInitialized.selector);
+        vm.expectRevert(abi.encodeWithSelector(Pool.PoolNotInitialized.selector));
         donateRouter.donate(uninitializedKey, 100, 100, ZERO_BYTES);
     }
 
@@ -1102,7 +793,7 @@ contract PoolManagerTest is Test, Deployers, GasSnapshot {
 
         (key,) = initPool(currency0, currency1, IHooks(address(0)), 100, sqrtPriceX96, ZERO_BYTES);
 
-        vm.expectRevert(Pool.NoLiquidityToReceiveFees.selector);
+        vm.expectRevert(abi.encodeWithSelector(Pool.NoLiquidityToReceiveFees.selector));
         donateRouter.donate(key, 100, 100, ZERO_BYTES);
     }
 
@@ -1503,8 +1194,8 @@ contract PoolManagerTest is Test, Deployers, GasSnapshot {
     function test_getPosition() public view {
         Position.Info memory managerPosition =
             manager.getPosition(key.toId(), address(modifyLiquidityRouter), -120, 120, 0);
-        assert(LIQUIDITY_PARAMS.liquidityDelta > 0);
-        assertEq(managerPosition.liquidity, uint128(uint256(LIQUIDITY_PARAMS.liquidityDelta)));
+        assert(LIQ_PARAMS.liquidityDelta > 0);
+        assertEq(managerPosition.liquidity, uint128(uint256(LIQ_PARAMS.liquidityDelta)));
     }
 
     function supportsInterface(bytes4) external pure returns (bool) {
