diff --git a/test/DynamicFees.t.sol b/test/DynamicFees.t.sol
index 56019a7c..dbaa2609 100644
--- a/test/DynamicFees.t.sol
+++ b/test/DynamicFees.t.sol
@@ -16,9 +16,6 @@ import {Deployers} from "./utils/Deployers.sol";
 import {IDynamicFeeManager} from "././../src/interfaces/IDynamicFeeManager.sol";
 import {GasSnapshot} from "forge-gas-snapshot/GasSnapshot.sol";
 import {DynamicFeesTest} from "../src/test/DynamicFeesTest.sol";
-import {PoolModifyPositionTest} from "../src/test/PoolModifyPositionTest.sol";
-import {Currency, CurrencyLibrary} from "../src/types/Currency.sol";
-import {MockERC20} from "solmate/test/utils/mocks/MockERC20.sol";
 
 contract TestDynamicFees is Test, Deployers, GasSnapshot {
     using PoolIdLibrary for PoolKey;
@@ -49,7 +46,6 @@ contract TestDynamicFees is Test, Deployers, GasSnapshot {
     PoolKey key;
     PoolKey key2;
     PoolSwapTest swapRouter;
-    PoolModifyPositionTest modifyPositionRouter;
 
     function setUp() public {
         DynamicFeesTest impl = new DynamicFeesTest();
@@ -57,37 +53,16 @@ contract TestDynamicFees is Test, Deployers, GasSnapshot {
         vm.etch(address(dynamicFeesNoHook), address(impl).code);
 
         (manager, key,) =
-            Deployers.createAndInitFreshPool(IHooks(address(dynamicFees)), FeeLibrary.DYNAMIC_FEE_FLAG, SQRT_RATIO_1_1);
+            Deployers.createFreshPool(IHooks(address(dynamicFees)), FeeLibrary.DYNAMIC_FEE_FLAG, SQRT_RATIO_1_1);
         dynamicFees.setManager(IPoolManager(manager));
 
-        (key2,) = Deployers.createAndInitPool(
+        PoolId id2;
+        (key2, id2) = Deployers.createPool(
             manager, IHooks(address(dynamicFeesNoHook)), FeeLibrary.DYNAMIC_FEE_FLAG, SQRT_RATIO_1_1
         );
         dynamicFeesNoHook.setManager(IPoolManager(manager));
 
         swapRouter = new PoolSwapTest(manager);
-        modifyPositionRouter = new PoolModifyPositionTest(manager);
-
-        MockERC20(Currency.unwrap(key.currency0)).mint(address(this), 10 ether);
-        MockERC20(Currency.unwrap(key.currency1)).mint(address(this), 10 ether);
-        MockERC20(Currency.unwrap(key2.currency0)).mint(address(this), 10 ether);
-        MockERC20(Currency.unwrap(key2.currency1)).mint(address(this), 10 ether);
-
-        MockERC20(Currency.unwrap(key.currency0)).approve(address(swapRouter), 10 ether);
-        MockERC20(Currency.unwrap(key.currency1)).approve(address(swapRouter), 10 ether);
-        MockERC20(Currency.unwrap(key2.currency0)).approve(address(swapRouter), 10 ether);
-        MockERC20(Currency.unwrap(key2.currency1)).approve(address(swapRouter), 10 ether);
-
-        MockERC20(Currency.unwrap(key.currency0)).approve(address(modifyPositionRouter), 10 ether);
-        MockERC20(Currency.unwrap(key.currency1)).approve(address(modifyPositionRouter), 10 ether);
-        MockERC20(Currency.unwrap(key2.currency0)).approve(address(modifyPositionRouter), 10 ether);
-        MockERC20(Currency.unwrap(key2.currency1)).approve(address(modifyPositionRouter), 10 ether);
-
-        // add liquidity for the 2 new pools
-        IPoolManager.ModifyPositionParams memory liqParams =
-            IPoolManager.ModifyPositionParams({tickLower: -120, tickUpper: 120, liquidityDelta: 1e18});
-        modifyPositionRouter.modifyPosition(key, liqParams, ZERO_BYTES);
-        modifyPositionRouter.modifyPosition(key2, liqParams, ZERO_BYTES);
     }
 
     function testPoolInitializeFailsWithTooLargeFee() public {
@@ -97,7 +72,7 @@ contract TestDynamicFees is Test, Deployers, GasSnapshot {
         manager.initialize(key0, SQRT_RATIO_1_1, ZERO_BYTES);
     }
 
-    function testUpdateFailsWithTooLargeFee() public {
+    function testSwapFailsWithTooLargeFee() public {
         dynamicFees.setFee(1000000);
         vm.expectRevert(IFees.FeeTooLarge.selector);
         manager.updateDynamicSwapFee(key);
@@ -117,58 +92,46 @@ contract TestDynamicFees is Test, Deployers, GasSnapshot {
     function testSwapWorks() public {
         dynamicFees.setFee(123);
         manager.updateDynamicSwapFee(key);
-
-        IPoolManager.SwapParams memory params =
-            IPoolManager.SwapParams({zeroForOne: true, amountSpecified: 100, sqrtPriceLimitX96: SQRT_RATIO_1_2});
-        PoolSwapTest.TestSettings memory testSettings =
-            PoolSwapTest.TestSettings({withdrawTokens: true, settleUsingTransfer: true});
-
         vm.expectEmit(true, true, true, true, address(manager));
-        emit Swap(key.toId(), address(swapRouter), 100, -98, 79228162514264329749955861424, 1e18, -1, 123);
-
+        emit Swap(key.toId(), address(swapRouter), 0, 0, SQRT_RATIO_1_1 + 1, 0, 0, 123);
         snapStart("swap with dynamic fee");
-        swapRouter.swap(key, params, testSettings, ZERO_BYTES);
+        swapRouter.swap(
+            key,
+            IPoolManager.SwapParams(false, 1, SQRT_RATIO_1_1 + 1),
+            PoolSwapTest.TestSettings(false, false),
+            ZERO_BYTES
+        );
         snapEnd();
     }
 
     function testCacheDynamicFeeAndSwap() public {
         dynamicFees.setFee(123);
         manager.updateDynamicSwapFee(key);
-
-        IPoolManager.SwapParams memory params =
-            IPoolManager.SwapParams({zeroForOne: true, amountSpecified: 100, sqrtPriceLimitX96: SQRT_RATIO_1_2});
-        PoolSwapTest.TestSettings memory testSettings =
-            PoolSwapTest.TestSettings({withdrawTokens: true, settleUsingTransfer: true});
-
         vm.expectEmit(true, true, true, true, address(manager));
-        emit Swap(key.toId(), address(swapRouter), 100, -98, 79228162514264329749955861424, 1e18, -1, 456);
-        bytes memory data = abi.encode(true, uint24(456));
-
+        emit Swap(key.toId(), address(swapRouter), 0, 0, SQRT_RATIO_1_1 + 1, 0, 0, 456);
         snapStart("update dynamic fee in before swap");
-        swapRouter.swap(key, params, testSettings, data);
+        bytes memory data = abi.encode(true, uint24(456));
+        swapRouter.swap(
+            key, IPoolManager.SwapParams(false, 1, SQRT_RATIO_1_1 + 1), PoolSwapTest.TestSettings(false, false), data
+        );
         snapEnd();
     }
 
     function testDynamicFeeAndBeforeSwapHook() public {
         dynamicFees.setFee(123);
         manager.updateDynamicSwapFee(key);
-
-        IPoolManager.SwapParams memory params =
-            IPoolManager.SwapParams({zeroForOne: true, amountSpecified: 100, sqrtPriceLimitX96: SQRT_RATIO_1_2});
-        PoolSwapTest.TestSettings memory testSettings =
-            PoolSwapTest.TestSettings({withdrawTokens: true, settleUsingTransfer: true});
-
         vm.expectEmit(true, true, true, true, address(manager));
-        emit Swap(key.toId(), address(swapRouter), 100, -98, 79228162514264329749955861424, 1e18, -1, 123);
-        bytes memory data = abi.encode(false, uint24(0));
-
+        emit Swap(key.toId(), address(swapRouter), 0, 0, SQRT_RATIO_1_1 + 1, 0, 0, 123);
         snapStart("before swap hook, already cached dynamic fee");
-        swapRouter.swap(key, params, testSettings, data);
+        bytes memory data = abi.encode(false, uint24(0));
+        swapRouter.swap(
+            key, IPoolManager.SwapParams(false, 1, SQRT_RATIO_1_1 + 1), PoolSwapTest.TestSettings(false, false), data
+        );
         snapEnd();
     }
 
     function testUpdateRevertsOnStaticFeePool() public {
-        (PoolKey memory staticPoolKey,) = Deployers.createAndInitPool(manager, IHooks(address(0)), 3000, SQRT_RATIO_1_1);
+        (PoolKey memory staticPoolKey,) = Deployers.createPool(manager, IHooks(address(0)), 3000, SQRT_RATIO_1_1);
         vm.expectRevert(IFees.FeeNotDynamic.selector);
         manager.updateDynamicSwapFee(staticPoolKey);
     }
@@ -176,17 +139,15 @@ contract TestDynamicFees is Test, Deployers, GasSnapshot {
     function testDynamicFeesCacheNoOtherHooks() public {
         dynamicFeesNoHook.setFee(123);
         manager.updateDynamicSwapFee(key2);
-
-        IPoolManager.SwapParams memory params =
-            IPoolManager.SwapParams({zeroForOne: true, amountSpecified: 100, sqrtPriceLimitX96: SQRT_RATIO_1_2});
-        PoolSwapTest.TestSettings memory testSettings =
-            PoolSwapTest.TestSettings({withdrawTokens: true, settleUsingTransfer: true});
-
         vm.expectEmit(true, true, true, true, address(manager));
-        emit Swap(key.toId(), address(swapRouter), 100, -99, 79228162514264329670727698910, 1e18, -1, 0);
-
+        emit Swap(key2.toId(), address(swapRouter), 0, 0, SQRT_RATIO_1_1 + 1, 0, 0, 123);
         snapStart("cached dynamic fee, no hooks");
-        swapRouter.swap(key, params, testSettings, ZERO_BYTES);
+        swapRouter.swap(
+            key2,
+            IPoolManager.SwapParams(false, 1, SQRT_RATIO_1_1 + 1),
+            PoolSwapTest.TestSettings(false, false),
+            ZERO_BYTES
+        );
         snapEnd();
     }
 }
