diff --git a/contracts/UniswapV3Pair.sol b/contracts/UniswapV3Pair.sol
index 31c41af7..56791933 100644
--- a/contracts/UniswapV3Pair.sol
+++ b/contracts/UniswapV3Pair.sol
@@ -130,15 +130,15 @@ contract UniswapV3Pair is IUniswapV3Pair {
         (minTick, maxTick, maxLiquidityPerTick) = Tick.tickSpacingToParameters(_tickSpacing);
     }
 
-    function balance0() private view returns (uint256) {
-        return balanceOfToken(token0);
+    function getBalance0() private view returns (uint256) {
+        return getBalance(token0);
     }
 
-    function balance1() private view returns (uint256) {
-        return balanceOfToken(token1);
+    function getBalance1() private view returns (uint256) {
+        return getBalance(token1);
     }
 
-    function balanceOfToken(address token) private view returns (uint256) {
+    function getBalance(address token) private view returns (uint256) {
         return IERC20(token).balanceOf(address(this));
     }
 
@@ -320,14 +320,22 @@ contract UniswapV3Pair is IUniswapV3Pair {
         uint256 amount0 = uint256(amount0Int);
         uint256 amount1 = uint256(amount1Int);
 
-        if (amount0 > 0 || amount1 > 0) {
-            uint256 balance0Before;
-            uint256 balance1Before;
-            if (amount0 > 0) balance0Before = balance0();
-            if (amount1 > 0) balance1Before = balance1();
+        // if necessary, collect payment via callback
+        // TODO we could decrease bytecode size here at the cost of gas increase
+        if (amount0 > 0 && amount1 > 0) {
+            uint256 balance0 = getBalance0();
+            uint256 balance1 = getBalance1();
             IUniswapV3MintCallback(msg.sender).uniswapV3MintCallback(amount0, amount1, data);
-            if (amount0 > 0) require(balance0Before.add(amount0) <= balance0(), 'M0');
-            if (amount1 > 0) require(balance1Before.add(amount1) <= balance1(), 'M1');
+            require(balance0.add(amount0) <= getBalance0(), 'M0');
+            require(balance1.add(amount1) <= getBalance1(), 'M1');
+        } else if (amount0 > 0 && amount1 == 0) {
+            uint256 balance0 = getBalance0();
+            IUniswapV3MintCallback(msg.sender).uniswapV3MintCallback(amount0, 0, data);
+            require(balance0.add(amount0) <= getBalance0(), 'M0');
+        } else if (amount0 == 0 && amount1 > 0) {
+            uint256 balance1 = getBalance1();
+            IUniswapV3MintCallback(msg.sender).uniswapV3MintCallback(0, amount1, data);
+            require(balance1.add(amount1) <= getBalance1(), 'M1');
         }
 
         emit Mint(recipient, tickLower, tickUpper, msg.sender, amount, amount0, amount1);
@@ -339,7 +347,8 @@ contract UniswapV3Pair is IUniswapV3Pair {
         int24 tickUpper,
         uint128 amount
     ) external override lockNoPriceMovement returns (uint256 amount0, uint256 amount1) {
-        require(amount > 0 && amount < 2**127, 'BA');
+        require(amount > 0, 'BA');
+        require(amount < 2**127, 'BA');
 
         (int256 amount0Int, int256 amount1Int) =
             _setPosition(
@@ -591,11 +600,11 @@ contract UniswapV3Pair is IUniswapV3Pair {
         TransferHelper.safeTransfer(tokenOut, params.recipient, uint256(-amountOut));
 
         // callback for the input
-        uint256 balanceBefore = balanceOfToken(tokenIn);
+        uint256 balanceBefore = getBalance(tokenIn);
         zeroForOne
             ? IUniswapV3SwapCallback(msg.sender).uniswapV3SwapCallback(amountIn, amountOut, params.data)
             : IUniswapV3SwapCallback(msg.sender).uniswapV3SwapCallback(amountOut, amountIn, params.data);
-        require(balanceBefore.add(uint256(amountIn)) >= balanceOfToken(tokenIn), 'IIA');
+        require(balanceBefore.add(uint256(amountIn)) >= getBalance(tokenIn), 'IIA');
 
         slot0.unlockedAndPriceBit = state.priceBit ? PRICE_BIT | UNLOCKED_BIT : UNLOCKED_BIT;
 
