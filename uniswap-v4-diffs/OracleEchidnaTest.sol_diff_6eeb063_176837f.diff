diff --git a/contracts/test/OracleEchidnaTest.sol b/contracts/test/OracleEchidnaTest.sol
index a892f306..4e0a7dfc 100644
--- a/contracts/test/OracleEchidnaTest.sol
+++ b/contracts/test/OracleEchidnaTest.sol
@@ -1,5 +1,5 @@
 // SPDX-License-Identifier: UNLICENSED
-pragma solidity =0.8.9;
+pragma solidity =0.7.6;
 pragma abicoder v2;
 
 import './OracleTest.sol';
@@ -23,8 +23,13 @@ contract OracleEchidnaTest {
         initialized = true;
     }
 
-    function advanceTime(uint32 by) public {
+    function limitTimePassed(uint32 by) private {
+        require(timePassed + by >= timePassed);
         timePassed += by;
+    }
+
+    function advanceTime(uint32 by) public {
+        limitTimePassed(by);
         oracle.advanceTime(by);
     }
 
@@ -34,7 +39,7 @@ contract OracleEchidnaTest {
         int24 tick,
         uint128 liquidity
     ) external {
-        timePassed += advanceTimeBy;
+        limitTimePassed(advanceTimeBy);
         oracle.update(OracleTest.UpdateParams({advanceTimeBy: advanceTimeBy, tick: tick, liquidity: liquidity}));
     }
 
@@ -57,7 +62,7 @@ contract OracleEchidnaTest {
         (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s) = oracle.observe(
             secondsAgos
         );
-        int56 timeWeightedTick = (tickCumulatives[1] - tickCumulatives[0]) / int56(uint56(timeElapsed));
+        int56 timeWeightedTick = (tickCumulatives[1] - tickCumulatives[0]) / timeElapsed;
         uint256 timeWeightedHarmonicMeanLiquidity = (uint256(timeElapsed) * type(uint160).max) /
             (uint256(secondsPerLiquidityCumulativeX128s[1] - secondsPerLiquidityCumulativeX128s[0]) << 32);
         assert(timeWeightedHarmonicMeanLiquidity <= type(uint128).max);
@@ -103,7 +108,7 @@ contract OracleEchidnaTest {
 
         uint32 timeElapsed = blockTimestamp1 - blockTimestamp0;
         assert(timeElapsed > 0);
-        assert((tickCumulative1 - tickCumulative0) % int56(uint56(timeElapsed)) == 0);
+        assert((tickCumulative1 - tickCumulative0) % timeElapsed == 0);
     }
 
     function checkTimeWeightedAveragesAlwaysFitsType(uint32 secondsAgo) external view {
@@ -118,8 +123,8 @@ contract OracleEchidnaTest {
 
         // compute the time weighted tick, rounded towards negative infinity
         int56 numerator = tickCumulatives[1] - tickCumulatives[0];
-        int56 timeWeightedTick = numerator / int56(uint56(secondsAgo));
-        if (numerator < 0 && numerator % int56(uint56(secondsAgo)) != 0) {
+        int56 timeWeightedTick = numerator / int56(secondsAgo);
+        if (numerator < 0 && numerator % int56(secondsAgo) != 0) {
             timeWeightedTick--;
         }
 
