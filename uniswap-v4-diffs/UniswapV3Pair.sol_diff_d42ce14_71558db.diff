diff --git a/contracts/UniswapV3Pair.sol b/contracts/UniswapV3Pair.sol
index 834d9684..6dc50de4 100644
--- a/contracts/UniswapV3Pair.sol
+++ b/contracts/UniswapV3Pair.sol
@@ -69,9 +69,9 @@ contract UniswapV3Pair is IUniswapV3Pair {
     FixedPoint.uq144x112 private price1CumulativeLast; // cumulative (token0 / token1) oracle price
     uint32 public override blockTimestampLast;
 
-    // the fee as of the end of the last block with a swap or setPosition/initialize
+    // the current fee (gets set by the first swap or setPosition/initialize in a block)
     // this is stored to protect liquidity providers from add/swap/remove sandwiching attacks
-    uint16 public override feeFloor;
+    uint16 public override feeLast;
 
     uint112[NUM_FEE_OPTIONS] public override liquidityCurrent; // all in-range liquidity, segmented across fee options
     FixedPoint.uq112x112 public override priceCurrent; // (token1 / token0) price
@@ -248,75 +248,6 @@ contract UniswapV3Pair is IUniswapV3Pair {
         return (price0CumulativeLast, price1CumulativeLast);
     }
 
-    function getAmount0Delta(
-        FixedPoint.uq112x112 memory priceLower,
-        FixedPoint.uq112x112 memory priceUpper,
-        int112 liquidity
-    ) internal pure returns (int256) {
-        if (liquidity == 0) return 0;
-
-        uint8 safeShiftBits = ((255 - BitMath.mostSignificantBit(priceUpper._x)) / 2) * 2;
-        if (liquidity < 0) safeShiftBits -= 2; // ensure that our denominator won't overflow
-
-        uint256 priceLowerScaled = uint256(priceLower._x) << safeShiftBits; // priceLower * 2**safeShiftBits
-        uint256 priceLowerScaledRoot = Babylonian.sqrt(priceLowerScaled); // sqrt(priceLowerScaled)
-        bool roundUpLower = priceLowerScaledRoot**2 < priceLowerScaled;
-
-        uint256 priceUpperScaled = uint256(priceUpper._x) << safeShiftBits; // priceUpper * 2**safeShiftBits
-        uint256 priceUpperScaledRoot = Babylonian.sqrt(priceUpperScaled); // sqrt(priceUpperScaled)
-        bool roundUpUpper = priceUpperScaledRoot**2 < priceUpperScaled;
-
-        // calculate liquidity * (sqrt(priceUpper) - sqrt(priceLower)) / sqrt(priceUpper) * sqrt(priceLower)
-        if (liquidity > 0) {
-            uint256 amount0 = PriceMath.mulDivRoundingUp(
-                uint256(liquidity) << (safeShiftBits / 2), // * 2**(SSB/2)
-                (priceUpperScaledRoot + (roundUpUpper ? 1 : 0) - priceLowerScaledRoot) << 56, // * 2**56
-                priceLowerScaledRoot * priceUpperScaledRoot
-            );
-            return amount0.toInt256();
-        }
-        uint256 amount0 = FullMath.mulDiv(
-            uint256(uint112(-liquidity)) << (safeShiftBits / 2), // * 2**(SSB/2)
-            priceUpperScaledRoot.sub(priceLowerScaledRoot + (roundUpLower ? 1 : 0)) << 56, // * 2**56
-            (priceLowerScaledRoot + (roundUpLower ? 1 : 0)) * (priceUpperScaledRoot + (roundUpUpper ? 1 : 0))
-        );
-        return -amount0.toInt256();
-    }
-
-    function getAmount1Delta(
-        FixedPoint.uq112x112 memory priceLower,
-        FixedPoint.uq112x112 memory priceUpper,
-        int112 liquidity
-    ) internal pure returns (int256) {
-        if (liquidity == 0) return 0;
-
-        uint8 safeShiftBits = ((255 - BitMath.mostSignificantBit(priceUpper._x)) / 2) * 2;
-
-        uint256 priceLowerScaled = uint256(priceLower._x) << safeShiftBits; // priceLower * 2**safeShiftBits
-        uint256 priceLowerScaledRoot = Babylonian.sqrt(priceLowerScaled); // sqrt(priceLowerScaled)
-        bool roundUpLower = priceLowerScaledRoot**2 < priceLowerScaled;
-
-        uint256 priceUpperScaled = uint256(priceUpper._x) << safeShiftBits; // priceUpper * 2**safeShiftBits
-        uint256 priceUpperScaledRoot = Babylonian.sqrt(priceUpperScaled); // sqrt(priceUpperScaled)
-        bool roundUpUpper = priceUpperScaledRoot**2 < priceUpperScaled;
-
-        // calculate liquidity * (sqrt(priceUpper) - sqrt(priceLower))
-        if (liquidity > 0) {
-            uint256 amount1 = PriceMath.mulDivRoundingUp(
-                uint256(liquidity),
-                priceUpperScaledRoot + (roundUpUpper ? 1 : 0) - priceLowerScaledRoot,
-                uint256(1) << (56 + safeShiftBits / 2)
-            );
-            return amount1.toInt256();
-        }
-        uint256 amount1 = FullMath.mulDiv(
-            uint256(uint112(-liquidity)),
-            priceUpperScaledRoot.sub(priceLowerScaledRoot + (roundUpLower ? 1 : 0)),
-            uint256(1) << (56 + safeShiftBits / 2)
-        );
-        return -amount1.toInt256();
-    }
-
     constructor(
         address _factory,
         address _token0,
@@ -334,15 +265,15 @@ contract UniswapV3Pair is IUniswapV3Pair {
         return uint32(block.timestamp); // truncation is desired
     }
 
-    // on the first interaction per block, update the oracle price accumulator and fee
+    // on the first interaction per block, update the fee and oracle price accumulator
     function _update() private {
         uint32 blockTimestamp = _blockTimestamp();
 
         if (blockTimestampLast != blockTimestamp) {
             (price0CumulativeLast, price1CumulativeLast) = getCumulativePrices();
-            blockTimestampLast = blockTimestamp;
+            feeLast = getFee();
 
-            feeFloor = getFee();
+            blockTimestampLast = blockTimestamp;
         }
     }
 
@@ -375,11 +306,8 @@ contract UniswapV3Pair is IUniswapV3Pair {
         require(tick >= TickMath.MIN_TICK, 'UniswapV3Pair::initialize: tick must be greater than or equal to min tick');
         require(tick < TickMath.MAX_TICK, 'UniswapV3Pair::initialize: tick must be less than max tick');
 
-        uint8 feeVote = 0;
-
-        // initialize oracle timestamp and fee
+        // initialize oracle timestamp
         blockTimestampLast = _blockTimestamp();
-        feeFloor = FEE_OPTIONS(feeVote);
 
         // initialize current price and tick
         priceCurrent = TickMath.getRatioAtTick(tick);
@@ -391,7 +319,7 @@ contract UniswapV3Pair is IUniswapV3Pair {
                 owner: address(0),
                 tickLower: TickMath.MIN_TICK,
                 tickUpper: TickMath.MAX_TICK,
-                feeVote: feeVote,
+                feeVote: 2, // FEE_OPTIONS(2) == 30 bips :)
                 liquidityDelta: 1
             })
         );
@@ -516,7 +444,7 @@ contract UniswapV3Pair is IUniswapV3Pair {
         // to right, at which point we'll need _more_ token0 (it's becoming more valuable) so the user must provide it
         if (tickCurrent < params.tickLower) {
             amount0 = amount0.add(
-                getAmount0Delta(
+                PriceMath.getAmount0Delta(
                     TickMath.getRatioAtTick(params.tickLower),
                     TickMath.getRatioAtTick(params.tickUpper),
                     params.liquidityDelta
@@ -525,10 +453,18 @@ contract UniswapV3Pair is IUniswapV3Pair {
         } else if (tickCurrent < params.tickUpper) {
             // the current price is inside the passed range
             amount0 = amount0.add(
-                getAmount0Delta(priceCurrent, TickMath.getRatioAtTick(params.tickUpper), params.liquidityDelta)
+                PriceMath.getAmount0Delta(
+                    priceCurrent,
+                    TickMath.getRatioAtTick(params.tickUpper),
+                    params.liquidityDelta
+                )
             );
             amount1 = amount1.add(
-                getAmount1Delta(TickMath.getRatioAtTick(params.tickLower), priceCurrent, params.liquidityDelta)
+                PriceMath.getAmount1Delta(
+                    TickMath.getRatioAtTick(params.tickLower),
+                    priceCurrent,
+                    params.liquidityDelta
+                )
             );
 
             // this satisfies:
@@ -542,7 +478,7 @@ contract UniswapV3Pair is IUniswapV3Pair {
             // the current price is above the passed range, so liquidity can only become in range by crossing from right
             // to left, at which point we need _more_ token1 (it's becoming more valuable) so the user must provide it
             amount1 = amount1.add(
-                getAmount1Delta(
+                PriceMath.getAmount1Delta(
                     TickMath.getRatioAtTick(params.tickLower),
                     TickMath.getRatioAtTick(params.tickUpper),
                     params.liquidityDelta
@@ -575,8 +511,6 @@ contract UniswapV3Pair is IUniswapV3Pair {
 
     // the top level state of the swap, the results of which are recorded in storage at the end
     struct SwapState {
-        // the floor for the fee, used to prevent sandwiching attacks
-        uint16 feeFloor;
         // the amount in remaining to be swapped of the input asset
         uint256 amountInRemaining;
         // the current tick
@@ -606,11 +540,13 @@ contract UniswapV3Pair is IUniswapV3Pair {
         uint256 amountOut;
     }
 
-    function _swap(SwapParams memory params) internal returns (uint256 amountOut) {
-        _update(); // update the oracle and feeFloor
+    function _swap(SwapParams memory params) private returns (uint256 amountOut) {
+        _update(); // update the oracle and feeLast
+
+        // the floor for the fee, used to prevent sandwiching attacks, static on a per-swap basis
+        uint16 feeFloor = feeLast;
 
         SwapState memory state = SwapState({
-            feeFloor: feeFloor,
             amountInRemaining: params.amountIn,
             tick: tickCurrent,
             liquidity: getLiquidity(),
@@ -635,7 +571,7 @@ contract UniswapV3Pair is IUniswapV3Pair {
             // if there might be room to move in the current tick, continue calculations
             if (params.zeroForOne == false || (state.price._x > step.priceNext._x)) {
                 // protect LPs by adjusting the fee only if the current fee is greater than the stored fee
-                step.fee = uint16(Math.max(state.feeFloor, getFee()));
+                step.fee = uint16(Math.max(feeFloor, getFee()));
 
                 // recompute reserves given the current price/liquidity
                 (step.reserve0Virtual, step.reserve1Virtual) = PriceMath.getVirtualReservesAtPrice(
