diff --git a/src/Extsload.sol b/src/Extsload.sol
index 77624338..7dd04284 100644
--- a/src/Extsload.sol
+++ b/src/Extsload.sol
@@ -25,4 +25,23 @@ abstract contract Extsload is IExtsload {
 
         return value;
     }
+
+    /// @dev since the function is external and enters a new call context and exits right after execution, Solidity's memory management convention can be disregarded and a direct slice of memory can be returned
+    function extsload(bytes32[] calldata slots) external view returns (bytes32[] memory) {
+        assembly ("memory-safe") {
+            // abi offset for dynamic array
+            mstore(0, 0x20)
+            mstore(0x20, slots.length)
+            let end := add(0x40, shl(5, slots.length))
+            let memptr := 0x40
+            let calldataptr := slots.offset
+            for {} 1 {} {
+                mstore(memptr, sload(calldataload(calldataptr)))
+                memptr := add(memptr, 0x20)
+                calldataptr := add(calldataptr, 0x20)
+                if iszero(lt(memptr, end)) { break }
+            }
+            return(0, end)
+        }
+    }
 }
