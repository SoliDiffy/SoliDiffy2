diff --git a/contracts/UniswapV3Pair.sol b/contracts/UniswapV3Pair.sol
index 73cb0d08..22070d4a 100644
--- a/contracts/UniswapV3Pair.sol
+++ b/contracts/UniswapV3Pair.sol
@@ -59,8 +59,8 @@ contract UniswapV3Pair is IUniswapV3Pair {
     // the amount of virtual supply active within the current tick, for each fee vote
     uint112[NUM_FEE_OPTIONS] public override virtualSupplies;
 
-    FixedPoint.uq144x112 private price0CumulativeLast; // cumulative (reserve1Virtual / reserve0Virtual) oracle price
-    FixedPoint.uq144x112 private price1CumulativeLast; // cumulative (reserve0Virtual / reserve1Virtual) oracle price
+    FixedPoint.uq144x112 internal price0CumulativeLast; // cumulative (reserve1Virtual / reserve0Virtual) oracle price
+    FixedPoint.uq144x112 internal price1CumulativeLast; // cumulative (reserve0Virtual / reserve1Virtual) oracle price
     
     struct TickInfo {
         // fee growth on the _other_ side of this tick (relative to the current tick)
@@ -189,8 +189,8 @@ contract UniswapV3Pair is IUniswapV3Pair {
         amount1 = FixedPointExtra.muli(price, amount0).itoInt112();
     }
 
-    constructor(address _factory, address _token0, address _token1) public {
-        factory = _factory;
+    constructor(address _token0, address _token1) public {
+        factory = msg.sender;
         token0 = _token0;
         token1 = _token1;
         // initialize min and max ticks
@@ -200,16 +200,9 @@ contract UniswapV3Pair is IUniswapV3Pair {
         tick.growthOutside = FixedPoint.encode(1);
     }
 
-    // returns the block timestamp % 2**32.
-    // the timestamp is truncated to 32 bits because the pair only ever uses it for relative timestamp computations.
-    // overridden for tests.
-    function _blockTimestamp() internal virtual view returns (uint32) {
-        return uint32(block.timestamp); // truncation is desired
-    }
-
     // update reserves and, on the first interaction per block, price accumulators
-    function _update() private {
-        uint32 blockTimestamp = _blockTimestamp();
+    function _update() internal {
+        uint32 blockTimestamp = uint32(block.timestamp); // truncation is desired
         uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired
         if (timeElapsed > 0) {
             (price0CumulativeLast, price1CumulativeLast) = getCumulativePrices();
@@ -243,7 +236,7 @@ contract UniswapV3Pair is IUniswapV3Pair {
         // initialize reserves and oracle timestamp
         reserve0Virtual = amount0;
         reserve1Virtual = amount1;
-        blockTimestampLast = _blockTimestamp();
+        blockTimestampLast = uint32(block.timestamp);
 
         // initialize tick
         tickCurrent = tick;
@@ -274,7 +267,7 @@ contract UniswapV3Pair is IUniswapV3Pair {
             // by convention, we assume that all growth before a tick was initialized happened _below_ the tick
             if (tick <= tickCurrent) {
                 tickInfo.growthOutside = getG();
-                tickInfo.secondsOutside = _blockTimestamp();
+                tickInfo.secondsOutside = uint32(block.timestamp);
             } else {
                 tickInfo.growthOutside = FixedPoint.encode(1);
             }
@@ -514,7 +507,7 @@ contract UniswapV3Pair is IUniswapV3Pair {
                 // update tick info
                 // overflow is desired
                 tickInfo.growthOutside = FixedPointExtra.divuq(getG(), tickInfo.growthOutside);
-                tickInfo.secondsOutside = _blockTimestamp() - tickInfo.secondsOutside;
+                tickInfo.secondsOutside = uint32(block.timestamp) - tickInfo.secondsOutside;
 
                 tickCurrent -= 1;
             }
@@ -530,19 +523,17 @@ contract UniswapV3Pair is IUniswapV3Pair {
         FixedPoint.uq144x112 memory price0Cumulative,
         FixedPoint.uq144x112 memory price1Cumulative
     ) {
-        uint32 blockTimestamp = _blockTimestamp();
+        uint32 blockTimestamp = uint32(block.timestamp);
 
         if (blockTimestampLast != blockTimestamp) {
             uint32 timeElapsed = blockTimestamp - blockTimestampLast;
             price0Cumulative = FixedPoint.uq144x112(
                 price0CumulativeLast._x + FixedPoint.fraction(reserve1Virtual, reserve0Virtual).mul(timeElapsed)._x
             );
+
             price1Cumulative = FixedPoint.uq144x112(
                 price1CumulativeLast._x + FixedPoint.fraction(reserve0Virtual, reserve1Virtual).mul(timeElapsed)._x
             );
-        } else {
-            price0Cumulative = price0CumulativeLast;
-            price1Cumulative = price1CumulativeLast;
         }
     }
 }
