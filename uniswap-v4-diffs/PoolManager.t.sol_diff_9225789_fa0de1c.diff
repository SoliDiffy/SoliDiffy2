diff --git a/test/PoolManager.t.sol b/test/PoolManager.t.sol
index 6147c9cc..5d2f8786 100644
--- a/test/PoolManager.t.sol
+++ b/test/PoolManager.t.sol
@@ -381,23 +381,27 @@ contract PoolManagerTest is Test, Deployers, GasSnapshot {
     }
 
     function test_addLiquidity_gas() public {
+        snapStart("addLiquidity");
         modifyLiquidityRouter.modifyLiquidity(key, LIQ_PARAMS, ZERO_BYTES);
-        snapLastCall("addLiquidity");
+        snapEnd();
     }
 
     function test_removeLiquidity_gas() public {
+        snapStart("removeLiquidity");
         modifyLiquidityRouter.modifyLiquidity(key, REMOVE_LIQ_PARAMS, ZERO_BYTES);
-        snapLastCall("removeLiquidity");
+        snapEnd();
     }
 
     function test_addLiquidity_withNative_gas() public {
+        snapStart("addLiquidity with native token");
         modifyLiquidityRouter.modifyLiquidity{value: 1 ether}(nativeKey, LIQ_PARAMS, ZERO_BYTES);
-        snapLastCall("addLiquidity with native token");
+        snapEnd();
     }
 
     function test_removeLiquidity_withNative_gas() public {
+        snapStart("removeLiquidity with native token");
         modifyLiquidityRouter.modifyLiquidity{value: 1 ether}(nativeKey, REMOVE_LIQ_PARAMS, ZERO_BYTES);
-        snapLastCall("removeLiquidity with native token");
+        snapEnd();
     }
 
     function test_addLiquidity_withHooks_gas() public {
@@ -408,8 +412,9 @@ contract PoolManagerTest is Test, Deployers, GasSnapshot {
 
         (key,) = initPool(currency0, currency1, mockHooks, 3000, SQRT_RATIO_1_1, ZERO_BYTES);
 
+        snapStart("addLiquidity with empty hook");
         modifyLiquidityRouter.modifyLiquidity(key, LIQ_PARAMS, ZERO_BYTES);
-        snapLastCall("addLiquidity with empty hook");
+        snapEnd();
     }
 
     function test_removeLiquidity_withHooks_gas() public {
@@ -421,8 +426,9 @@ contract PoolManagerTest is Test, Deployers, GasSnapshot {
         (key,) = initPool(currency0, currency1, mockHooks, 3000, SQRT_RATIO_1_1, ZERO_BYTES);
         modifyLiquidityRouter.modifyLiquidity(key, LIQ_PARAMS, ZERO_BYTES);
 
+        snapStart("removeLiquidity with empty hook");
         modifyLiquidityRouter.modifyLiquidity(key, REMOVE_LIQ_PARAMS, ZERO_BYTES);
-        snapLastCall("removeLiquidity with empty hook");
+        snapEnd();
     }
 
     function test_swap_failsIfNotInitialized(uint160 sqrtPriceX96) public {
@@ -575,8 +581,9 @@ contract PoolManagerTest is Test, Deployers, GasSnapshot {
         PoolSwapTest.TestSettings memory testSettings =
             PoolSwapTest.TestSettings({takeClaims: false, settleUsingBurn: false});
 
+        snapStart("simple swap");
         swapRouter.swap(key, swapParams, testSettings, ZERO_BYTES);
-        snapLastCall("simple swap");
+        snapEnd();
     }
 
     function test_swap_withNative_gas() public {
@@ -586,8 +593,9 @@ contract PoolManagerTest is Test, Deployers, GasSnapshot {
         PoolSwapTest.TestSettings memory testSettings =
             PoolSwapTest.TestSettings({takeClaims: false, settleUsingBurn: false});
 
+        snapStart("simple swap with native");
         swapRouter.swap{value: 100}(nativeKey, swapParams, testSettings, ZERO_BYTES);
-        snapLastCall("simple swap with native");
+        snapEnd();
     }
 
     function test_swap_withHooks_gas() public {
@@ -611,8 +619,9 @@ contract PoolManagerTest is Test, Deployers, GasSnapshot {
             IPoolManager.SwapParams({zeroForOne: true, amountSpecified: -100, sqrtPriceLimitX96: SQRT_RATIO_1_4});
         testSettings = PoolSwapTest.TestSettings({takeClaims: false, settleUsingBurn: false});
 
+        snapStart("swap with hooks");
         swapRouter.swap(key, swapParams, testSettings, ZERO_BYTES);
-        snapLastCall("swap with hooks");
+        snapEnd();
     }
 
     function test_swap_mint6909IfOutputNotTaken_gas() public {
@@ -624,8 +633,9 @@ contract PoolManagerTest is Test, Deployers, GasSnapshot {
 
         vm.expectEmit();
         emit Transfer(address(swapRouter), address(0), address(this), CurrencyLibrary.toId(currency1), 98);
+        snapStart("swap mint output as 6909");
         swapRouter.swap(key, params, testSettings, ZERO_BYTES);
-        snapLastCall("swap mint output as 6909");
+        snapEnd();
 
         uint256 erc6909Balance = manager.balanceOf(address(this), CurrencyLibrary.toId(currency1));
         assertEq(erc6909Balance, 98);
@@ -640,8 +650,9 @@ contract PoolManagerTest is Test, Deployers, GasSnapshot {
 
         vm.expectEmit();
         emit Transfer(address(swapRouter), address(0), address(this), CurrencyLibrary.toId(CurrencyLibrary.NATIVE), 98);
+        snapStart("swap mint native output as 6909");
         swapRouter.swap(nativeKey, params, testSettings, ZERO_BYTES);
-        snapLastCall("swap mint native output as 6909");
+        snapEnd();
 
         uint256 erc6909Balance = manager.balanceOf(address(this), CurrencyLibrary.toId(CurrencyLibrary.NATIVE));
         assertEq(erc6909Balance, 98);
@@ -670,8 +681,9 @@ contract PoolManagerTest is Test, Deployers, GasSnapshot {
 
         vm.expectEmit();
         emit Transfer(address(swapRouter), address(this), address(0), CurrencyLibrary.toId(currency1), 27);
+        snapStart("swap burn 6909 for input");
         swapRouter.swap(key, params, testSettings, ZERO_BYTES);
-        snapLastCall("swap burn 6909 for input");
+        snapEnd();
 
         erc6909Balance = manager.balanceOf(address(this), CurrencyLibrary.toId(currency1));
         assertEq(erc6909Balance, 71);
@@ -700,9 +712,10 @@ contract PoolManagerTest is Test, Deployers, GasSnapshot {
 
         vm.expectEmit();
         emit Transfer(address(swapRouter), address(this), address(0), CurrencyLibrary.toId(CurrencyLibrary.NATIVE), 27);
+        snapStart("swap burn native 6909 for input");
         // don't have to send in native currency since burning 6909 for input
         swapRouter.swap(nativeKey, params, testSettings, ZERO_BYTES);
-        snapLastCall("swap burn native 6909 for input");
+        snapEnd();
 
         erc6909Balance = manager.balanceOf(address(this), CurrencyLibrary.toId(CurrencyLibrary.NATIVE));
         assertEq(erc6909Balance, 71);
@@ -719,8 +732,9 @@ contract PoolManagerTest is Test, Deployers, GasSnapshot {
 
         params = IPoolManager.SwapParams({zeroForOne: true, amountSpecified: -100, sqrtPriceLimitX96: SQRT_RATIO_1_4});
 
+        snapStart("swap against liquidity");
         swapRouter.swap(key, params, testSettings, ZERO_BYTES);
-        snapLastCall("swap against liquidity");
+        snapEnd();
     }
 
     function test_swap_againstLiqWithNative_gas() public {
@@ -734,8 +748,9 @@ contract PoolManagerTest is Test, Deployers, GasSnapshot {
 
         params = IPoolManager.SwapParams({zeroForOne: true, amountSpecified: -100, sqrtPriceLimitX96: SQRT_RATIO_1_4});
 
+        snapStart("swap against liquidity with native token");
         swapRouter.swap{value: 1 ether}(nativeKey, params, testSettings, ZERO_BYTES);
-        snapLastCall("swap against liquidity with native token");
+        snapEnd();
     }
 
     function test_swap_accruesProtocolFees(uint16 protocolFee0, uint16 protocolFee1, int256 amountSpecified) public {
@@ -803,8 +818,9 @@ contract PoolManagerTest is Test, Deployers, GasSnapshot {
         assertEq(feeGrowthGlobal0X128, 0);
         assertEq(feeGrowthGlobal1X128, 0);
 
+        snapStart("donate gas with 2 tokens");
         donateRouter.donate(key, 100, 200, ZERO_BYTES);
-        snapLastCall("donate gas with 2 tokens");
+        snapEnd();
 
         (feeGrowthGlobal0X128, feeGrowthGlobal1X128) = manager.getFeeGrowthGlobals(key.toId());
         assertEq(feeGrowthGlobal0X128, 34028236692093846346337);
@@ -861,8 +877,9 @@ contract PoolManagerTest is Test, Deployers, GasSnapshot {
     }
 
     function test_donate_OneToken_gas() public {
+        snapStart("donate gas with 1 token");
         donateRouter.donate(key, 100, 0, ZERO_BYTES);
-        snapLastCall("donate gas with 1 token");
+        snapEnd();
     }
 
     function test_take_failsWithNoLiquidity() public {
@@ -1002,8 +1019,9 @@ contract PoolManagerTest is Test, Deployers, GasSnapshot {
         assertEq(manager.protocolFeesAccrued(currency1), 0);
         assertEq(currency0.balanceOf(address(1)), 0);
         vm.prank(address(feeController));
+        snapStart("erc20 collect protocol fees");
         manager.collectProtocolFees(address(1), currency0, expectedFees);
-        snapLastCall("erc20 collect protocol fees");
+        snapEnd();
         assertEq(currency0.balanceOf(address(1)), expectedFees);
         assertEq(manager.protocolFeesAccrued(currency0), 0);
     }
@@ -1028,7 +1046,9 @@ contract PoolManagerTest is Test, Deployers, GasSnapshot {
         assertEq(manager.protocolFeesAccrued(currency1), 0);
         assertEq(currency0.balanceOf(address(1)), 0);
         vm.prank(address(feeController));
+        snapStart("erc20 collect protocol fees");
         manager.collectProtocolFees(address(1), currency0, expectedFees);
+        snapEnd();
         assertEq(currency0.balanceOf(address(1)), expectedFees);
         assertEq(manager.protocolFeesAccrued(currency0), 0);
     }
@@ -1079,8 +1099,9 @@ contract PoolManagerTest is Test, Deployers, GasSnapshot {
         assertEq(manager.protocolFeesAccrued(currency1), 0);
         assertEq(nativeCurrency.balanceOf(address(1)), 0);
         vm.prank(address(feeController));
+        snapStart("native collect protocol fees");
         manager.collectProtocolFees(address(1), nativeCurrency, expectedFees);
-        snapLastCall("native collect protocol fees");
+        snapEnd();
         assertEq(nativeCurrency.balanceOf(address(1)), expectedFees);
         assertEq(manager.protocolFeesAccrued(nativeCurrency), 0);
     }
@@ -1140,8 +1161,9 @@ contract PoolManagerTest is Test, Deployers, GasSnapshot {
     //     manager.initialize(key, SQRT_RATIO_1_1, ZERO_BYTES);
 
     //     PoolId poolId = key.toId();
+    //     snapStart("poolExtsloadSlot0");
     //     bytes32 slot0Bytes = manager.extsload(keccak256(abi.encode(poolId, POOL_SLOT)));
-    //     snapLastCall("poolExtsloadSlot0");
+    //     snapEnd();
 
     //     uint160 sqrtPriceX96Extsload;
     //     assembly {
@@ -1177,8 +1199,9 @@ contract PoolManagerTest is Test, Deployers, GasSnapshot {
     //     );
 
     //     PoolId poolId = key.toId();
+    //     snapStart("poolExtsloadTickInfoStruct");
     //     bytes memory value = manager.extsload(bytes32(uint256(keccak256(abi.encode(poolId, POOL_SLOT))) + 1), 2);
-    //     snapLastCall("poolExtsloadTickInfoStruct");
+    //     snapEnd();
 
     //     uint256 feeGrowthGlobal0X128Extsload;
     //     uint256 feeGrowthGlobal1X128Extsload;
