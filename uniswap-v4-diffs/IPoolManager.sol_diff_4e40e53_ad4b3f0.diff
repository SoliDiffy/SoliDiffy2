diff --git a/src/interfaces/IPoolManager.sol b/src/interfaces/IPoolManager.sol
index b3b85b8f..b3548596 100644
--- a/src/interfaces/IPoolManager.sol
+++ b/src/interfaces/IPoolManager.sol
@@ -3,16 +3,15 @@ pragma solidity ^0.8.24;
 
 import {Currency} from "../types/Currency.sol";
 import {PoolKey} from "../types/PoolKey.sol";
-import {Pool} from "../libraries/Pool.sol";
 import {IHooks} from "./IHooks.sol";
 import {IERC6909Claims} from "./external/IERC6909Claims.sol";
 import {IProtocolFees} from "./IProtocolFees.sol";
 import {BalanceDelta} from "../types/BalanceDelta.sol";
 import {PoolId} from "../types/PoolId.sol";
-import {Position} from "../libraries/Position.sol";
 import {IExtsload} from "./IExtsload.sol";
 import {IExttload} from "./IExttload.sol";
 
+/// @notice Interface for the PoolManager
 interface IPoolManager is IProtocolFees, IERC6909Claims, IExtsload, IExttload {
     /// @notice Thrown when a currency is not netted out after the contract is unlocked
     error CurrencyNotSettled();
@@ -45,9 +44,6 @@ interface IPoolManager is IProtocolFees, IERC6909Claims, IExtsload, IExttload {
     ///@notice Thrown when native currency is passed to a non native settlement
     error NonZeroNativeValue();
 
-    /// @notice Thrown when `clear` is called with an amount that is not exactly equal to the open currency delta.
-    error MustClearExactPositiveDelta();
-
     /// @notice Emitted when a new pool is initialized
     /// @param id The abi encoded hash of the pool key struct for the new pool
     /// @param currency0 The first currency of the pool by address sort order
@@ -89,22 +85,33 @@ interface IPoolManager is IProtocolFees, IERC6909Claims, IExtsload, IExttload {
         uint24 fee
     );
 
-    /// @notice Returns the constant representing the maximum tickSpacing for an initialized pool key
+    /// @return int24 the constant representing the maximum tickSpacing for an initialized pool key
     function MAX_TICK_SPACING() external view returns (int24);
 
-    /// @notice Returns the constant representing the minimum tickSpacing for an initialized pool key
+    /// @return int24 the constant representing the minimum tickSpacing for an initialized pool key
     function MIN_TICK_SPACING() external view returns (int24);
 
-    /// @notice All operations go through this function
-    /// @param data Any data to pass to the callback, via `IUnlockCallback(msg.sender).unlockCallback(data)`
-    /// @return The data returned by the call to `IUnlockCallback(msg.sender).unlockCallback(data)`
-    function unlock(bytes calldata data) external returns (bytes memory);
+    /// @notice Writes the current ERC20 balance of the specified currency to transient storage
+    /// This is used to checkpoint balances for the manager and derive deltas for the caller.
+    /// @dev This MUST be called before any ERC20 tokens are sent into the contract, but can be skipped
+    /// for native tokens because the amount to settle is determined by the sent value.
+    /// @param currency The currency whose balance to sync
+    function sync(Currency currency) external;
 
     /// @notice Initialize the state for a given pool ID
+    /// @param key The pool key for the pool to initialize
+    /// @param sqrtPriceX96 The initial square root price
+    /// @param hookData The data to pass through to the initialize hooks
+    /// @return tick The initial tick of the pool
     function initialize(PoolKey memory key, uint160 sqrtPriceX96, bytes calldata hookData)
         external
         returns (int24 tick);
 
+    /// @notice All operations go through this function
+    /// @param data Any data to pass to the callback, via `IUnlockCallback(msg.sender).unlockCallback(data)`
+    /// @return bytes The data returned by the call to `IUnlockCallback(msg.sender).unlockCallback(data)`
+    function unlock(bytes calldata data) external returns (bytes memory);
+
     struct ModifyLiquidityParams {
         // the lower and upper tick of the position
         int24 tickLower;
@@ -119,7 +126,7 @@ interface IPoolManager is IProtocolFees, IERC6909Claims, IExtsload, IExttload {
     /// @dev Poke by calling with a zero liquidityDelta
     /// @param key The pool to modify liquidity in
     /// @param params The parameters for modifying the liquidity
-    /// @param hookData Any data to pass to the callback, via `IUnlockCallback(msg.sender).unlockCallback(data)`
+    /// @param hookData The data to pass through to the add/removeLiquidity hooks
     /// @return callerDelta The balance delta of the caller of modifyLiquidity. This is the total of both principal and fee deltas.
     /// @return feeDelta The balance delta of the fees generated in the liquidity range. Returned for informational purposes.
     function modifyLiquidity(PoolKey memory key, ModifyLiquidityParams memory params, bytes calldata hookData)
@@ -135,7 +142,7 @@ interface IPoolManager is IProtocolFees, IERC6909Claims, IExtsload, IExttload {
     /// @notice Swap against the given pool
     /// @param key The pool to swap in
     /// @param params The parameters for swapping
-    /// @param hookData Any data to pass to the callback, via `IUnlockCallback(msg.sender).unlockCallback(data)`
+    /// @param hookData The data to pass through to the swap hooks
     /// @return swapDelta The balance delta of the address swapping
     /// @dev Swapping on low liquidity pools may cause unexpected swap amounts when liquidity available is less than amountSpecified.
     /// Additionally note that if interacting with hooks that have the BEFORE_SWAP_RETURNS_DELTA_FLAG or AFTER_SWAP_RETURNS_DELTA_FLAG
@@ -145,34 +152,49 @@ interface IPoolManager is IProtocolFees, IERC6909Claims, IExtsload, IExttload {
         returns (BalanceDelta);
 
     /// @notice Donate the given currency amounts to the pool with the given pool key
+    /// @param key The key of the pool to donate to
+    /// @param amount0 The amount of currency0 to donate
+    /// @param amount1 The amount of currency1 to donate
+    /// @param hookData The data to pass through to the donate hooks
+    /// @return BalanceDelta The delta of the caller after the donate
     function donate(PoolKey memory key, uint256 amount0, uint256 amount1, bytes calldata hookData)
         external
         returns (BalanceDelta);
 
-    /// @notice Writes the current ERC20 balance of the specified currency to transient storage
-    /// This is used to checkpoint balances for the manager and derive deltas for the caller.
-    /// @dev This MUST be called before any ERC20 tokens are sent into the contract.
-    function sync(Currency currency) external returns (uint256 balance);
-
     /// @notice Called by the user to net out some value owed to the user
     /// @dev Can also be used as a mechanism for _free_ flash loans
+    /// @param currency The currency to withdraw from the pool manager
+    /// @param to The address to withdraw to
+    /// @param amount The amount of currency to withdraw
     function take(Currency currency, address to, uint256 amount) external;
 
-    /// @notice Called by the user to pay what is owed
-    function settle(Currency currency) external payable returns (uint256 paid);
-
-    /// @notice WARNING - Any currency that is cleared, will be non-retreivable, and locked in the contract permanently.
-    /// A call to clear will zero out a positive balance WITHOUT a corresponding transfer.
-    /// @dev This could be used to clear a balance that is considered dust.
-    /// Additionally, the amount must be the exact positive balance. This is to enforce that the caller is aware of the amount being cleared.
-    function clear(Currency currency, uint256 amount) external;
-
     /// @notice Called by the user to move value into ERC6909 balance
+    /// @param to The address to mint the tokens to
+    /// @param id The currency address to mint to ERC6909s, as a uint256
+    /// @param amount The amount of currency to mint
+    /// @dev The id is converted to a uint160 to correspond to a currency address
+    /// If the upper 12 bytes are not 0, they will be 0-ed out
     function mint(address to, uint256 id, uint256 amount) external;
 
     /// @notice Called by the user to move value from ERC6909 balance
+    /// @param from The address to burn the tokens from
+    /// @param id The currency address to burn from ERC6909s, as a uint256
+    /// @param amount The amount of currency to burn
+    /// @dev The id is converted to a uint160 to correspond to a currency address
+    /// If the upper 12 bytes are not 0, they will be 0-ed out
     function burn(address from, uint256 id, uint256 amount) external;
 
+    /// @notice Called by the user to pay what is owed
+    /// @return paid The amount of currency settled
+    function settle() external payable returns (uint256 paid);
+
+    /// @notice Called by the user to pay on behalf of another address
+    /// @param recipient The address to credit for the payment
+    /// @return paid The amount of currency settled
+    function settleFor(address recipient) external payable returns (uint256 paid);
+
     /// @notice Updates the pools lp fees for the a pool that has enabled dynamic lp fees.
+    /// @param key The key of the pool to update dynamic LP fees for
+    /// @param newDynamicLPFee The new dynamic pool LP fee
     function updateDynamicLPFee(PoolKey memory key, uint24 newDynamicLPFee) external;
 }
