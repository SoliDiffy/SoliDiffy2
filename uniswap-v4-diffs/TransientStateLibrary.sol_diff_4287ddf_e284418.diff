diff --git a/src/libraries/TransientStateLibrary.sol b/src/libraries/TransientStateLibrary.sol
index 2658f884..04874834 100644
--- a/src/libraries/TransientStateLibrary.sol
+++ b/src/libraries/TransientStateLibrary.sol
@@ -1,30 +1,41 @@
 // SPDX-License-Identifier: MIT
-pragma solidity ^0.8.21;
+pragma solidity ^0.8.24;
 
+import {PoolId} from "../types/PoolId.sol";
 import {IPoolManager} from "../interfaces/IPoolManager.sol";
 import {Currency} from "../types/Currency.sol";
-import {CurrencyReserves} from "./CurrencyReserves.sol";
-import {NonZeroDeltaCount} from "./NonZeroDeltaCount.sol";
-import {Lock} from "./Lock.sol";
+import {Position} from "./Position.sol";
 
 library TransientStateLibrary {
-    /// @notice returns the reserves for the synced currency
-    /// @param manager The pool manager contract.
-    /// @return uint256 The reserves of the currency.
-    /// @dev returns 0 if the reserves are not synced or value is 0.
-    /// Checks the synced currency to only return valid reserve values (after a sync and before a settle).
-    function getSyncedReserves(IPoolManager manager) internal view returns (uint256) {
-        if (getSyncedCurrency(manager).isZero()) return 0;
-        return uint256(manager.exttload(CurrencyReserves.RESERVES_OF_SLOT));
-    }
+    /// bytes32(uint256(keccak256("ReservesOf")) - 1)
+    bytes32 public constant RESERVES_OF_SLOT = 0x1e0745a7db1623981f0b2a5d4232364c00787266eb75ad546f190e6cebe9bd95;
+
+    // The slot holding the number of nonzero deltas. bytes32(uint256(keccak256("NonzeroDeltaCount")) - 1)
+    bytes32 public constant NONZERO_DELTA_COUNT_SLOT =
+        0x7d4b3164c6e45b97e7d87b7125a44c5828d005af88f9d751cfd78729c5d99a0b;
 
-    function getSyncedCurrency(IPoolManager manager) internal view returns (Currency) {
-        return Currency.wrap(address(uint160(uint256(manager.exttload(CurrencyReserves.CURRENCY_SLOT)))));
+    // The slot holding the unlocked state, transiently. bytes32(uint256(keccak256("Unlocked")) - 1)
+    bytes32 public constant IS_UNLOCKED_SLOT = 0xc090fc4683624cfc3884e9d8de5eca132f2d0ec062aff75d43c0465d5ceeab23;
+
+    /// @notice returns the reserves of a currency
+    /// @param manager The pool manager contract.
+    /// @param currency The currency to get the reserves for.
+    /// @return value The reserves of the currency.
+    /// @dev returns 0 if the reserves are not synced
+    /// @dev returns type(uint256).max if the reserves are synced but the value is 0
+    function getReserves(IPoolManager manager, Currency currency) internal view returns (uint256) {
+        bytes32 key;
+        assembly ("memory-safe") {
+            mstore(0, RESERVES_OF_SLOT)
+            mstore(32, currency)
+            key := keccak256(0, 64)
+        }
+        return uint256(manager.exttload(key));
     }
 
     /// @notice Returns the number of nonzero deltas open on the PoolManager that must be zerod out before the contract is locked
     function getNonzeroDeltaCount(IPoolManager manager) internal view returns (uint256) {
-        return uint256(manager.exttload(NonZeroDeltaCount.NONZERO_DELTA_COUNT_SLOT));
+        return uint256(manager.exttload(NONZERO_DELTA_COUNT_SLOT));
     }
 
     /// @notice Get the current delta for a caller in the given currency
@@ -42,6 +53,6 @@ library TransientStateLibrary {
 
     /// @notice Returns whether the contract is unlocked or not
     function isUnlocked(IPoolManager manager) internal view returns (bool) {
-        return manager.exttload(Lock.IS_UNLOCKED_SLOT) != 0x0;
+        return manager.exttload(IS_UNLOCKED_SLOT) != 0x0;
     }
 }
