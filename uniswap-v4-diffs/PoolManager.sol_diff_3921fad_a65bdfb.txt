diff --git a/src/PoolManager.sol b/src/PoolManager.sol
index 2347f768..71870daf 100644
--- a/src/PoolManager.sol
+++ b/src/PoolManager.sol
@@ -8,7 +8,6 @@ import {Position} from "./libraries/Position.sol";
 import {FeeLibrary} from "./libraries/FeeLibrary.sol";
 import {Currency, CurrencyLibrary} from "./types/Currency.sol";
 import {PoolKey} from "./types/PoolKey.sol";
-import {LockDataLibrary} from "./libraries/LockDataLibrary.sol";
 import {NoDelegateCall} from "./NoDelegateCall.sol";
 import {Owned} from "./Owned.sol";
 import {IHooks} from "./interfaces/IHooks.sol";
@@ -20,6 +19,7 @@ import {Fees} from "./Fees.sol";
 import {Claims} from "./Claims.sol";
 import {PoolId, PoolIdLibrary} from "./types/PoolId.sol";
 import {BalanceDelta} from "./types/BalanceDelta.sol";
+import {Lockers} from "./libraries/Lockers.sol";
 
 /// @notice Holds the state for all pools
 contract PoolManager is IPoolManager, Fees, NoDelegateCall, Claims {
@@ -29,7 +29,6 @@ contract PoolManager is IPoolManager, Fees, NoDelegateCall, Claims {
     using Hooks for IHooks;
     using Position for mapping(bytes32 => Position.Info);
     using CurrencyLibrary for Currency;
-    using LockDataLibrary for IPoolManager.LockData;
     using FeeLibrary for uint24;
 
     /// @inheritdoc IPoolManager
@@ -38,9 +37,6 @@ contract PoolManager is IPoolManager, Fees, NoDelegateCall, Claims {
     /// @inheritdoc IPoolManager
     int24 public constant override MIN_TICK_SPACING = 1;
 
-    /// @inheritdoc IPoolManager
-    IPoolManager.LockData public override lockData;
-
     /// @dev Represents the currencies due/owed to each locker.
     /// Must all net to zero when the last lock is released.
     mapping(address locker => mapping(Currency currency => int256 currencyDelta)) public currencyDelta;
@@ -94,7 +90,7 @@ contract PoolManager is IPoolManager, Fees, NoDelegateCall, Claims {
 
     /// @inheritdoc IPoolManager
     function getLock(uint256 i) external view override returns (address locker) {
-        return LockDataLibrary.getLock(i);
+        return Lockers.getLocker(i);
     }
 
     /// @inheritdoc IPoolManager
@@ -139,31 +135,31 @@ contract PoolManager is IPoolManager, Fees, NoDelegateCall, Claims {
 
     /// @inheritdoc IPoolManager
     function lock(bytes calldata data) external override returns (bytes memory result) {
-        lockData.push(msg.sender);
+        Lockers.push(msg.sender);
 
         // the caller does everything in this callback, including paying what they owe via calls to settle
         result = ILockCallback(msg.sender).lockAcquired(data);
 
-        if (lockData.length == 1) {
-            if (lockData.nonzeroDeltaCount != 0) revert CurrencyNotSettled();
-            delete lockData;
+        if (Lockers.length() == 1) {
+            if (Lockers.nonzeroDeltaCount() != 0) revert CurrencyNotSettled();
+            Lockers.clear();
         } else {
-            lockData.pop();
+            Lockers.pop();
         }
     }
 
     function _accountDelta(Currency currency, int128 delta) internal {
         if (delta == 0) return;
 
-        address locker = lockData.getActiveLock();
+        address locker = Lockers.getCurrentLocker();
         int256 current = currencyDelta[locker][currency];
         int256 next = current + delta;
 
         unchecked {
             if (next == 0) {
-                lockData.nonzeroDeltaCount--;
+                Lockers.decrementNonzeroDeltaCount();
             } else if (current == 0) {
-                lockData.nonzeroDeltaCount++;
+                Lockers.incrementNonzeroDeltaCount();
             }
         }
 
@@ -177,7 +173,7 @@ contract PoolManager is IPoolManager, Fees, NoDelegateCall, Claims {
     }
 
     modifier onlyByLocker() {
-        address locker = lockData.getActiveLock();
+        address locker = Lockers.getCurrentLocker();
         if (msg.sender != locker) revert LockedBy(locker);
         _;
     }
@@ -388,6 +384,14 @@ contract PoolManager is IPoolManager, Fees, NoDelegateCall, Claims {
         return value;
     }
 
+    function getLockLength() external view returns (uint256 _length) {
+        return Lockers.length();
+    }
+
+    function getLockNonzeroDeltaCount() external view returns (uint256 _nonzeroDeltaCount) {
+        return Lockers.nonzeroDeltaCount();
+    }
+
     /// @notice receive native tokens for native pools
     receive() external payable {}
 }
