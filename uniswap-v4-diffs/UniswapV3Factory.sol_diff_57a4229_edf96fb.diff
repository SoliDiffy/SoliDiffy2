diff --git a/contracts/UniswapV3Factory.sol b/contracts/UniswapV3Factory.sol
index cc7bad68..4a00f444 100644
--- a/contracts/UniswapV3Factory.sol
+++ b/contracts/UniswapV3Factory.sol
@@ -30,30 +30,28 @@ contract UniswapV3Factory is IUniswapV3Factory, UniswapV3PairDeployer, NoDelegat
         address tokenB,
         uint24 fee
     ) external override noDelegateCall returns (address pair) {
-        require(tokenA != tokenB, 'A=B');
+        require(tokenA != tokenB);
         (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);
-        require(token0 != address(0), 'A=0');
+        require(token0 != address(0));
         int24 tickSpacing = feeAmountTickSpacing[fee];
-        require(tickSpacing != 0, 'FNA');
-        require(getPair[token0][token1][fee] == address(0), 'PAE');
+        require(tickSpacing != 0, 'T');
+        require(getPair[token0][token1][fee] == address(0), 'E');
         pair = deploy(address(this), token0, token1, fee, tickSpacing);
         getPair[token0][token1][fee] = pair;
-        // populate mapping in the reverse direction, deliberate choice to avoid the cost of comparing addresses
-        getPair[token1][token0][fee] = pair;
         emit PairCreated(token0, token1, fee, tickSpacing, pair);
     }
 
     function setOwner(address _owner) external override {
-        require(msg.sender == owner, 'OO');
+        require(msg.sender == owner);
         emit OwnerChanged(owner, _owner);
         owner = _owner;
     }
 
     function enableFeeAmount(uint24 fee, int24 tickSpacing) public override {
-        require(msg.sender == owner, 'OO');
-        require(fee < 1000000, 'FEE');
-        require(tickSpacing > 0, 'TS');
-        require(feeAmountTickSpacing[fee] == 0, 'FAI');
+        require(msg.sender == owner);
+        require(fee < 1000000);
+        require(tickSpacing > 0);
+        require(feeAmountTickSpacing[fee] == 0);
 
         feeAmountTickSpacing[fee] = tickSpacing;
         emit FeeAmountEnabled(fee, tickSpacing);
