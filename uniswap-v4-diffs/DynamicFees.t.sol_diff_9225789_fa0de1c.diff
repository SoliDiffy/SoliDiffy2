diff --git a/test/DynamicFees.t.sol b/test/DynamicFees.t.sol
index 2223ee28..778b9a36 100644
--- a/test/DynamicFees.t.sol
+++ b/test/DynamicFees.t.sol
@@ -144,8 +144,9 @@ contract TestDynamicFees is Test, Deployers, GasSnapshot {
         vm.expectEmit(true, true, true, true, address(manager));
         emit Swap(key.toId(), address(swapRouter), -100, 98, 79228162514264329749955861424, 1e18, -1, 123);
 
+        snapStart("update dynamic fee in before swap");
         swapRouter.swap(key, params, testSettings, ZERO_BYTES);
-        snapLastCall("update dynamic fee in before swap");
+        snapEnd();
 
         assertEq(_fetchPoolLPFee(key), 123);
     }
@@ -234,8 +235,9 @@ contract TestDynamicFees is Test, Deployers, GasSnapshot {
         vm.expectEmit(true, true, true, true, address(manager));
         emit Swap(key.toId(), address(swapRouter), -101000000, 100, 79228162514264329670727698909, 1e18, -1, 999999);
 
+        snapStart("swap with lp fee and protocol fee");
         BalanceDelta delta = swapRouter.swap(key, params, testSettings, ZERO_BYTES);
-        snapLastCall("swap with lp fee and protocol fee");
+        snapEnd();
 
         uint256 expectedProtocolFee = uint256(uint128(-delta.amount0())) * 1000 / 1e6;
         assertEq(manager.protocolFeesAccrued(currency0), expectedProtocolFee);
@@ -333,8 +335,9 @@ contract TestDynamicFees is Test, Deployers, GasSnapshot {
         vm.expectEmit(true, true, true, true, address(manager));
         emit Swap(key.toId(), address(swapRouter), -100, 98, 79228162514264329749955861424, 1e18, -1, 123);
 
+        snapStart("swap with dynamic fee");
         swapRouter.swap(key, params, testSettings, ZERO_BYTES);
-        snapLastCall("swap with dynamic fee");
+        snapEnd();
     }
 
     function _fetchPoolLPFee(PoolKey memory _key) internal view returns (uint256 lpFee) {
