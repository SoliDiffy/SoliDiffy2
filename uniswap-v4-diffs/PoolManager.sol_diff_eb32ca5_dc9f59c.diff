diff --git a/src/PoolManager.sol b/src/PoolManager.sol
index 295694cc..832c6e94 100644
--- a/src/PoolManager.sol
+++ b/src/PoolManager.sol
@@ -13,6 +13,7 @@ import {NoDelegateCall} from "./NoDelegateCall.sol";
 import {Owned} from "./Owned.sol";
 import {IHooks} from "./interfaces/IHooks.sol";
 import {IDynamicFeeManager} from "./interfaces/IDynamicFeeManager.sol";
+import {IHookFeeManager} from "./interfaces/IHookFeeManager.sol";
 import {IPoolManager} from "./interfaces/IPoolManager.sol";
 import {ILockCallback} from "./interfaces/callback/ILockCallback.sol";
 import {Fees} from "./Fees.sol";
@@ -56,11 +57,11 @@ contract PoolManager is IPoolManager, Fees, NoDelegateCall, Claims {
         external
         view
         override
-        returns (uint160 sqrtPriceX96, int24 tick, uint16 protocolFee)
+        returns (uint160 sqrtPriceX96, int24 tick, uint24 protocolFees, uint24 hookFees)
     {
         Pool.Slot0 memory slot0 = pools[id].slot0;
 
-        return (slot0.sqrtPriceX96, slot0.tick, slot0.protocolFee);
+        return (slot0.sqrtPriceX96, slot0.tick, slot0.protocolFees, slot0.hookFees);
     }
 
     /// @inheritdoc IPoolManager
@@ -129,10 +130,10 @@ contract PoolManager is IPoolManager, Fees, NoDelegateCall, Claims {
         }
 
         PoolId id = key.toId();
-        (, uint16 protocolFee) = _fetchProtocolFee(key);
+        (, uint24 protocolFees) = _fetchProtocolFees(key);
         uint24 swapFee = key.fee.isDynamicFee() ? _fetchDynamicSwapFee(key) : key.fee.getStaticFee();
 
-        tick = pools[id].initialize(sqrtPriceX96, protocolFee, swapFee);
+        tick = pools[id].initialize(sqrtPriceX96, protocolFees, _fetchHookFees(key), swapFee);
 
         if (key.hooks.shouldCallAfterInitialize()) {
             if (
@@ -216,7 +217,8 @@ contract PoolManager is IPoolManager, Fees, NoDelegateCall, Claims {
             }
         }
 
-        delta = pools[id].modifyPosition(
+        Pool.FeeAmounts memory feeAmounts;
+        (delta, feeAmounts) = pools[id].modifyPosition(
             Pool.ModifyPositionParams({
                 owner: msg.sender,
                 tickLower: params.tickLower,
@@ -228,6 +230,21 @@ contract PoolManager is IPoolManager, Fees, NoDelegateCall, Claims {
 
         _accountPoolBalanceDelta(key, delta);
 
+        unchecked {
+            if (feeAmounts.feeForProtocol0 > 0) {
+                protocolFeesAccrued[key.currency0] += feeAmounts.feeForProtocol0;
+            }
+            if (feeAmounts.feeForProtocol1 > 0) {
+                protocolFeesAccrued[key.currency1] += feeAmounts.feeForProtocol1;
+            }
+            if (feeAmounts.feeForHook0 > 0) {
+                hookFeesAccrued[address(key.hooks)][key.currency0] += feeAmounts.feeForHook0;
+            }
+            if (feeAmounts.feeForHook1 > 0) {
+                hookFeesAccrued[address(key.hooks)][key.currency1] += feeAmounts.feeForHook1;
+            }
+        }
+
         if (key.hooks.shouldCallAfterModifyPosition()) {
             if (
                 key.hooks.afterModifyPosition(msg.sender, key, params, delta, hookData)
@@ -269,9 +286,10 @@ contract PoolManager is IPoolManager, Fees, NoDelegateCall, Claims {
         }
 
         uint256 feeForProtocol;
+        uint256 feeForHook;
         uint24 swapFee;
         Pool.SwapState memory state;
-        (delta, feeForProtocol, swapFee, state) = pools[id].swap(
+        (delta, feeForProtocol, feeForHook, swapFee, state) = pools[id].swap(
             Pool.SwapParams({
                 tickSpacing: key.tickSpacing,
                 zeroForOne: params.zeroForOne,
@@ -287,6 +305,9 @@ contract PoolManager is IPoolManager, Fees, NoDelegateCall, Claims {
             if (feeForProtocol > 0) {
                 protocolFeesAccrued[params.zeroForOne ? key.currency0 : key.currency1] += feeForProtocol;
             }
+            if (feeForHook > 0) {
+                hookFeesAccrued[address(key.hooks)][params.zeroForOne ? key.currency0 : key.currency1] += feeForHook;
+            }
         }
 
         if (key.hooks.shouldCallAfterSwap()) {
@@ -370,12 +391,19 @@ contract PoolManager is IPoolManager, Fees, NoDelegateCall, Claims {
         _burn(currency, amount);
     }
 
-    function setProtocolFee(PoolKey memory key) external {
-        (bool success, uint16 newProtocolFee) = _fetchProtocolFee(key);
+    function setProtocolFees(PoolKey memory key) external {
+        (bool success, uint24 newProtocolFees) = _fetchProtocolFees(key);
         if (!success) revert ProtocolFeeControllerCallFailedOrInvalidResult();
         PoolId id = key.toId();
-        pools[id].setProtocolFee(newProtocolFee);
-        emit ProtocolFeeUpdated(id, newProtocolFee);
+        pools[id].setProtocolFees(newProtocolFees);
+        emit ProtocolFeeUpdated(id, newProtocolFees);
+    }
+
+    function setHookFees(PoolKey memory key) external {
+        uint24 newHookFees = _fetchHookFees(key);
+        PoolId id = key.toId();
+        pools[id].setHookFees(newHookFees);
+        emit HookFeeUpdated(id, newHookFees);
     }
 
     function updateDynamicSwapFee(PoolKey memory key) external {
