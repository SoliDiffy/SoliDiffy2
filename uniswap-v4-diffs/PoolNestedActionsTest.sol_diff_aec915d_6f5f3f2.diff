diff --git a/src/test/PoolNestedActionsTest.sol b/src/test/PoolNestedActionsTest.sol
index e8f77f65..e792e3e4 100644
--- a/src/test/PoolNestedActionsTest.sol
+++ b/src/test/PoolNestedActionsTest.sol
@@ -30,12 +30,8 @@ contract PoolNestedActionsTest is Test, ILockCallback {
         executor = new NestedActionExecutor(manager, user);
     }
 
-    function lock(bytes calldata data) external {
-        manager.lock(data);
-    }
-
     /// @notice Called by the pool manager on `msg.sender` when a lock is acquired
-    function lockAcquired(bytes calldata data) external override returns (bytes memory) {
+    function lockAcquired(address, bytes calldata data) external override returns (bytes memory) {
         Action[] memory actions = abi.decode(data, (Action[]));
         if (actions.length == 1 && actions[0] == Action.NESTED_SELF_LOCK) {
             _nestedLock();
@@ -50,7 +46,7 @@ contract PoolNestedActionsTest is Test, ILockCallback {
         assertEq(locker, address(this));
 
         vm.expectRevert(abi.encodeWithSelector(IPoolManager.AlreadyLocked.selector));
-        manager.lock("");
+        manager.lock(address(this), "");
 
         locker = manager.getLocker();
         assertEq(locker, address(this));
@@ -100,7 +96,7 @@ contract NestedActionExecutor is Test, PoolTestBase {
         assertEq(locker, msg.sender);
 
         vm.expectRevert(abi.encodeWithSelector(IPoolManager.AlreadyLocked.selector));
-        manager.lock("");
+        manager.lock(address(this), "");
 
         (locker) = manager.getLocker();
         assertEq(locker, msg.sender);
@@ -212,7 +208,7 @@ contract NestedActionExecutor is Test, PoolTestBase {
     }
 
     // This will never actually be used - its just to allow us to use the PoolTestBase helper contact
-    function lockAcquired(bytes calldata) external pure override returns (bytes memory) {
+    function lockAcquired(address, bytes calldata) external pure override returns (bytes memory) {
         return "";
     }
 }
