diff --git a/contracts/PoolManager.sol b/contracts/PoolManager.sol
index df0e4677..3f9c0e56 100644
--- a/contracts/PoolManager.sol
+++ b/contracts/PoolManager.sol
@@ -1,14 +1,12 @@
 // SPDX-License-Identifier: UNLICENSED
 pragma solidity ^0.8.13;
 
-import {Hooks} from './libraries/Hooks.sol';
 import {Pool} from './libraries/Pool.sol';
 import {Tick} from './libraries/Tick.sol';
 import {SafeCast} from './libraries/SafeCast.sol';
 
 import {IERC20Minimal} from './interfaces/external/IERC20Minimal.sol';
 import {NoDelegateCall} from './NoDelegateCall.sol';
-import {IHooks} from './interfaces/IHooks.sol';
 import {IPoolManager} from './interfaces/IPoolManager.sol';
 import {ILockCallback} from './interfaces/callback/ILockCallback.sol';
 
@@ -16,7 +14,6 @@ import {ILockCallback} from './interfaces/callback/ILockCallback.sol';
 contract PoolManager is IPoolManager, NoDelegateCall {
     using SafeCast for *;
     using Pool for *;
-    using Hooks for IHooks;
 
     mapping(bytes32 => Pool.State) public pools;
 
@@ -31,15 +28,7 @@ contract PoolManager is IPoolManager, NoDelegateCall {
 
     /// @notice Initialize the state for a given pool ID
     function initialize(IPoolManager.PoolKey memory key, uint160 sqrtPriceX96) external override returns (int24 tick) {
-        if (key.hooks.shouldCallBeforeInitialize()) {
-            key.hooks.beforeInitialize(msg.sender, key, sqrtPriceX96);
-        }
-
         tick = _getPool(key).initialize(_blockTimestamp(), sqrtPriceX96);
-
-        if (key.hooks.shouldCallAfterInitialize()) {
-            key.hooks.afterInitialize(msg.sender, key, sqrtPriceX96, tick);
-        }
     }
 
     /// @notice Increase the maximum number of stored observations for the pool's oracle
@@ -110,7 +99,7 @@ contract PoolManager is IPoolManager, NoDelegateCall {
     }
 
     /// @dev Accumulates a balance change to a map of token to balance changes
-    function _accountPoolBalanceDelta(PoolKey memory key, IPoolManager.BalanceDelta memory delta) internal {
+    function _accountPoolBalanceDelta(PoolKey memory key, Pool.BalanceDelta memory delta) internal {
         _accountDelta(key.token0, delta.amount0);
         _accountDelta(key.token1, delta.amount1);
     }
@@ -126,12 +115,8 @@ contract PoolManager is IPoolManager, NoDelegateCall {
         override
         noDelegateCall
         onlyByLocker
-        returns (IPoolManager.BalanceDelta memory delta)
+        returns (Pool.BalanceDelta memory delta)
     {
-        if (key.hooks.shouldCallBeforeModifyPosition()) {
-            key.hooks.beforeModifyPosition(msg.sender, key, params);
-        }
-
         delta = _getPool(key).modifyPosition(
             Pool.ModifyPositionParams({
                 owner: msg.sender,
@@ -145,10 +130,6 @@ contract PoolManager is IPoolManager, NoDelegateCall {
         );
 
         _accountPoolBalanceDelta(key, delta);
-
-        if (key.hooks.shouldCallAfterModifyPosition()) {
-            key.hooks.afterModifyPosition(msg.sender, key, params);
-        }
     }
 
     function swap(IPoolManager.PoolKey memory key, IPoolManager.SwapParams memory params)
@@ -156,12 +137,8 @@ contract PoolManager is IPoolManager, NoDelegateCall {
         override
         noDelegateCall
         onlyByLocker
-        returns (IPoolManager.BalanceDelta memory delta)
+        returns (Pool.BalanceDelta memory delta)
     {
-        if (key.hooks.shouldCallBeforeSwap()) {
-            key.hooks.beforeSwap(msg.sender, key, params);
-        }
-
         delta = _getPool(key).swap(
             Pool.SwapParams({
                 time: _blockTimestamp(),
@@ -174,10 +151,6 @@ contract PoolManager is IPoolManager, NoDelegateCall {
         );
 
         _accountPoolBalanceDelta(key, delta);
-
-        if (key.hooks.shouldCallAfterSwap()) {
-            key.hooks.afterSwap(msg.sender, key, params, delta);
-        }
     }
 
     /// @notice Called by the user to net out some value owed to the user
