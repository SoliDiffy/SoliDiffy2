diff --git a/src/libraries/Lockers.sol b/src/libraries/Lockers.sol
index fff26695..575dfa06 100644
--- a/src/libraries/Lockers.sol
+++ b/src/libraries/Lockers.sol
@@ -10,18 +10,13 @@ library Lockers {
     // The starting slot for an array of lockers, stored transiently.
     uint256 constant LOCKERS_SLOT = uint256(keccak256("Lockers")) - 1;
 
-    // The number of slots per item in the lockers array
-    uint256 constant LOCKER_STRUCT_SIZE = 2;
-
     // The starting slot for an array of hook addresses per locker, stored transiently.
     uint256 constant HOOK_ADDRESS_SLOT = uint256(keccak256("HookAddress")) - 1;
 
     // The slot holding the number of nonzero deltas.
     uint256 constant NONZERO_DELTA_COUNT = uint256(keccak256("NonzeroDeltaCount")) - 1;
 
-    // pushes an address tuple (address locker, address lockCaller)
-    // to the locker array, so each length of the array represents 2 slots of tstorage
-    function push(address locker, address lockCaller) internal {
+    function push(address locker) internal {
         uint256 slot = LOCKERS_SLOT;
 
         uint256 newLength;
@@ -29,16 +24,13 @@ library Lockers {
 
         unchecked {
             newLength = length() + 1;
-            thisLockerSlot = LOCKERS_SLOT + (newLength * LOCKER_STRUCT_SIZE);
+            thisLockerSlot = LOCKERS_SLOT + newLength;
         }
 
         assembly {
             // add the locker
             tstore(thisLockerSlot, locker)
 
-            // add the lock caller
-            tstore(add(thisLockerSlot, 1), lockCaller)
-
             // increase the length
             tstore(slot, newLength)
         }
@@ -71,16 +63,7 @@ library Lockers {
     }
 
     function getLocker(uint256 i) internal view returns (address locker) {
-        // first slot of the ith array item
-        uint256 slot = LOCKERS_SLOT + (i * LOCKER_STRUCT_SIZE);
-        assembly {
-            locker := tload(slot)
-        }
-    }
-
-    function getLockCaller(uint256 i) internal view returns (address locker) {
-        // second slot of the ith array item
-        uint256 slot = LOCKERS_SLOT + (i * LOCKER_STRUCT_SIZE + 1);
+        uint256 slot = LOCKERS_SLOT + i;
         assembly {
             locker := tload(slot)
         }
@@ -90,10 +73,6 @@ library Lockers {
         return getLocker(length());
     }
 
-    function getCurrentLockCaller() internal view returns (address locker) {
-        return getLockCaller(length());
-    }
-
     function nonzeroDeltaCount() internal view returns (uint256 count) {
         uint256 slot = NONZERO_DELTA_COUNT;
         assembly {
