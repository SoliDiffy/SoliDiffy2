diff --git a/contracts/libraries/FixedPointExtra.sol b/contracts/libraries/FixedPointExtra.sol
index ef5d372c..0963e50e 100644
--- a/contracts/libraries/FixedPointExtra.sol
+++ b/contracts/libraries/FixedPointExtra.sol
@@ -2,37 +2,33 @@
 pragma solidity >=0.5.0;
 
 import '@uniswap/lib/contracts/libraries/FixedPoint.sol';
-
-import './SafeMath.sol';
+import 'abdk-libraries-solidity/ABDKMathQuad.sol';
 
 // TODO: Move into @uniswap/lib
 library FixedPointExtra {
-    // multiply a UQ112x112 by an int and decode, returning an int
+    uint8 private constant RESOLUTION = 112;
+
+    // multiply a UQ112x112 by an int and decode, returning an int112
+    // TODO: fix
     // reverts on overflow
-    function muli(FixedPoint.uq112x112 memory self, int y) internal pure returns (int) {
-        uint144 z = FixedPoint.decode144(FixedPoint.mul(self, uint(y < 0 ? -y : y)));
-        return y < 0 ? -z : z;
+    function muli(FixedPoint.uq112x112 memory self, int y) internal pure returns (int112) {
+        int z;
+        require(y == 0 || (z = int(self._x) * y) / y == int(self._x), "FixedPoint: MULTIPLICATION_OVERFLOW");
+        require(z <= 2**224, "FixedPoint: MULTIPLICATION_OVERFLOW");
+        return int112(z >> RESOLUTION);
     }
 
     // multiply a UQ112x112 by a UQ112x112, returning a UQ112x112
-
-    function muluq(FixedPoint.uq112x112 memory self, FixedPoint.uq112x112 memory other)
-        internal
-        pure
-        returns (FixedPoint.uq112x112 memory)
-    {
-        uint z = uint(self._x >> 96) * (other._x >> 96);
-        require(z <= type(uint144).max, "FixedPointExtra: MULTIPLICATION_OVERFLOW");
-        return FixedPoint.uq112x112(uint224(z << 80));
+    function uqmul112(FixedPoint.uq112x112 memory self, FixedPoint.uq112x112 memory x) internal pure returns (FixedPoint.uq112x112 memory) {
+        // TODO: implement this
+        // silly hack to avoid linter error
+        return true ? self : x;
     }
 
     // divide a UQ112x112 by a UQ112x112, returning a UQ112x112
-    function divuq(FixedPoint.uq112x112 memory self, FixedPoint.uq112x112 memory other)
-        internal
-        pure
-        returns (FixedPoint.uq112x112 memory)
-    {
-        require(other._x != 0, 'FixedPointExtra: DIV_BY_ZERO');
-        return FixedPoint.uq112x112(uint224(((uint(self._x) << 32) / other._x) << 80));
+    function uqdiv112(FixedPoint.uq112x112 memory self, FixedPoint.uq112x112 memory x) internal pure returns (FixedPoint.uq112x112 memory) {
+        // TODO: implement this
+        // silly hack to avoid linter error
+        return true ? self : x;
     }
 }
