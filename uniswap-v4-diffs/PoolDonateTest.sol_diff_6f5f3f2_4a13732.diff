diff --git a/src/test/PoolDonateTest.sol b/src/test/PoolDonateTest.sol
index 7ee393db..164f5808 100644
--- a/src/test/PoolDonateTest.sol
+++ b/src/test/PoolDonateTest.sol
@@ -45,24 +45,27 @@ contract PoolDonateTest is PoolTestBase, Test {
 
         CallbackData memory data = abi.decode(rawData, (CallbackData));
 
-        (,, uint256 reserveBefore0, int256 deltaBefore0) =
-            _fetchBalances(data.key.currency0, data.sender, address(this));
-        (,, uint256 reserveBefore1, int256 deltaBefore1) =
-            _fetchBalances(data.key.currency1, data.sender, address(this));
+        (,, uint256 reserveBefore0, int256 deltaBefore0) = _fetchBalances(data.key.currency0, data.sender);
+        (,, uint256 reserveBefore1, int256 deltaBefore1) = _fetchBalances(data.key.currency1, data.sender);
 
         assertEq(deltaBefore0, 0);
         assertEq(deltaBefore1, 0);
 
         BalanceDelta delta = manager.donate(data.key, data.amount0, data.amount1, data.hookData);
 
-        (,, uint256 reserveAfter0, int256 deltaAfter0) = _fetchBalances(data.key.currency0, data.sender, address(this));
-        (,, uint256 reserveAfter1, int256 deltaAfter1) = _fetchBalances(data.key.currency1, data.sender, address(this));
+        // Checks that the current hook is cleared if there is an access lock. Note that if this router is ever used in a nested lock this will fail.
+        assertEq(address(manager.getCurrentHook()), address(0));
 
-        assertEq(reserveBefore0, reserveAfter0);
-        assertEq(reserveBefore1, reserveAfter1);
-        if (!data.key.hooks.hasPermission(Hooks.NO_OP_FLAG)) {
-            assertEq(deltaAfter0, int256(data.amount0));
-            assertEq(deltaAfter1, int256(data.amount1));
+        (,, uint256 reserveAfter0, int256 deltaAfter0) = _fetchBalances(data.key.currency0, data.sender);
+        (,, uint256 reserveAfter1, int256 deltaAfter1) = _fetchBalances(data.key.currency1, data.sender);
+
+        if (!data.key.hooks.hasPermission(Hooks.ACCESS_LOCK_FLAG)) {
+            assertEq(reserveBefore0, reserveAfter0);
+            assertEq(reserveBefore1, reserveAfter1);
+            if (!data.key.hooks.hasPermission(Hooks.NO_OP_FLAG)) {
+                assertEq(deltaAfter0, int256(data.amount0));
+                assertEq(deltaAfter1, int256(data.amount1));
+            }
         }
 
         if (delta == BalanceDeltaLibrary.MAXIMUM_DELTA) {
