diff --git a/src/PoolManager.sol b/src/PoolManager.sol
index b8fa49bf..d919a4f7 100644
--- a/src/PoolManager.sol
+++ b/src/PoolManager.sol
@@ -19,7 +19,7 @@ import {ILockCallback} from "./interfaces/callback/ILockCallback.sol";
 import {Fees} from "./Fees.sol";
 import {Claims} from "./Claims.sol";
 import {PoolId, PoolIdLibrary} from "./types/PoolId.sol";
-import {BalanceDelta, BalanceDeltaLibrary} from "./types/BalanceDelta.sol";
+import {BalanceDelta} from "./types/BalanceDelta.sol";
 import {Lockers} from "./libraries/Lockers.sol";
 
 /// @notice Holds the state for all pools
@@ -49,6 +49,10 @@ contract PoolManager is IPoolManager, Fees, NoDelegateCall, Claims {
 
     constructor(uint256 controllerGasLimit) Fees(controllerGasLimit) {}
 
+    function _getPool(PoolKey memory key) private view returns (Pool.State storage) {
+        return pools[key.toId()];
+    }
+
     /// @inheritdoc IPoolManager
     function getSlot0(PoolId id)
         external
@@ -170,10 +174,6 @@ contract PoolManager is IPoolManager, Fees, NoDelegateCall, Claims {
         _accountDelta(key.currency1, delta.amount1());
     }
 
-    function _checkPoolInitialized(PoolId id) internal view {
-        if (pools[id].isNotInitialized()) revert PoolNotInitialized();
-    }
-
     modifier onlyByLocker() {
         address locker = Lockers.getCurrentLocker();
         if (msg.sender != locker) revert LockedBy(locker);
@@ -186,16 +186,16 @@ contract PoolManager is IPoolManager, Fees, NoDelegateCall, Claims {
         IPoolManager.ModifyPositionParams memory params,
         bytes calldata hookData
     ) external override noDelegateCall onlyByLocker returns (BalanceDelta delta) {
-        PoolId id = key.toId();
-        _checkPoolInitialized(id);
-
         if (key.hooks.shouldCallBeforeModifyPosition()) {
-            bytes4 selector = key.hooks.beforeModifyPosition(msg.sender, key, params, hookData);
-            // Sentinel return value used to signify that a NoOp occurred.
-            if (key.hooks.isValidNoOpCall(selector)) return BalanceDeltaLibrary.MAXIMUM_DELTA;
-            else if (selector != IHooks.beforeModifyPosition.selector) revert Hooks.InvalidHookResponse();
+            if (
+                key.hooks.beforeModifyPosition(msg.sender, key, params, hookData)
+                    != IHooks.beforeModifyPosition.selector
+            ) {
+                revert Hooks.InvalidHookResponse();
+            }
         }
 
+        PoolId id = key.toId();
         Pool.FeeAmounts memory feeAmounts;
         (delta, feeAmounts) = pools[id].modifyPosition(
             Pool.ModifyPositionParams({
@@ -244,16 +244,14 @@ contract PoolManager is IPoolManager, Fees, NoDelegateCall, Claims {
         onlyByLocker
         returns (BalanceDelta delta)
     {
-        PoolId id = key.toId();
-        _checkPoolInitialized(id);
-
         if (key.hooks.shouldCallBeforeSwap()) {
-            bytes4 selector = key.hooks.beforeSwap(msg.sender, key, params, hookData);
-            // Sentinel return value used to signify that a NoOp occurred.
-            if (key.hooks.isValidNoOpCall(selector)) return BalanceDeltaLibrary.MAXIMUM_DELTA;
-            else if (selector != IHooks.beforeSwap.selector) revert Hooks.InvalidHookResponse();
+            if (key.hooks.beforeSwap(msg.sender, key, params, hookData) != IHooks.beforeSwap.selector) {
+                revert Hooks.InvalidHookResponse();
+            }
         }
 
+        PoolId id = key.toId();
+
         uint256 feeForProtocol;
         uint256 feeForHook;
         uint24 swapFee;
@@ -298,17 +296,13 @@ contract PoolManager is IPoolManager, Fees, NoDelegateCall, Claims {
         onlyByLocker
         returns (BalanceDelta delta)
     {
-        PoolId id = key.toId();
-        _checkPoolInitialized(id);
-
         if (key.hooks.shouldCallBeforeDonate()) {
-            bytes4 selector = key.hooks.beforeDonate(msg.sender, key, amount0, amount1, hookData);
-            // Sentinel return value used to signify that a NoOp occurred.
-            if (key.hooks.isValidNoOpCall(selector)) return BalanceDeltaLibrary.MAXIMUM_DELTA;
-            else if (selector != IHooks.beforeDonate.selector) revert Hooks.InvalidHookResponse();
+            if (key.hooks.beforeDonate(msg.sender, key, amount0, amount1, hookData) != IHooks.beforeDonate.selector) {
+                revert Hooks.InvalidHookResponse();
+            }
         }
 
-        delta = pools[id].donate(amount0, amount1);
+        delta = _getPool(key).donate(amount0, amount1);
 
         _accountPoolBalanceDelta(key, delta);
 
