diff --git a/test/PoolManager.t.sol b/test/PoolManager.t.sol
index a3434016..101ca4f5 100644
--- a/test/PoolManager.t.sol
+++ b/test/PoolManager.t.sol
@@ -17,7 +17,7 @@ import {MockHooks} from "../src/test/MockHooks.sol";
 import {MockContract} from "../src/test/MockContract.sol";
 import {EmptyTestHooks} from "../src/test/EmptyTestHooks.sol";
 import {PoolKey} from "../src/types/PoolKey.sol";
-import {BalanceDelta, BalanceDeltaLibrary} from "../src/types/BalanceDelta.sol";
+import {BalanceDelta} from "../src/types/BalanceDelta.sol";
 import {PoolSwapTest} from "../src/test/PoolSwapTest.sol";
 import {TestInvalidERC20} from "../src/test/TestInvalidERC20.sol";
 import {GasSnapshot} from "forge-gas-snapshot/GasSnapshot.sol";
@@ -478,7 +478,7 @@ contract PoolManagerTest is Test, Deployers, GasSnapshot {
     }
 
     function test_donate_failsIfNotInitialized() public {
-        vm.expectRevert(abi.encodeWithSelector(Pool.PoolNotInitialized.selector));
+        vm.expectRevert(abi.encodeWithSelector(Pool.NoLiquidityToReceiveFees.selector));
         donateRouter.donate(uninitializedKey, 100, 100, ZERO_BYTES);
     }
 
@@ -651,226 +651,6 @@ contract PoolManagerTest is Test, Deployers, GasSnapshot {
         assertEq(manager.protocolFeesAccrued(currency0), 0);
     }
 
-    function test_noop_gas(uint160 sqrtPriceX96) public {
-        // Assumptions tested in Pool.t.sol
-        vm.assume(sqrtPriceX96 >= TickMath.MIN_SQRT_RATIO);
-        vm.assume(sqrtPriceX96 < TickMath.MAX_SQRT_RATIO);
-
-        address payable hookAddr = payable(
-            address(
-                uint160(
-                    Hooks.BEFORE_MODIFY_POSITION_FLAG | Hooks.BEFORE_SWAP_FLAG | Hooks.BEFORE_DONATE_FLAG
-                        | Hooks.NO_OP_FLAG
-                )
-            )
-        );
-
-        vm.etch(hookAddr, vm.getDeployedCode("NoOpTestHooks.sol:NoOpTestHooks"));
-
-        (key,) = initPool(currency0, currency1, IHooks(hookAddr), 100, SQRT_RATIO_1_1, ZERO_BYTES);
-
-        // Test add liquidity
-        snapStart("modify position with noop");
-        BalanceDelta delta =
-            modifyPositionRouter.modifyPosition(key, IPoolManager.ModifyPositionParams(-120, 120, 10 ether), ZERO_BYTES);
-        snapEnd();
-
-        // Swap
-        IPoolManager.SwapParams memory swapParams =
-            IPoolManager.SwapParams({zeroForOne: true, amountSpecified: 100, sqrtPriceLimitX96: SQRT_RATIO_1_2});
-
-        PoolSwapTest.TestSettings memory testSettings =
-            PoolSwapTest.TestSettings({withdrawTokens: true, settleUsingTransfer: true});
-
-        snapStart("swap with noop");
-        delta = swapRouter.swap(key, swapParams, testSettings, ZERO_BYTES);
-        snapEnd();
-
-        // Donate
-        snapStart("donate with noop");
-        delta = donateRouter.donate(key, 0, 0, ZERO_BYTES);
-        snapStart("donate with noop");
-    }
-
-    function test_noop_succeedsOnAllActions(uint160 sqrtPriceX96) public {
-        // Assumptions tested in Pool.t.sol
-        vm.assume(sqrtPriceX96 >= TickMath.MIN_SQRT_RATIO);
-        vm.assume(sqrtPriceX96 < TickMath.MAX_SQRT_RATIO);
-
-        address payable hookAddr = payable(
-            address(
-                uint160(
-                    Hooks.BEFORE_MODIFY_POSITION_FLAG | Hooks.BEFORE_SWAP_FLAG | Hooks.BEFORE_DONATE_FLAG
-                        | Hooks.NO_OP_FLAG
-                )
-            )
-        );
-
-        vm.etch(hookAddr, vm.getDeployedCode("NoOpTestHooks.sol:NoOpTestHooks"));
-
-        (key,) = initPool(currency0, currency1, IHooks(hookAddr), 100, SQRT_RATIO_1_1, ZERO_BYTES);
-
-        uint256 reserveBefore0 = manager.reservesOf(currency0);
-        uint256 reserveBefore1 = manager.reservesOf(currency1);
-
-        // Test add liquidity
-        BalanceDelta delta =
-            modifyPositionRouter.modifyPosition(key, IPoolManager.ModifyPositionParams(-120, 120, 10 ether), ZERO_BYTES);
-
-        assertTrue(delta == BalanceDeltaLibrary.MAXIMUM_DELTA, "Max delta not returned");
-        assertEq(manager.reservesOf(currency0), reserveBefore0);
-        assertEq(manager.reservesOf(currency1), reserveBefore1);
-
-        // Swap
-        IPoolManager.SwapParams memory swapParams =
-            IPoolManager.SwapParams({zeroForOne: true, amountSpecified: 100, sqrtPriceLimitX96: SQRT_RATIO_1_2});
-
-        PoolSwapTest.TestSettings memory testSettings =
-            PoolSwapTest.TestSettings({withdrawTokens: true, settleUsingTransfer: true});
-
-        delta = swapRouter.swap(key, swapParams, testSettings, ZERO_BYTES);
-
-        assertTrue(delta == BalanceDeltaLibrary.MAXIMUM_DELTA, "Max delta not returned");
-        assertEq(manager.reservesOf(currency0), reserveBefore0);
-        assertEq(manager.reservesOf(currency1), reserveBefore1);
-
-        // Donate
-        delta = donateRouter.donate(key, 1 ether, 1 ether, ZERO_BYTES);
-
-        assertTrue(delta == BalanceDeltaLibrary.MAXIMUM_DELTA, "Max delta not returned");
-        assertEq(manager.reservesOf(currency0), reserveBefore0);
-        assertEq(manager.reservesOf(currency1), reserveBefore1);
-    }
-
-    function test_noop_failsOnUninitializedPools(uint160 sqrtPriceX96) public {
-        // Assumptions tested in Pool.t.sol
-        vm.assume(sqrtPriceX96 >= TickMath.MIN_SQRT_RATIO);
-        vm.assume(sqrtPriceX96 < TickMath.MAX_SQRT_RATIO);
-
-        address payable hookAddr = payable(
-            address(
-                uint160(
-                    Hooks.BEFORE_MODIFY_POSITION_FLAG | Hooks.BEFORE_SWAP_FLAG | Hooks.BEFORE_DONATE_FLAG
-                        | Hooks.NO_OP_FLAG
-                )
-            )
-        );
-
-        vm.etch(hookAddr, vm.getDeployedCode("NoOpTestHooks.sol:NoOpTestHooks"));
-
-        // Modify Position
-        key = PoolKey({currency0: currency0, currency1: currency1, fee: 100, hooks: IHooks(hookAddr), tickSpacing: 10});
-
-        vm.expectRevert(abi.encodeWithSelector(Pool.PoolNotInitialized.selector));
-        BalanceDelta delta =
-            modifyPositionRouter.modifyPosition(key, IPoolManager.ModifyPositionParams(-120, 120, 10 ether), ZERO_BYTES);
-
-        // Swap
-        IPoolManager.SwapParams memory swapParams =
-            IPoolManager.SwapParams({zeroForOne: true, amountSpecified: 100, sqrtPriceLimitX96: SQRT_RATIO_1_2});
-
-        PoolSwapTest.TestSettings memory testSettings =
-            PoolSwapTest.TestSettings({withdrawTokens: true, settleUsingTransfer: true});
-
-        vm.expectRevert(abi.encodeWithSelector(Pool.PoolNotInitialized.selector));
-        delta = swapRouter.swap(key, swapParams, testSettings, ZERO_BYTES);
-
-        // Donate
-        vm.expectRevert(abi.encodeWithSelector(Pool.PoolNotInitialized.selector));
-        delta = donateRouter.donate(key, 1 ether, 1 ether, ZERO_BYTES);
-    }
-
-    function test_noop_failsOnForbiddenFunctions(uint160 sqrtPriceX96) public {
-        // Assumptions tested in Pool.t.sol
-        vm.assume(sqrtPriceX96 >= TickMath.MIN_SQRT_RATIO);
-        vm.assume(sqrtPriceX96 < TickMath.MAX_SQRT_RATIO);
-
-        address payable hookAddr = payable(
-            address(
-                uint160(
-                    Hooks.BEFORE_INITIALIZE_FLAG | Hooks.BEFORE_SWAP_FLAG | Hooks.AFTER_SWAP_FLAG
-                        | Hooks.AFTER_MODIFY_POSITION_FLAG | Hooks.AFTER_DONATE_FLAG | Hooks.NO_OP_FLAG
-                )
-            )
-        );
-
-        MockHooks impl = new MockHooks();
-        vm.etch(hookAddr, address(impl).code);
-        MockHooks mockHooks = MockHooks(hookAddr);
-
-        key = PoolKey({currency0: currency0, currency1: currency1, fee: 100, hooks: mockHooks, tickSpacing: 10});
-
-        // Fails at beforeInitialize hook when it returns a NoOp
-        mockHooks.setReturnValue(mockHooks.beforeInitialize.selector, Hooks.NO_OP_SELECTOR);
-        vm.expectRevert(Hooks.InvalidHookResponse.selector);
-        initializeRouter.initialize(key, SQRT_RATIO_1_1, ZERO_BYTES);
-
-        // Now we let initialize succeed (so we can test other functions)
-        mockHooks.setReturnValue(mockHooks.beforeInitialize.selector, mockHooks.beforeInitialize.selector);
-        initializeRouter.initialize(key, SQRT_RATIO_1_1, ZERO_BYTES);
-
-        // Fails at afterModifyPosition hook when it returns a NoOp
-        mockHooks.setReturnValue(mockHooks.afterModifyPosition.selector, Hooks.NO_OP_SELECTOR);
-        vm.expectRevert(Hooks.InvalidHookResponse.selector);
-        modifyPositionRouter.modifyPosition(key, LIQ_PARAMS, ZERO_BYTES);
-
-        // Now we let the modify position succeed (so we can test other functions)
-        mockHooks.setReturnValue(mockHooks.afterModifyPosition.selector, mockHooks.afterModifyPosition.selector);
-        modifyPositionRouter.modifyPosition(key, LIQ_PARAMS, ZERO_BYTES);
-
-        // Fails at afterSwap hook when it returns a NoOp
-        mockHooks.setReturnValue(mockHooks.afterSwap.selector, Hooks.NO_OP_SELECTOR);
-        vm.expectRevert(Hooks.InvalidHookResponse.selector);
-        swapRouter.swap(
-            key,
-            IPoolManager.SwapParams({zeroForOne: true, amountSpecified: 100, sqrtPriceLimitX96: SQRT_RATIO_1_2}),
-            PoolSwapTest.TestSettings({withdrawTokens: false, settleUsingTransfer: true}),
-            ZERO_BYTES
-        );
-
-        // Fails at afterDonate hook when it returns a NoOp
-        mockHooks.setReturnValue(mockHooks.afterDonate.selector, Hooks.NO_OP_SELECTOR);
-        vm.expectRevert(Hooks.InvalidHookResponse.selector);
-        donateRouter.donate(key, 100, 100, ZERO_BYTES);
-    }
-
-    function test_noop_failsWithoutNoOpFlag(uint160 sqrtPriceX96) public {
-        // Assumptions tested in Pool.t.sol
-        vm.assume(sqrtPriceX96 >= TickMath.MIN_SQRT_RATIO);
-        vm.assume(sqrtPriceX96 < TickMath.MAX_SQRT_RATIO);
-
-        address payable hookAddr = payable(
-            address(uint160(Hooks.BEFORE_MODIFY_POSITION_FLAG | Hooks.BEFORE_SWAP_FLAG | Hooks.BEFORE_DONATE_FLAG))
-        );
-
-        MockHooks impl = new MockHooks();
-        vm.etch(hookAddr, address(impl).code);
-        MockHooks mockHooks = MockHooks(hookAddr);
-
-        key = PoolKey({currency0: currency0, currency1: currency1, fee: 100, hooks: mockHooks, tickSpacing: 10});
-        initializeRouter.initialize(key, SQRT_RATIO_1_1, ZERO_BYTES);
-
-        // Fails at beforeModifyPosition hook when it returns a NoOp but doesnt have permission
-        mockHooks.setReturnValue(mockHooks.beforeModifyPosition.selector, Hooks.NO_OP_SELECTOR);
-        vm.expectRevert(Hooks.InvalidHookResponse.selector);
-        modifyPositionRouter.modifyPosition(key, LIQ_PARAMS, ZERO_BYTES);
-
-        // Fails at beforeSwap hook when it returns a NoOp but doesnt have permission
-        mockHooks.setReturnValue(mockHooks.beforeSwap.selector, Hooks.NO_OP_SELECTOR);
-        vm.expectRevert(Hooks.InvalidHookResponse.selector);
-        swapRouter.swap(
-            key,
-            IPoolManager.SwapParams({zeroForOne: true, amountSpecified: 100, sqrtPriceLimitX96: SQRT_RATIO_1_2}),
-            PoolSwapTest.TestSettings({withdrawTokens: false, settleUsingTransfer: true}),
-            ZERO_BYTES
-        );
-
-        // Fails at beforeDonate hook when it returns a NoOp but doesnt have permission
-        mockHooks.setReturnValue(mockHooks.beforeDonate.selector, Hooks.NO_OP_SELECTOR);
-        vm.expectRevert(Hooks.InvalidHookResponse.selector);
-        donateRouter.donate(key, 100, 100, ZERO_BYTES);
-    }
-
     function test_collectProtocolFees_ERC20_returnsAllFeesIf0IsProvidedAsParameter() public {
         uint24 protocolFee = 260; // 0001 00 00 0100
         uint256 expectedFees = 7;
