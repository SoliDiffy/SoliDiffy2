diff --git a/contracts/UniswapERC20.sol b/contracts/UniswapERC20.sol
index 119849dc..7d9335e9 100644
--- a/contracts/UniswapERC20.sol
+++ b/contracts/UniswapERC20.sol
@@ -48,15 +48,6 @@ contract UniswapERC20 is ERC20 {
     return numerator / denominator;
   }
 
-  function swap(address inputToken, address outputToken, uint256 amountSold, address recipient) private returns (uint256) {
-      uint256 inputReserve = IERC20(inputToken).balanceOf(address(this));
-      uint256 outputReserve = IERC20(outputToken).balanceOf(address(this));
-      uint256 amountBought = getInputPrice(amountSold, inputReserve, outputReserve);
-      require(IERC20(inputToken).transferFrom(msg.sender, address(this), amountSold));
-      require(IERC20(outputToken).transfer(recipient, amountBought));
-      return amountBought;
-  }
-
   //TO: DO msg.sender is wrapper
   function swapAForB(uint256 amountSold, address recipient) public nonReentrant returns (uint256) {
       uint256 amountBought = swap(tokenA, tokenB, amountSold, recipient);
@@ -71,6 +62,15 @@ contract UniswapERC20 is ERC20 {
       return amountBought;
   }
 
+  function swap(address inputToken, address outputToken, uint256 amountSold, address recipient) private returns (uint256) {
+      uint256 inputReserve = IERC20(inputToken).balanceOf(address(this));
+      uint256 outputReserve = IERC20(outputToken).balanceOf(address(this));
+      uint256 amountBought = getInputPrice(amountSold, inputReserve, outputReserve);
+      require(IERC20(inputToken).transferFrom(msg.sender, address(this), amountSold));
+      require(IERC20(outputToken).transfer(recipient, amountBought));
+      return amountBought;
+  }
+
   function getInputPrice(address inputToken, uint256 amountSold) public view returns (uint256) {
     require(amountSold > 0);
     address _tokenA = address(tokenA);
