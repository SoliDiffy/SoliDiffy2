diff --git a/test/foundry-tests/Pool.t.sol b/test/foundry-tests/Pool.t.sol
index 0aa19436..c62f1452 100644
--- a/test/foundry-tests/Pool.t.sol
+++ b/test/foundry-tests/Pool.t.sol
@@ -1,10 +1,10 @@
 pragma solidity ^0.8.19;
 
-import {Test} from "forge-std/Test.sol";
-import {Vm} from "forge-std/Vm.sol";
-import {Pool} from "../../contracts/libraries/Pool.sol";
-import {Position} from "../../contracts/libraries/Position.sol";
-import {TickMath} from "../../contracts/libraries/TickMath.sol";
+import {Test} from 'forge-std/Test.sol';
+import {Vm} from 'forge-std/Vm.sol';
+import {Pool} from '../../contracts/libraries/Pool.sol';
+import {Position} from '../../contracts/libraries/Position.sol';
+import {TickMath} from '../../contracts/libraries/TickMath.sol';
 
 contract PoolTest is Test {
     using Pool for Pool.State;
@@ -57,7 +57,7 @@ contract PoolTest is Test {
         } else if (tickUpper > TickMath.MAX_TICK) {
             vm.expectRevert(abi.encodeWithSelector(Pool.TickUpperOutOfBounds.selector, tickUpper));
         } else if (liquidityDelta < 0) {
-            vm.expectRevert(abi.encodeWithSignature("Panic(uint256)", 0x11));
+            vm.expectRevert(abi.encodeWithSignature('Panic(uint256)', 0x11));
         } else if (liquidityDelta == 0) {
             vm.expectRevert(Position.CannotUpdateEmptyPosition.selector);
         } else if (liquidityDelta > int128(Pool.tickSpacingToMaxLiquidityPerTick(tickSpacing))) {
