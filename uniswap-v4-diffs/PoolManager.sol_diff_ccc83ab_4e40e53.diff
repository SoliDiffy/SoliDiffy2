diff --git a/src/PoolManager.sol b/src/PoolManager.sol
index da7f2784..95314a17 100644
--- a/src/PoolManager.sol
+++ b/src/PoolManager.sol
@@ -1,5 +1,5 @@
 // SPDX-License-Identifier: BUSL-1.1
-pragma solidity 0.8.26;
+pragma solidity ^0.8.24;
 
 import {Hooks} from "./libraries/Hooks.sol";
 import {Pool} from "./libraries/Pool.sol";
@@ -124,13 +124,9 @@ contract PoolManager is IPoolManager, ProtocolFees, NoDelegateCall, ERC6909Claim
         returns (int24 tick)
     {
         // see TickBitmap.sol for overflow conditions that can arise from tick spacing being too large
-        if (key.tickSpacing > MAX_TICK_SPACING) TickSpacingTooLarge.selector.revertWith(key.tickSpacing);
-        if (key.tickSpacing < MIN_TICK_SPACING) TickSpacingTooSmall.selector.revertWith(key.tickSpacing);
-        if (key.currency0 >= key.currency1) {
-            CurrenciesOutOfOrderOrEqual.selector.revertWith(
-                Currency.unwrap(key.currency0), Currency.unwrap(key.currency1)
-            );
-        }
+        if (key.tickSpacing > MAX_TICK_SPACING) TickSpacingTooLarge.selector.revertWith();
+        if (key.tickSpacing < MIN_TICK_SPACING) TickSpacingTooSmall.selector.revertWith();
+        if (key.currency0 >= key.currency1) CurrenciesOutOfOrderOrEqual.selector.revertWith();
         if (!key.hooks.isValidHookAddress(key.fee)) Hooks.HookAddressNotValid.selector.revertWith(address(key.hooks));
 
         uint24 lpFee = key.fee.getInitialLPFee();
@@ -173,7 +169,6 @@ contract PoolManager is IPoolManager, ProtocolFees, NoDelegateCall, ERC6909Claim
             })
         );
 
-        // fee delta and principal delta are both accrued to the caller
         callerDelta = principalDelta + feesAccrued;
 
         // event is emitted before the afterModifyLiquidity call to ensure events are always emitted in order
@@ -299,6 +294,15 @@ contract PoolManager is IPoolManager, ProtocolFees, NoDelegateCall, ERC6909Claim
         _accountDelta(currency, paid.toInt128(), msg.sender);
     }
 
+    /// @inheritdoc IPoolManager
+    function clear(Currency currency, uint256 amount) external onlyWhenUnlocked {
+        int256 current = currency.getDelta(msg.sender);
+        // Because input is `uint256`, only positive amounts can be cleared.
+        int128 amountDelta = amount.toInt128();
+        if (amountDelta != current) MustClearExactPositiveDelta.selector.revertWith();
+        _accountDelta(currency, -(amountDelta), msg.sender);
+    }
+
     /// @inheritdoc IPoolManager
     function mint(address to, uint256 id, uint256 amount) external override onlyWhenUnlocked {
         unchecked {
@@ -328,16 +332,13 @@ contract PoolManager is IPoolManager, ProtocolFees, NoDelegateCall, ERC6909Claim
     function _accountDelta(Currency currency, int128 delta, address target) internal {
         if (delta == 0) return;
 
-        int256 current = currency.getDelta(target);
-        int256 next = current + delta;
+        (int256 previous, int256 next) = currency.applyDelta(target, delta);
 
         if (next == 0) {
             NonZeroDeltaCount.decrement();
-        } else if (current == 0) {
+        } else if (previous == 0) {
             NonZeroDeltaCount.increment();
         }
-
-        currency.setDelta(target, next);
     }
 
     /// @notice Accounts the deltas of 2 currencies to a target address
