diff --git a/contracts/UniswapV3Pool.sol b/contracts/UniswapV3Pool.sol
index 82fd296e..ca7c59f8 100644
--- a/contracts/UniswapV3Pool.sol
+++ b/contracts/UniswapV3Pool.sol
@@ -1,5 +1,5 @@
 // SPDX-License-Identifier: BUSL-1.1
-pragma solidity =0.8.9;
+pragma solidity =0.7.6;
 
 import './interfaces/IUniswapV3Pool.sol';
 
@@ -201,16 +201,15 @@ contract UniswapV3Pool is IUniswapV3Pool, NoDelegateCall {
 
         Slot0 memory _slot0 = slot0;
 
-        unchecked {
-            if (_slot0.tick < tickLower) {
-                return (
-                    tickCumulativeLower - tickCumulativeUpper,
-                    secondsPerLiquidityOutsideLowerX128 - secondsPerLiquidityOutsideUpperX128,
-                    secondsOutsideLower - secondsOutsideUpper
-                );
-            } else if (_slot0.tick < tickUpper) {
-                uint32 time = _blockTimestamp();
-                (int56 tickCumulative, uint160 secondsPerLiquidityCumulativeX128) = observations.observeSingle(
+        if (_slot0.tick < tickLower) {
+            return (
+                tickCumulativeLower - tickCumulativeUpper,
+                secondsPerLiquidityOutsideLowerX128 - secondsPerLiquidityOutsideUpperX128,
+                secondsOutsideLower - secondsOutsideUpper
+            );
+        } else if (_slot0.tick < tickUpper) {
+            uint32 time = _blockTimestamp();
+            (int56 tickCumulative, uint160 secondsPerLiquidityCumulativeX128) = observations.observeSingle(
                 time,
                 0,
                 _slot0.tick,
@@ -218,20 +217,19 @@ contract UniswapV3Pool is IUniswapV3Pool, NoDelegateCall {
                 liquidity,
                 _slot0.observationCardinality
             );
-                return (
-                    tickCumulative - tickCumulativeLower - tickCumulativeUpper,
-                    secondsPerLiquidityCumulativeX128 -
-                        secondsPerLiquidityOutsideLowerX128 -
-                        secondsPerLiquidityOutsideUpperX128,
-                    time - secondsOutsideLower - secondsOutsideUpper
-                );
-            } else {
-                return (
-                    tickCumulativeUpper - tickCumulativeLower,
-                    secondsPerLiquidityOutsideUpperX128 - secondsPerLiquidityOutsideLowerX128,
-                    secondsOutsideUpper - secondsOutsideLower
-                );
-            }
+            return (
+                tickCumulative - tickCumulativeLower - tickCumulativeUpper,
+                secondsPerLiquidityCumulativeX128 -
+                    secondsPerLiquidityOutsideLowerX128 -
+                    secondsPerLiquidityOutsideUpperX128,
+                time - secondsOutsideLower - secondsOutsideUpper
+            );
+        } else {
+            return (
+                tickCumulativeUpper - tickCumulativeLower,
+                secondsPerLiquidityOutsideUpperX128 - secondsPerLiquidityOutsideLowerX128,
+                secondsOutsideUpper - secondsOutsideLower
+            );
         }
     }
 
@@ -388,18 +386,17 @@ contract UniswapV3Pool is IUniswapV3Pool, NoDelegateCall {
         int128 liquidityDelta,
         int24 tick
     ) private returns (Position.Info storage position) {
-        unchecked {
-            position = positions.get(owner, tickLower, tickUpper);
-
-            uint256 _feeGrowthGlobal0X128 = feeGrowthGlobal0X128; // SLOAD for gas optimization
-            uint256 _feeGrowthGlobal1X128 = feeGrowthGlobal1X128; // SLOAD for gas optimization
-
-            // if we need to update the ticks, do it
-            bool flippedLower;
-            bool flippedUpper;
-            if (liquidityDelta != 0) {
-                uint32 time = _blockTimestamp();
-                (int56 tickCumulative, uint160 secondsPerLiquidityCumulativeX128) = observations.observeSingle(
+        position = positions.get(owner, tickLower, tickUpper);
+
+        uint256 _feeGrowthGlobal0X128 = feeGrowthGlobal0X128; // SLOAD for gas optimization
+        uint256 _feeGrowthGlobal1X128 = feeGrowthGlobal1X128; // SLOAD for gas optimization
+
+        // if we need to update the ticks, do it
+        bool flippedLower;
+        bool flippedUpper;
+        if (liquidityDelta != 0) {
+            uint32 time = _blockTimestamp();
+            (int56 tickCumulative, uint160 secondsPerLiquidityCumulativeX128) = observations.observeSingle(
                 time,
                 0,
                 slot0.tick,
@@ -408,57 +405,56 @@ contract UniswapV3Pool is IUniswapV3Pool, NoDelegateCall {
                 slot0.observationCardinality
             );
 
-                flippedLower = ticks.update(
-                    tickLower,
-                    tick,
-                    liquidityDelta,
-                    _feeGrowthGlobal0X128,
-                    _feeGrowthGlobal1X128,
-                    secondsPerLiquidityCumulativeX128,
-                    tickCumulative,
-                    time,
-                    false,
-                    maxLiquidityPerTick
-                );
-                flippedUpper = ticks.update(
-                    tickUpper,
-                    tick,
-                    liquidityDelta,
-                    _feeGrowthGlobal0X128,
-                    _feeGrowthGlobal1X128,
-                    secondsPerLiquidityCumulativeX128,
-                    tickCumulative,
-                    time,
-                    true,
-                    maxLiquidityPerTick
-                );
-
-                if (flippedLower) {
-                    tickBitmap.flipTick(tickLower, tickSpacing);
-                }
-                if (flippedUpper) {
-                    tickBitmap.flipTick(tickUpper, tickSpacing);
-                }
-            }
-
-            (uint256 feeGrowthInside0X128, uint256 feeGrowthInside1X128) = ticks.getFeeGrowthInside(
+            flippedLower = ticks.update(
                 tickLower,
+                tick,
+                liquidityDelta,
+                _feeGrowthGlobal0X128,
+                _feeGrowthGlobal1X128,
+                secondsPerLiquidityCumulativeX128,
+                tickCumulative,
+                time,
+                false,
+                maxLiquidityPerTick
+            );
+            flippedUpper = ticks.update(
                 tickUpper,
                 tick,
+                liquidityDelta,
                 _feeGrowthGlobal0X128,
-                _feeGrowthGlobal1X128
+                _feeGrowthGlobal1X128,
+                secondsPerLiquidityCumulativeX128,
+                tickCumulative,
+                time,
+                true,
+                maxLiquidityPerTick
             );
 
-            position.update(liquidityDelta, feeGrowthInside0X128, feeGrowthInside1X128);
+            if (flippedLower) {
+                tickBitmap.flipTick(tickLower, tickSpacing);
+            }
+            if (flippedUpper) {
+                tickBitmap.flipTick(tickUpper, tickSpacing);
+            }
+        }
+
+        (uint256 feeGrowthInside0X128, uint256 feeGrowthInside1X128) = ticks.getFeeGrowthInside(
+            tickLower,
+            tickUpper,
+            tick,
+            _feeGrowthGlobal0X128,
+            _feeGrowthGlobal1X128
+        );
 
-            // clear any tick data that is no longer needed
-            if (liquidityDelta < 0) {
-                if (flippedLower) {
-                    ticks.clear(tickLower);
-                }
-                if (flippedUpper) {
-                    ticks.clear(tickUpper);
-                }
+        position.update(liquidityDelta, feeGrowthInside0X128, feeGrowthInside1X128);
+
+        // clear any tick data that is no longer needed
+        if (liquidityDelta < 0) {
+            if (flippedLower) {
+                ticks.clear(tickLower);
+            }
+            if (flippedUpper) {
+                ticks.clear(tickUpper);
             }
         }
     }
@@ -472,30 +468,28 @@ contract UniswapV3Pool is IUniswapV3Pool, NoDelegateCall {
         uint128 amount,
         bytes calldata data
     ) external override lock returns (uint256 amount0, uint256 amount1) {
-        unchecked {
-            require(amount > 0);
-            (, int256 amount0Int, int256 amount1Int) = _modifyPosition(
+        require(amount > 0);
+        (, int256 amount0Int, int256 amount1Int) = _modifyPosition(
             ModifyPositionParams({
                 owner: recipient,
                 tickLower: tickLower,
                 tickUpper: tickUpper,
-                liquidityDelta: int256(uint256(amount)).toInt128()
+                liquidityDelta: int256(amount).toInt128()
             })
         );
 
-            amount0 = uint256(amount0Int);
-            amount1 = uint256(amount1Int);
+        amount0 = uint256(amount0Int);
+        amount1 = uint256(amount1Int);
 
-            uint256 balance0Before;
-            uint256 balance1Before;
-            if (amount0 > 0) balance0Before = balance0();
-            if (amount1 > 0) balance1Before = balance1();
-            IUniswapV3MintCallback(msg.sender).uniswapV3MintCallback(amount0, amount1, data);
-            if (amount0 > 0) require(balance0Before.add(amount0) <= balance0(), 'M0');
-            if (amount1 > 0) require(balance1Before.add(amount1) <= balance1(), 'M1');
+        uint256 balance0Before;
+        uint256 balance1Before;
+        if (amount0 > 0) balance0Before = balance0();
+        if (amount1 > 0) balance1Before = balance1();
+        IUniswapV3MintCallback(msg.sender).uniswapV3MintCallback(amount0, amount1, data);
+        if (amount0 > 0) require(balance0Before.add(amount0) <= balance0(), 'M0');
+        if (amount1 > 0) require(balance1Before.add(amount1) <= balance1(), 'M1');
 
-            emit Mint(msg.sender, recipient, tickLower, tickUpper, amount, amount0, amount1);
-        }
+        emit Mint(msg.sender, recipient, tickLower, tickUpper, amount, amount0, amount1);
     }
 
     /// @inheritdoc IUniswapV3PoolActions
@@ -506,24 +500,22 @@ contract UniswapV3Pool is IUniswapV3Pool, NoDelegateCall {
         uint128 amount0Requested,
         uint128 amount1Requested
     ) external override lock returns (uint128 amount0, uint128 amount1) {
-        unchecked {
-            // we don't need to checkTicks here, because invalid positions will never have non-zero tokensOwed{0,1}
-            Position.Info storage position = positions.get(msg.sender, tickLower, tickUpper);
+        // we don't need to checkTicks here, because invalid positions will never have non-zero tokensOwed{0,1}
+        Position.Info storage position = positions.get(msg.sender, tickLower, tickUpper);
 
-            amount0 = amount0Requested > position.tokensOwed0 ? position.tokensOwed0 : amount0Requested;
-            amount1 = amount1Requested > position.tokensOwed1 ? position.tokensOwed1 : amount1Requested;
-
-            if (amount0 > 0) {
-                position.tokensOwed0 -= amount0;
-                TransferHelper.safeTransfer(token0, recipient, amount0);
-            }
-            if (amount1 > 0) {
-                position.tokensOwed1 -= amount1;
-                TransferHelper.safeTransfer(token1, recipient, amount1);
-            }
+        amount0 = amount0Requested > position.tokensOwed0 ? position.tokensOwed0 : amount0Requested;
+        amount1 = amount1Requested > position.tokensOwed1 ? position.tokensOwed1 : amount1Requested;
 
-            emit Collect(msg.sender, recipient, tickLower, tickUpper, amount0, amount1);
+        if (amount0 > 0) {
+            position.tokensOwed0 -= amount0;
+            TransferHelper.safeTransfer(token0, recipient, amount0);
         }
+        if (amount1 > 0) {
+            position.tokensOwed1 -= amount1;
+            TransferHelper.safeTransfer(token1, recipient, amount1);
+        }
+
+        emit Collect(msg.sender, recipient, tickLower, tickUpper, amount0, amount1);
     }
 
     /// @inheritdoc IUniswapV3PoolActions
@@ -533,28 +525,26 @@ contract UniswapV3Pool is IUniswapV3Pool, NoDelegateCall {
         int24 tickUpper,
         uint128 amount
     ) external override lock returns (uint256 amount0, uint256 amount1) {
-        unchecked {
-            (Position.Info storage position, int256 amount0Int, int256 amount1Int) = _modifyPosition(
+        (Position.Info storage position, int256 amount0Int, int256 amount1Int) = _modifyPosition(
             ModifyPositionParams({
                 owner: msg.sender,
                 tickLower: tickLower,
                 tickUpper: tickUpper,
-                liquidityDelta: -int256(uint256(amount)).toInt128()
+                liquidityDelta: -int256(amount).toInt128()
             })
         );
 
-            amount0 = uint256(-amount0Int);
-            amount1 = uint256(-amount1Int);
-
-            if (amount0 > 0 || amount1 > 0) {
-                (position.tokensOwed0, position.tokensOwed1) = (
-                    position.tokensOwed0 + uint128(amount0),
-                    position.tokensOwed1 + uint128(amount1)
-                );
-            }
+        amount0 = uint256(-amount0Int);
+        amount1 = uint256(-amount1Int);
 
-            emit Burn(msg.sender, tickLower, tickUpper, amount, amount0, amount1);
+        if (amount0 > 0 || amount1 > 0) {
+            (position.tokensOwed0, position.tokensOwed1) = (
+                position.tokensOwed0 + uint128(amount0),
+                position.tokensOwed1 + uint128(amount1)
+            );
         }
+
+        emit Burn(msg.sender, tickLower, tickUpper, amount, amount0, amount1);
     }
 
     struct SwapCache {
@@ -615,22 +605,21 @@ contract UniswapV3Pool is IUniswapV3Pool, NoDelegateCall {
         uint160 sqrtPriceLimitX96,
         bytes calldata data
     ) external override noDelegateCall returns (int256 amount0, int256 amount1) {
-        unchecked {
-            require(amountSpecified != 0, 'AS');
+        require(amountSpecified != 0, 'AS');
 
-            Slot0 memory slot0Start = slot0;
+        Slot0 memory slot0Start = slot0;
 
-            require(slot0Start.unlocked, 'LOK');
-            require(
-                zeroForOne
-                    ? sqrtPriceLimitX96 < slot0Start.sqrtPriceX96 && sqrtPriceLimitX96 > TickMath.MIN_SQRT_RATIO
-                    : sqrtPriceLimitX96 > slot0Start.sqrtPriceX96 && sqrtPriceLimitX96 < TickMath.MAX_SQRT_RATIO,
-                'SPL'
-            );
+        require(slot0Start.unlocked, 'LOK');
+        require(
+            zeroForOne
+                ? sqrtPriceLimitX96 < slot0Start.sqrtPriceX96 && sqrtPriceLimitX96 > TickMath.MIN_SQRT_RATIO
+                : sqrtPriceLimitX96 > slot0Start.sqrtPriceX96 && sqrtPriceLimitX96 < TickMath.MAX_SQRT_RATIO,
+            'SPL'
+        );
 
-            slot0.unlocked = false;
+        slot0.unlocked = false;
 
-            SwapCache memory cache = SwapCache({
+        SwapCache memory cache = SwapCache({
             liquidityStart: liquidity,
             blockTimestamp: _blockTimestamp(),
             feeProtocol: zeroForOne ? (slot0Start.feeProtocol % 16) : (slot0Start.feeProtocol >> 4),
@@ -639,9 +628,9 @@ contract UniswapV3Pool is IUniswapV3Pool, NoDelegateCall {
             computedLatestObservation: false
         });
 
-            bool exactInput = amountSpecified > 0;
+        bool exactInput = amountSpecified > 0;
 
-            SwapState memory state = SwapState({
+        SwapState memory state = SwapState({
             amountSpecifiedRemaining: amountSpecified,
             amountCalculated: 0,
             sqrtPriceX96: slot0Start.sqrtPriceX96,
@@ -651,77 +640,76 @@ contract UniswapV3Pool is IUniswapV3Pool, NoDelegateCall {
             liquidity: cache.liquidityStart
         });
 
-            // continue swapping as long as we haven't used the entire input/output and haven't reached the price limit
-            while (state.amountSpecifiedRemaining != 0 && state.sqrtPriceX96 != sqrtPriceLimitX96) {
-                StepComputations memory step;
+        // continue swapping as long as we haven't used the entire input/output and haven't reached the price limit
+        while (state.amountSpecifiedRemaining != 0 && state.sqrtPriceX96 != sqrtPriceLimitX96) {
+            StepComputations memory step;
 
-                step.sqrtPriceStartX96 = state.sqrtPriceX96;
+            step.sqrtPriceStartX96 = state.sqrtPriceX96;
 
-                (step.tickNext, step.initialized) = tickBitmap.nextInitializedTickWithinOneWord(
-                    state.tick,
-                    tickSpacing,
-                    zeroForOne
-                );
+            (step.tickNext, step.initialized) = tickBitmap.nextInitializedTickWithinOneWord(
+                state.tick,
+                tickSpacing,
+                zeroForOne
+            );
 
-                // ensure that we do not overshoot the min/max tick, as the tick bitmap is not aware of these bounds
-                if (step.tickNext < TickMath.MIN_TICK) {
-                    step.tickNext = TickMath.MIN_TICK;
-                } else if (step.tickNext > TickMath.MAX_TICK) {
-                    step.tickNext = TickMath.MAX_TICK;
-                }
+            // ensure that we do not overshoot the min/max tick, as the tick bitmap is not aware of these bounds
+            if (step.tickNext < TickMath.MIN_TICK) {
+                step.tickNext = TickMath.MIN_TICK;
+            } else if (step.tickNext > TickMath.MAX_TICK) {
+                step.tickNext = TickMath.MAX_TICK;
+            }
 
-                // get the price for the next tick
-                step.sqrtPriceNextX96 = TickMath.getSqrtRatioAtTick(step.tickNext);
-
-                // compute values to swap to the target tick, price limit, or point where input/output amount is exhausted
-                (state.sqrtPriceX96, step.amountIn, step.amountOut, step.feeAmount) = SwapMath.computeSwapStep(
-                    state.sqrtPriceX96,
-                    (zeroForOne ? step.sqrtPriceNextX96 < sqrtPriceLimitX96 : step.sqrtPriceNextX96 > sqrtPriceLimitX96)
-                        ? sqrtPriceLimitX96
-                        : step.sqrtPriceNextX96,
-                    state.liquidity,
-                    state.amountSpecifiedRemaining,
-                    fee
-                );
+            // get the price for the next tick
+            step.sqrtPriceNextX96 = TickMath.getSqrtRatioAtTick(step.tickNext);
+
+            // compute values to swap to the target tick, price limit, or point where input/output amount is exhausted
+            (state.sqrtPriceX96, step.amountIn, step.amountOut, step.feeAmount) = SwapMath.computeSwapStep(
+                state.sqrtPriceX96,
+                (zeroForOne ? step.sqrtPriceNextX96 < sqrtPriceLimitX96 : step.sqrtPriceNextX96 > sqrtPriceLimitX96)
+                    ? sqrtPriceLimitX96
+                    : step.sqrtPriceNextX96,
+                state.liquidity,
+                state.amountSpecifiedRemaining,
+                fee
+            );
 
-                if (exactInput) {
-                    state.amountSpecifiedRemaining -= (step.amountIn + step.feeAmount).toInt256();
-                    state.amountCalculated = state.amountCalculated.sub(step.amountOut.toInt256());
-                } else {
-                    state.amountSpecifiedRemaining += step.amountOut.toInt256();
-                    state.amountCalculated = state.amountCalculated.add((step.amountIn + step.feeAmount).toInt256());
-                }
+            if (exactInput) {
+                state.amountSpecifiedRemaining -= (step.amountIn + step.feeAmount).toInt256();
+                state.amountCalculated = state.amountCalculated.sub(step.amountOut.toInt256());
+            } else {
+                state.amountSpecifiedRemaining += step.amountOut.toInt256();
+                state.amountCalculated = state.amountCalculated.add((step.amountIn + step.feeAmount).toInt256());
+            }
 
-                // if the protocol fee is on, calculate how much is owed, decrement feeAmount, and increment protocolFee
-                if (cache.feeProtocol > 0) {
-                    uint256 delta = step.feeAmount / cache.feeProtocol;
-                    step.feeAmount -= delta;
-                    state.protocolFee += uint128(delta);
-                }
+            // if the protocol fee is on, calculate how much is owed, decrement feeAmount, and increment protocolFee
+            if (cache.feeProtocol > 0) {
+                uint256 delta = step.feeAmount / cache.feeProtocol;
+                step.feeAmount -= delta;
+                state.protocolFee += uint128(delta);
+            }
 
-                // update global fee tracker
-                if (state.liquidity > 0)
-                    state.feeGrowthGlobalX128 += FullMath.mulDiv(step.feeAmount, FixedPoint128.Q128, state.liquidity);
-
-                // shift tick if we reached the next price
-                if (state.sqrtPriceX96 == step.sqrtPriceNextX96) {
-                    // if the tick is initialized, run the tick transition
-                    if (step.initialized) {
-                        // check for the placeholder value, which we replace with the actual value the first time the swap
-                        // crosses an initialized tick
-                        if (!cache.computedLatestObservation) {
-                            (cache.tickCumulative, cache.secondsPerLiquidityCumulativeX128) = observations
-                                .observeSingle(
-                                    cache.blockTimestamp,
-                                    0,
-                                    slot0Start.tick,
-                                    slot0Start.observationIndex,
-                                    cache.liquidityStart,
-                                    slot0Start.observationCardinality
-                                );
-                            cache.computedLatestObservation = true;
-                        }
-                        int128 liquidityNet = ticks.cross(
+            // update global fee tracker
+            if (state.liquidity > 0)
+                state.feeGrowthGlobalX128 += FullMath.mulDiv(step.feeAmount, FixedPoint128.Q128, state.liquidity);
+
+            // shift tick if we reached the next price
+            if (state.sqrtPriceX96 == step.sqrtPriceNextX96) {
+                // if the tick is initialized, run the tick transition
+                if (step.initialized) {
+                    // check for the placeholder value, which we replace with the actual value the first time the swap
+                    // crosses an initialized tick
+                    if (!cache.computedLatestObservation) {
+                        (cache.tickCumulative, cache.secondsPerLiquidityCumulativeX128) = observations.observeSingle(
+                            cache.blockTimestamp,
+                            0,
+                            slot0Start.tick,
+                            slot0Start.observationIndex,
+                            cache.liquidityStart,
+                            slot0Start.observationCardinality
+                        );
+                        cache.computedLatestObservation = true;
+                    }
+                    int128 liquidityNet = ticks.cross(
                         step.tickNext,
                         (zeroForOne ? state.feeGrowthGlobalX128 : feeGrowthGlobal0X128),
                         (zeroForOne ? feeGrowthGlobal1X128 : state.feeGrowthGlobalX128),
@@ -729,23 +717,23 @@ contract UniswapV3Pool is IUniswapV3Pool, NoDelegateCall {
                         cache.tickCumulative,
                         cache.blockTimestamp
                     );
-                        // if we're moving leftward, we interpret liquidityNet as the opposite sign
-                        // safe because liquidityNet cannot be type(int128).min
-                        if (zeroForOne) liquidityNet = -liquidityNet;
-
-                        state.liquidity = LiquidityMath.addDelta(state.liquidity, liquidityNet);
-                    }
+                    // if we're moving leftward, we interpret liquidityNet as the opposite sign
+                    // safe because liquidityNet cannot be type(int128).min
+                    if (zeroForOne) liquidityNet = -liquidityNet;
 
-                    state.tick = zeroForOne ? step.tickNext - 1 : step.tickNext;
-                } else if (state.sqrtPriceX96 != step.sqrtPriceStartX96) {
-                    // recompute unless we're on a lower tick boundary (i.e. already transitioned ticks), and haven't moved
-                    state.tick = TickMath.getTickAtSqrtRatio(state.sqrtPriceX96);
+                    state.liquidity = LiquidityMath.addDelta(state.liquidity, liquidityNet);
                 }
+
+                state.tick = zeroForOne ? step.tickNext - 1 : step.tickNext;
+            } else if (state.sqrtPriceX96 != step.sqrtPriceStartX96) {
+                // recompute unless we're on a lower tick boundary (i.e. already transitioned ticks), and haven't moved
+                state.tick = TickMath.getTickAtSqrtRatio(state.sqrtPriceX96);
             }
+        }
 
-            // update tick and write an oracle entry if the tick change
-            if (state.tick != slot0Start.tick) {
-                (uint16 observationIndex, uint16 observationCardinality) = observations.write(
+        // update tick and write an oracle entry if the tick change
+        if (state.tick != slot0Start.tick) {
+            (uint16 observationIndex, uint16 observationCardinality) = observations.write(
                 slot0Start.observationIndex,
                 cache.blockTimestamp,
                 slot0Start.tick,
@@ -753,52 +741,51 @@ contract UniswapV3Pool is IUniswapV3Pool, NoDelegateCall {
                 slot0Start.observationCardinality,
                 slot0Start.observationCardinalityNext
             );
-                (slot0.sqrtPriceX96, slot0.tick, slot0.observationIndex, slot0.observationCardinality) = (
-                    state.sqrtPriceX96,
-                    state.tick,
-                    observationIndex,
-                    observationCardinality
-                );
-            } else {
-                // otherwise just update the price
-                slot0.sqrtPriceX96 = state.sqrtPriceX96;
-            }
-
-            // update liquidity if it changed
-            if (cache.liquidityStart != state.liquidity) liquidity = state.liquidity;
-
-            // update fee growth global and, if necessary, protocol fees
-            // overflow is acceptable, protocol has to withdraw before it hits type(uint128).max fees
-            if (zeroForOne) {
-                feeGrowthGlobal0X128 = state.feeGrowthGlobalX128;
-                if (state.protocolFee > 0) protocolFees.token0 += state.protocolFee;
-            } else {
-                feeGrowthGlobal1X128 = state.feeGrowthGlobalX128;
-                if (state.protocolFee > 0) protocolFees.token1 += state.protocolFee;
-            }
+            (slot0.sqrtPriceX96, slot0.tick, slot0.observationIndex, slot0.observationCardinality) = (
+                state.sqrtPriceX96,
+                state.tick,
+                observationIndex,
+                observationCardinality
+            );
+        } else {
+            // otherwise just update the price
+            slot0.sqrtPriceX96 = state.sqrtPriceX96;
+        }
 
-            (amount0, amount1) = zeroForOne == exactInput
-                ? (amountSpecified - state.amountSpecifiedRemaining, state.amountCalculated)
-                : (state.amountCalculated, amountSpecified - state.amountSpecifiedRemaining);
+        // update liquidity if it changed
+        if (cache.liquidityStart != state.liquidity) liquidity = state.liquidity;
+
+        // update fee growth global and, if necessary, protocol fees
+        // overflow is acceptable, protocol has to withdraw before it hits type(uint128).max fees
+        if (zeroForOne) {
+            feeGrowthGlobal0X128 = state.feeGrowthGlobalX128;
+            if (state.protocolFee > 0) protocolFees.token0 += state.protocolFee;
+        } else {
+            feeGrowthGlobal1X128 = state.feeGrowthGlobalX128;
+            if (state.protocolFee > 0) protocolFees.token1 += state.protocolFee;
+        }
 
-            // do the transfers and collect payment
-            if (zeroForOne) {
-                if (amount1 < 0) TransferHelper.safeTransfer(token1, recipient, uint256(-amount1));
+        (amount0, amount1) = zeroForOne == exactInput
+            ? (amountSpecified - state.amountSpecifiedRemaining, state.amountCalculated)
+            : (state.amountCalculated, amountSpecified - state.amountSpecifiedRemaining);
 
-                uint256 balance0Before = balance0();
-                IUniswapV3SwapCallback(msg.sender).uniswapV3SwapCallback(amount0, amount1, data);
-                require(balance0Before.add(uint256(amount0)) <= balance0(), 'IIA');
-            } else {
-                if (amount0 < 0) TransferHelper.safeTransfer(token0, recipient, uint256(-amount0));
+        // do the transfers and collect payment
+        if (zeroForOne) {
+            if (amount1 < 0) TransferHelper.safeTransfer(token1, recipient, uint256(-amount1));
 
-                uint256 balance1Before = balance1();
-                IUniswapV3SwapCallback(msg.sender).uniswapV3SwapCallback(amount0, amount1, data);
-                require(balance1Before.add(uint256(amount1)) <= balance1(), 'IIA');
-            }
+            uint256 balance0Before = balance0();
+            IUniswapV3SwapCallback(msg.sender).uniswapV3SwapCallback(amount0, amount1, data);
+            require(balance0Before.add(uint256(amount0)) <= balance0(), 'IIA');
+        } else {
+            if (amount0 < 0) TransferHelper.safeTransfer(token0, recipient, uint256(-amount0));
 
-            emit Swap(msg.sender, recipient, amount0, amount1, state.sqrtPriceX96, state.liquidity, state.tick);
-            slot0.unlocked = true;
+            uint256 balance1Before = balance1();
+            IUniswapV3SwapCallback(msg.sender).uniswapV3SwapCallback(amount0, amount1, data);
+            require(balance1Before.add(uint256(amount1)) <= balance1(), 'IIA');
         }
+
+        emit Swap(msg.sender, recipient, amount0, amount1, state.sqrtPriceX96, state.liquidity, state.tick);
+        slot0.unlocked = true;
     }
 
     /// @inheritdoc IUniswapV3PoolActions
@@ -808,45 +795,43 @@ contract UniswapV3Pool is IUniswapV3Pool, NoDelegateCall {
         uint256 amount1,
         bytes calldata data
     ) external override lock noDelegateCall {
-        unchecked {
-            uint128 _liquidity = liquidity;
-            require(_liquidity > 0, 'L');
+        uint128 _liquidity = liquidity;
+        require(_liquidity > 0, 'L');
 
-            uint256 fee0 = FullMath.mulDivRoundingUp(amount0, fee, 1e6);
-            uint256 fee1 = FullMath.mulDivRoundingUp(amount1, fee, 1e6);
-            uint256 balance0Before = balance0();
-            uint256 balance1Before = balance1();
-
-            if (amount0 > 0) TransferHelper.safeTransfer(token0, recipient, amount0);
-            if (amount1 > 0) TransferHelper.safeTransfer(token1, recipient, amount1);
+        uint256 fee0 = FullMath.mulDivRoundingUp(amount0, fee, 1e6);
+        uint256 fee1 = FullMath.mulDivRoundingUp(amount1, fee, 1e6);
+        uint256 balance0Before = balance0();
+        uint256 balance1Before = balance1();
 
-            IUniswapV3FlashCallback(msg.sender).uniswapV3FlashCallback(fee0, fee1, data);
+        if (amount0 > 0) TransferHelper.safeTransfer(token0, recipient, amount0);
+        if (amount1 > 0) TransferHelper.safeTransfer(token1, recipient, amount1);
 
-            uint256 balance0After = balance0();
-            uint256 balance1After = balance1();
+        IUniswapV3FlashCallback(msg.sender).uniswapV3FlashCallback(fee0, fee1, data);
 
-            require(balance0Before.add(fee0) <= balance0After, 'F0');
-            require(balance1Before.add(fee1) <= balance1After, 'F1');
+        uint256 balance0After = balance0();
+        uint256 balance1After = balance1();
 
-            // sub is safe because we know balanceAfter is gt balanceBefore by at least fee
-            uint256 paid0 = balance0After - balance0Before;
-            uint256 paid1 = balance1After - balance1Before;
+        require(balance0Before.add(fee0) <= balance0After, 'F0');
+        require(balance1Before.add(fee1) <= balance1After, 'F1');
 
-            if (paid0 > 0) {
-                uint8 feeProtocol0 = slot0.feeProtocol % 16;
-                uint256 fees0 = feeProtocol0 == 0 ? 0 : paid0 / feeProtocol0;
-                if (uint128(fees0) > 0) protocolFees.token0 += uint128(fees0);
-                feeGrowthGlobal0X128 += FullMath.mulDiv(paid0 - fees0, FixedPoint128.Q128, _liquidity);
-            }
-            if (paid1 > 0) {
-                uint8 feeProtocol1 = slot0.feeProtocol >> 4;
-                uint256 fees1 = feeProtocol1 == 0 ? 0 : paid1 / feeProtocol1;
-                if (uint128(fees1) > 0) protocolFees.token1 += uint128(fees1);
-                feeGrowthGlobal1X128 += FullMath.mulDiv(paid1 - fees1, FixedPoint128.Q128, _liquidity);
-            }
+        // sub is safe because we know balanceAfter is gt balanceBefore by at least fee
+        uint256 paid0 = balance0After - balance0Before;
+        uint256 paid1 = balance1After - balance1Before;
 
-            emit Flash(msg.sender, recipient, amount0, amount1, paid0, paid1);
+        if (paid0 > 0) {
+            uint8 feeProtocol0 = slot0.feeProtocol % 16;
+            uint256 fees0 = feeProtocol0 == 0 ? 0 : paid0 / feeProtocol0;
+            if (uint128(fees0) > 0) protocolFees.token0 += uint128(fees0);
+            feeGrowthGlobal0X128 += FullMath.mulDiv(paid0 - fees0, FixedPoint128.Q128, _liquidity);
+        }
+        if (paid1 > 0) {
+            uint8 feeProtocol1 = slot0.feeProtocol >> 4;
+            uint256 fees1 = feeProtocol1 == 0 ? 0 : paid1 / feeProtocol1;
+            if (uint128(fees1) > 0) protocolFees.token1 += uint128(fees1);
+            feeGrowthGlobal1X128 += FullMath.mulDiv(paid1 - fees1, FixedPoint128.Q128, _liquidity);
         }
+
+        emit Flash(msg.sender, recipient, amount0, amount1, paid0, paid1);
     }
 
     /// @inheritdoc IUniswapV3PoolOwnerActions
@@ -866,22 +851,20 @@ contract UniswapV3Pool is IUniswapV3Pool, NoDelegateCall {
         uint128 amount0Requested,
         uint128 amount1Requested
     ) external override lock onlyFactoryOwner returns (uint128 amount0, uint128 amount1) {
-        unchecked {
-            amount0 = amount0Requested > protocolFees.token0 ? protocolFees.token0 : amount0Requested;
-            amount1 = amount1Requested > protocolFees.token1 ? protocolFees.token1 : amount1Requested;
-
-            if (amount0 > 0) {
-                if (amount0 == protocolFees.token0) amount0--; // ensure that the slot is not cleared, for gas savings
-                protocolFees.token0 -= amount0;
-                TransferHelper.safeTransfer(token0, recipient, amount0);
-            }
-            if (amount1 > 0) {
-                if (amount1 == protocolFees.token1) amount1--; // ensure that the slot is not cleared, for gas savings
-                protocolFees.token1 -= amount1;
-                TransferHelper.safeTransfer(token1, recipient, amount1);
-            }
+        amount0 = amount0Requested > protocolFees.token0 ? protocolFees.token0 : amount0Requested;
+        amount1 = amount1Requested > protocolFees.token1 ? protocolFees.token1 : amount1Requested;
 
-            emit CollectProtocol(msg.sender, recipient, amount0, amount1);
+        if (amount0 > 0) {
+            if (amount0 == protocolFees.token0) amount0--; // ensure that the slot is not cleared, for gas savings
+            protocolFees.token0 -= amount0;
+            TransferHelper.safeTransfer(token0, recipient, amount0);
         }
+        if (amount1 > 0) {
+            if (amount1 == protocolFees.token1) amount1--; // ensure that the slot is not cleared, for gas savings
+            protocolFees.token1 -= amount1;
+            TransferHelper.safeTransfer(token1, recipient, amount1);
+        }
+
+        emit CollectProtocol(msg.sender, recipient, amount0, amount1);
     }
 }
