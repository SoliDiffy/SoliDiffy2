diff --git a/contracts/UniswapV3Pair.sol b/contracts/UniswapV3Pair.sol
index 2a2203f8..ca7167f1 100644
--- a/contracts/UniswapV3Pair.sol
+++ b/contracts/UniswapV3Pair.sol
@@ -179,7 +179,7 @@ contract UniswapV3Pair is IUniswapV3Pair {
         feeGrowthInside1 = FixedPoint128.uq128x128(feeGrowthGlobal1._x - feeGrowthBelow1._x - feeGrowthAbove1._x);
     }
 
-    function getLiquidity() external view override returns (uint128 liquidity) {
+    function getLiquidity() public view override returns (uint128 liquidity) {
         // load all liquidity into memory
         uint128[NUM_FEE_OPTIONS] memory _liquidityCurrent = [
             liquidityCurrent[0],
@@ -227,31 +227,6 @@ contract UniswapV3Pair is IUniswapV3Pair {
         return FEE_OPTIONS(NUM_FEE_OPTIONS - 1);
     }
 
-    function computeLiquidityAndFee(uint128[NUM_FEE_OPTIONS] memory _liquidityCurrent)
-        private
-        pure
-        returns (uint128 liquidity, uint16 fee)
-    {
-        liquidity =
-            _liquidityCurrent[0] +
-            _liquidityCurrent[1] +
-            _liquidityCurrent[2] +
-            _liquidityCurrent[3] +
-            _liquidityCurrent[4] +
-            _liquidityCurrent[5];
-
-        uint128 threshold = liquidity / 2;
-
-        uint128 liquidityCumulative;
-        for (uint8 feeVoteIndex = 0; feeVoteIndex < NUM_FEE_OPTIONS; feeVoteIndex++) {
-            liquidityCumulative += _liquidityCurrent[feeVoteIndex];
-            if (liquidityCumulative >= threshold) {
-                fee = FEE_OPTIONS(feeVoteIndex);
-                break;
-            }
-        }
-    }
-
     constructor(
         address _factory,
         address _token0,
@@ -526,10 +501,8 @@ contract UniswapV3Pair is IUniswapV3Pair {
         uint256 amountInRemaining;
         // the tick associated with the current price
         int16 tick;
-        // the liquidity in range segmented by fee vote
-        uint128[NUM_FEE_OPTIONS] liquidityCurrent;
-        // whether the swap has crossed an initialized tick
-        bool crossedInitializedTick;
+        // the virtual liquidity
+        uint128 liquidity;
         // the price
         FixedPoint128.uq128x128 price;
         // protocol fees of the input token
@@ -543,8 +516,6 @@ contract UniswapV3Pair is IUniswapV3Pair {
         int16 tickNext;
         // price for the target tick (1/0)
         FixedPoint128.uq128x128 priceNext;
-        // the virtual liquidity
-        uint128 liquidity;
         // the fee that will be paid in this step, in bips
         uint16 fee;
         // (computed) virtual reserves of token0
@@ -564,18 +535,10 @@ contract UniswapV3Pair is IUniswapV3Pair {
             feeFloor: feeFloor,
             amountInRemaining: params.amountIn,
             tick: tickCurrent,
+            liquidity: getLiquidity(),
             price: priceCurrent,
             feeToFees: params.zeroForOne ? feeToFees0 : feeToFees1,
-            feeGrowthGlobal: params.zeroForOne ? feeGrowthGlobal0 : feeGrowthGlobal1,
-            crossedInitializedTick: false,
-            liquidityCurrent: [
-                liquidityCurrent[0],
-                liquidityCurrent[1],
-                liquidityCurrent[2],
-                liquidityCurrent[3],
-                liquidityCurrent[4],
-                liquidityCurrent[5]
-            ]
+            feeGrowthGlobal: params.zeroForOne ? feeGrowthGlobal0 : feeGrowthGlobal1
         });
 
         while (state.amountInRemaining > 0) {
@@ -594,14 +557,13 @@ contract UniswapV3Pair is IUniswapV3Pair {
 
             // if there might be room to move in the current tick, continue calculations
             if (params.zeroForOne == false || (state.price._x > step.priceNext._x)) {
-                (step.liquidity, step.fee) = computeLiquidityAndFee(state.liquidityCurrent);
                 // protect LPs by adjusting the fee only if the current fee is greater than the stored fee
-                step.fee = uint16(Math.max(state.feeFloor, step.fee));
+                step.fee = uint16(Math.max(state.feeFloor, getFee()));
 
                 // recompute reserves given the current price/liquidity
                 (step.reserve0Virtual, step.reserve1Virtual) = PriceMath.getVirtualReservesAtPrice(
                     state.price,
-                    step.liquidity,
+                    state.liquidity,
                     false
                 );
 
@@ -609,7 +571,7 @@ contract UniswapV3Pair is IUniswapV3Pair {
                 (uint256 amountInMax, uint256 amountOutMax) = PriceMath.getInputToRatio(
                     step.reserve0Virtual,
                     step.reserve1Virtual,
-                    step.liquidity,
+                    state.liquidity,
                     step.priceNext,
                     step.fee,
                     params.zeroForOne
@@ -637,7 +599,7 @@ contract UniswapV3Pair is IUniswapV3Pair {
                     }
 
                     // update global fee tracker
-                    state.feeGrowthGlobal._x += FixedPoint128.fraction(feePaid, step.liquidity)._x;
+                    state.feeGrowthGlobal._x += FixedPoint128.fraction(feePaid, state.liquidity)._x;
                 }
 
                 // handle the swap
@@ -696,23 +658,24 @@ contract UniswapV3Pair is IUniswapV3Pair {
                     );
                     tickInfo.secondsOutside = _blockTimestamp() - tickInfo.secondsOutside; // overflow is desired
 
-                    int128[NUM_FEE_OPTIONS] memory tickLiquidityDeltas = [
-                        tickInfo.liquidityDelta[0],
-                        tickInfo.liquidityDelta[1],
-                        tickInfo.liquidityDelta[2],
-                        tickInfo.liquidityDelta[3],
-                        tickInfo.liquidityDelta[4],
-                        tickInfo.liquidityDelta[5]
-                    ];
-                    // update liquidityCurrent, subi from right to left, addi from left to right
-                    if (params.zeroForOne) {
-                        for (uint8 i = 0; i < NUM_FEE_OPTIONS; i++)
-                            state.liquidityCurrent[i] = uint128(state.liquidityCurrent[i].subi(tickLiquidityDeltas[i]));
-                    } else {
-                        for (uint8 i = 0; i < NUM_FEE_OPTIONS; i++)
-                            state.liquidityCurrent[i] = uint128(state.liquidityCurrent[i].addi(tickLiquidityDeltas[i]));
+                    int256 liquidityDeltaNet;
+                    // loop through each entry in liquidityDelta
+                    for (uint8 i = 0; i < NUM_FEE_OPTIONS; i++) {
+                        int256 liquidityDelta = tickInfo.liquidityDelta[i];
+                        // increment net liquidityDelta
+                        liquidityDeltaNet = liquidityDeltaNet.add(liquidityDelta);
+
+                        // update liquidityCurrent, subi from right to left, addi from left to right
+                        // can't put this in state because a) it's hard and b) we need it up-to-date for getFee
+                        // can't overflow
+                        if (params.zeroForOne) liquidityCurrent[i] = uint128(liquidityCurrent[i].subi(liquidityDelta));
+                        else liquidityCurrent[i] = uint128(liquidityCurrent[i].addi(liquidityDelta));
                     }
-                    state.crossedInitializedTick = true;
+
+                    // update liquidity, subi from right to left, addi from left to right
+                    // can't overflow
+                    if (params.zeroForOne) state.liquidity = uint128(state.liquidity.subi(liquidityDeltaNet));
+                    else state.liquidity = uint128(state.liquidity.addi(liquidityDeltaNet));
                 }
 
                 // this is ok because we still have amountInRemaining so price is guaranteed to be less than the tick
@@ -733,15 +696,6 @@ contract UniswapV3Pair is IUniswapV3Pair {
         priceCurrent = state.price;
         tickCurrent = state.tick;
 
-        if (state.crossedInitializedTick) {
-            liquidityCurrent[0] = state.liquidityCurrent[0];
-            liquidityCurrent[1] = state.liquidityCurrent[1];
-            liquidityCurrent[2] = state.liquidityCurrent[2];
-            liquidityCurrent[3] = state.liquidityCurrent[3];
-            liquidityCurrent[4] = state.liquidityCurrent[4];
-            liquidityCurrent[5] = state.liquidityCurrent[5];
-        }
-
         if (params.zeroForOne) {
             feeToFees0 = state.feeToFees;
             feeGrowthGlobal0 = state.feeGrowthGlobal;
