diff --git a/src/test/PoolModifyLiquidityTest.sol b/src/test/PoolModifyLiquidityTest.sol
index 3cf7a924..21412ef8 100644
--- a/src/test/PoolModifyLiquidityTest.sol
+++ b/src/test/PoolModifyLiquidityTest.sol
@@ -62,16 +62,21 @@ contract PoolModifyLiquidityTest is Test, PoolTestBase {
         CallbackData memory data = abi.decode(rawData, (CallbackData));
 
         BalanceDelta delta = manager.modifyLiquidity(data.key, data.params, data.hookData);
+        // Checks that the current hook is cleared if there is an access lock. Note that if this router is ever used in a nested lock this will fail.
+        assertEq(address(manager.getCurrentHook()), address(0));
 
-        (,,, int256 delta0) = _fetchBalances(data.key.currency0, data.sender, address(this));
-        (,,, int256 delta1) = _fetchBalances(data.key.currency1, data.sender, address(this));
+        (,,, int256 delta0) = _fetchBalances(data.key.currency0, data.sender);
+        (,,, int256 delta1) = _fetchBalances(data.key.currency1, data.sender);
 
-        if (data.params.liquidityDelta > 0) {
-            assert(delta0 > 0 || delta1 > 0 || data.key.hooks.hasPermission(Hooks.NO_OP_FLAG));
-            assert(!(delta0 < 0 || delta1 < 0));
-        } else {
-            assert(delta0 < 0 || delta1 < 0 || data.key.hooks.hasPermission(Hooks.NO_OP_FLAG));
-            assert(!(delta0 > 0 || delta1 > 0));
+        // These assertions only apply in non lock-accessing pools.
+        if (!data.key.hooks.hasPermission(Hooks.ACCESS_LOCK_FLAG)) {
+            if (data.params.liquidityDelta > 0) {
+                assert(delta0 > 0 || delta1 > 0 || data.key.hooks.hasPermission(Hooks.NO_OP_FLAG));
+                assert(!(delta0 < 0 || delta1 < 0));
+            } else {
+                assert(delta0 < 0 || delta1 < 0 || data.key.hooks.hasPermission(Hooks.NO_OP_FLAG));
+                assert(!(delta0 > 0 || delta1 > 0));
+            }
         }
 
         if (delta0 > 0) _settle(data.key.currency0, data.sender, int128(delta0), data.settleUsingTransfer);
