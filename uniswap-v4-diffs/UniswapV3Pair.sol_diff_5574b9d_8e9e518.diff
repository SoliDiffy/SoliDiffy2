diff --git a/contracts/UniswapV3Pair.sol b/contracts/UniswapV3Pair.sol
index 70023954..941eb88a 100644
--- a/contracts/UniswapV3Pair.sol
+++ b/contracts/UniswapV3Pair.sol
@@ -143,7 +143,8 @@ contract UniswapV3Pair is UniswapV3ERC20, IUniswapV3Pair {
     }
 
     // update reserves and, on the first call per block, price accumulators
-    function _update(uint112 _reserve0, uint112 _reserve1) private {
+    function _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) private {
+        require(balance0 <= uint112(-1) && balance1 <= uint112(-1), 'UniswapV3: OVERFLOW');
         uint32 blockTimestamp = uint32(block.timestamp % 2**32);
         uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired
         if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {
@@ -151,9 +152,10 @@ contract UniswapV3Pair is UniswapV3ERC20, IUniswapV3Pair {
             price0CumulativeLast += FixedPoint.encode(_reserve1).div(_reserve0).mul(timeElapsed).decode144();
             price1CumulativeLast += FixedPoint.encode(_reserve0).div(_reserve1).mul(timeElapsed).decode144();
         }
-        reserve0 = _reserve0;
-        reserve1 = _reserve1;
+        reserve0 = uint112(balance0);
+        reserve1 = uint112(balance1);
         blockTimestampLast = blockTimestamp;
+        emit Sync(reserve0, reserve1);
     }
 
     // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)
@@ -178,8 +180,13 @@ contract UniswapV3Pair is UniswapV3ERC20, IUniswapV3Pair {
     }
 
     // this low-level function should be called from a contract which performs important safety checks
-    function mint(address to, uint amount0, uint amount1) external override lock returns (uint liquidity) {
+    function mint(address to) external override lock returns (uint liquidity) {
         (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings
+        uint balance0 = IERC20(token0).balanceOf(address(this));
+        uint balance1 = IERC20(token1).balanceOf(address(this));
+        uint amount0 = balance0.sub(_reserve0);
+        uint amount1 = balance1.sub(_reserve1);
+
         bool feeOn = _mintFee(_reserve0, _reserve1);
         uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee
         if (_totalSupply == 0) {
@@ -191,41 +198,36 @@ contract UniswapV3Pair is UniswapV3ERC20, IUniswapV3Pair {
         require(liquidity > 0, 'UniswapV3: INSUFFICIENT_LIQUIDITY_MINTED');
         _mint(to, liquidity);
 
-        _reserve0 += amount0;
-        _reserve1 += amount1;
-        _update(_reserve0, _reserve1);
-        if (feeOn) kLast = uint(_reserve0).mul(_reserve1);
+        _update(balance0, balance1, _reserve0, _reserve1);
+        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date
         emit Mint(msg.sender, amount0, amount1);
     }
 
     // this low-level function should be called from a contract which performs important safety checks
-    function burn(address to, uint liquidity) external override lock returns (uint amount0, uint amount1) {
+    function burn(address to) external override lock returns (uint amount0, uint amount1) {
         (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings
         address _token0 = token0;                                // gas savings
         address _token1 = token1;                                // gas savings
+        uint balance0 = IERC20(_token0).balanceOf(address(this));
+        uint balance1 = IERC20(_token1).balanceOf(address(this));
+        uint liquidity = balanceOf[address(this)];
 
         bool feeOn = _mintFee(_reserve0, _reserve1);
         uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee
-        amount0 = liquidity.mul(uint(reserve0)) / _totalSupply; // using balances ensures pro-rata distribution
-        amount1 = liquidity.mul(uint(reserve1)) / _totalSupply; // using balances ensures pro-rata distribution
+        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution
+        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution
         require(amount0 > 0 && amount1 > 0, 'UniswapV3: INSUFFICIENT_LIQUIDITY_BURNED');
-        _burn(msg.sender, liquidity);
+        _burn(address(this), liquidity);
         TransferHelper.safeTransfer(_token0, to, amount0);
         TransferHelper.safeTransfer(_token1, to, amount1);
-        _reserve0 -= amount0;
-        _reserve1 -= amount1;
-        _update(_reserve0, _reserve1);
+        balance0 = IERC20(_token0).balanceOf(address(this));
+        balance1 = IERC20(_token1).balanceOf(address(this));
+
+        _update(balance0, balance1, _reserve0, _reserve1);
         if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date
         emit Burn(msg.sender, amount0, amount1, to);
     }
 
-    // donate to other liquidity providers by burning liquidity tokens without receiving tokens in return
-    // TODO: figure out interaction with protocol fee
-    function give(uint liquidity) {
-        _burn(msg.sender, liquidity);
-        emit Give(msg.sender, liquidity);
-    }
-
     function getTradeToRatio(uint112 y0, uint112 x0, FixedPoint.uq112x112 memory price) internal view returns (uint112) {
         // todo: clean up this monstrosity, which won't even compile because the stack is too deep
         // simplification of https://www.wolframalpha.com/input/?i=solve+%28x0+-+x0*%281-g%29*y%2F%28y0+%2B+%281-g%29*y%29%29%2F%28y0+%2B+y%29+%3D+p+for+y
@@ -256,16 +258,17 @@ contract UniswapV3Pair is UniswapV3ERC20, IUniswapV3Pair {
             uint112 adjustedAmountToTrade = amountToTrade * (10000 - lpFee) / 10000;
             uint112 amountOut = (adjustedAmountToTrade * _reserve1) / (_reserve0 + adjustedAmountToTrade);
             _reserve0 -= amountOut;
-            // TODO: handle overflow?
             _reserve1 += amountToTrade;
 
             amountInLeft = amountInLeft - amountToTrade;
-            if (amountInLeft == 0) { // shift past the tick
+            if (amountInLeft == 0) {
+                // shift past the tick
+
                 FixedPoint.uq112x112 memory k = Math.sqrt(uint(_reserve0) * uint(_reserve1)) / virtualSupply;
                 TickInfo memory _oldTickInfo = tickInfos[_currentTick];
                 FixedPoint.uq112x112 memory _oldKGrowthOutside = _oldTickInfo.kGrowthOutside ? _oldTickInfo.kGrowthOutside : FixedPoint.encode(uint112(1));
                 Delta _delta = deltas[_currentTick];
-                // TODO: mint protocol fee (in some way that batches the updates across multiple ticks)
+                
                 // kick out liquidity
                 uint112 tokensOut = (uint(reserve0) * uint(_delta.sharesOut)) / uint(_virtualSupply);
                 _reserve0 -= tokensOut;
@@ -295,7 +298,7 @@ contract UniswapV3Pair is UniswapV3ERC20, IUniswapV3Pair {
         reserve1 = _reserve1;
         if (data.length > 0) IUniswapV3Callee(to).uniswapV3Call(msg.sender, 0, totalAmountOut, data);
         TransferHelper.safeTransferFrom(token0, msg.sender, address(this), amount0In);
-        
+
         // TODO: emit event, update oracle, etc
     }
 
