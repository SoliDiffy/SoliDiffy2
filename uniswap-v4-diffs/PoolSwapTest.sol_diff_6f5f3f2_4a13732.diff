diff --git a/src/test/PoolSwapTest.sol b/src/test/PoolSwapTest.sol
index 5cde518f..a4e1e574 100644
--- a/src/test/PoolSwapTest.sol
+++ b/src/test/PoolSwapTest.sol
@@ -54,42 +54,47 @@ contract PoolSwapTest is Test, PoolTestBase {
 
         CallbackData memory data = abi.decode(rawData, (CallbackData));
 
-        (,, uint256 reserveBefore0, int256 deltaBefore0) =
-            _fetchBalances(data.key.currency0, data.sender, address(this));
-        (,, uint256 reserveBefore1, int256 deltaBefore1) =
-            _fetchBalances(data.key.currency1, data.sender, address(this));
+        (,, uint256 reserveBefore0, int256 deltaBefore0) = _fetchBalances(data.key.currency0, data.sender);
+        (,, uint256 reserveBefore1, int256 deltaBefore1) = _fetchBalances(data.key.currency1, data.sender);
 
         assertEq(deltaBefore0, 0);
         assertEq(deltaBefore1, 0);
 
         BalanceDelta delta = manager.swap(data.key, data.params, data.hookData);
 
-        (,, uint256 reserveAfter0, int256 deltaAfter0) = _fetchBalances(data.key.currency0, data.sender, address(this));
-        (,, uint256 reserveAfter1, int256 deltaAfter1) = _fetchBalances(data.key.currency1, data.sender, address(this));
-
-        assertEq(reserveBefore0, reserveAfter0);
-        assertEq(reserveBefore1, reserveAfter1);
-
-        if (!data.key.hooks.hasPermission(Hooks.NO_OP_FLAG)) {
-            if (data.params.zeroForOne) {
-                if (data.params.amountSpecified > 0) {
-                    // exact input, 0 for 1
-                    assertEq(deltaAfter0, data.params.amountSpecified);
-                    assert(deltaAfter1 < 0);
-                } else {
-                    // exact output, 0 for 1
-                    assert(deltaAfter0 > 0);
-                    assertEq(deltaAfter1, data.params.amountSpecified);
-                }
-            } else {
-                if (data.params.amountSpecified > 0) {
-                    // exact input, 1 for 0
-                    assertEq(deltaAfter1, data.params.amountSpecified);
-                    assert(deltaAfter0 < 0);
+        // Checks that the current hook is cleared if there is an access lock. Note that if this router is ever used in a nested lock this will fail.
+        assertEq(address(manager.getCurrentHook()), address(0));
+
+        (,, uint256 reserveAfter0, int256 deltaAfter0) = _fetchBalances(data.key.currency0, data.sender);
+        (,, uint256 reserveAfter1, int256 deltaAfter1) = _fetchBalances(data.key.currency1, data.sender);
+
+        if (!data.key.hooks.hasPermission(Hooks.ACCESS_LOCK_FLAG)) {
+            // Hanndle assertions when the hook cannot access the lock.
+            // IE if the hook can access the lock, the reserves before and after are not necessarily the same. Hook can "take".
+            assertEq(reserveBefore0, reserveAfter0);
+            assertEq(reserveBefore1, reserveAfter1);
+
+            if (!data.key.hooks.hasPermission(Hooks.NO_OP_FLAG)) {
+                if (data.params.zeroForOne) {
+                    if (data.params.amountSpecified > 0) {
+                        // exact input, 0 for 1
+                        assertEq(deltaAfter0, data.params.amountSpecified);
+                        assert(deltaAfter1 < 0);
+                    } else {
+                        // exact output, 0 for 1
+                        assert(deltaAfter0 > 0);
+                        assertEq(deltaAfter1, data.params.amountSpecified);
+                    }
                 } else {
-                    // exact output, 1 for 0
-                    assert(deltaAfter1 > 0);
-                    assertEq(deltaAfter0, data.params.amountSpecified);
+                    if (data.params.amountSpecified > 0) {
+                        // exact input, 1 for 0
+                        assertEq(deltaAfter1, data.params.amountSpecified);
+                        assert(deltaAfter0 < 0);
+                    } else {
+                        // exact output, 1 for 0
+                        assert(deltaAfter1 > 0);
+                        assertEq(deltaAfter0, data.params.amountSpecified);
+                    }
                 }
             }
         }
