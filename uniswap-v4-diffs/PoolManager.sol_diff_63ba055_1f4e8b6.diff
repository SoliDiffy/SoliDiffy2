diff --git a/src/PoolManager.sol b/src/PoolManager.sol
index b23895be..02ff21ab 100644
--- a/src/PoolManager.sol
+++ b/src/PoolManager.sol
@@ -16,12 +16,12 @@ import {IUnlockCallback} from "./interfaces/callback/IUnlockCallback.sol";
 import {ProtocolFees} from "./ProtocolFees.sol";
 import {ERC6909Claims} from "./ERC6909Claims.sol";
 import {PoolId, PoolIdLibrary} from "./types/PoolId.sol";
-import {BalanceDelta, BalanceDeltaLibrary} from "./types/BalanceDelta.sol";
+import {BalanceDelta, BalanceDeltaLibrary, toBalanceDelta} from "./types/BalanceDelta.sol";
 import {BeforeSwapDelta} from "./types/BeforeSwapDelta.sol";
 import {Lock} from "./libraries/Lock.sol";
 import {CurrencyDelta} from "./libraries/CurrencyDelta.sol";
 import {NonZeroDeltaCount} from "./libraries/NonZeroDeltaCount.sol";
-import {CurrencyReserves} from "./libraries/CurrencyReserves.sol";
+import {Reserves} from "./libraries/Reserves.sol";
 import {Extsload} from "./Extsload.sol";
 import {Exttload} from "./Exttload.sol";
 import {CustomRevert} from "./libraries/CustomRevert.sol";
@@ -84,7 +84,7 @@ contract PoolManager is IPoolManager, ProtocolFees, NoDelegateCall, ERC6909Claim
     using Position for mapping(bytes32 => Position.Info);
     using CurrencyDelta for Currency;
     using LPFeeLibrary for uint24;
-    using CurrencyReserves for Currency;
+    using Reserves for Currency;
     using CustomRevert for bytes4;
 
     /// @inheritdoc IPoolManager
@@ -119,6 +119,7 @@ contract PoolManager is IPoolManager, ProtocolFees, NoDelegateCall, ERC6909Claim
     /// @inheritdoc IPoolManager
     function initialize(PoolKey memory key, uint160 sqrtPriceX96, bytes calldata hookData)
         external
+        override
         noDelegateCall
         returns (int24 tick)
     {
@@ -149,7 +150,7 @@ contract PoolManager is IPoolManager, ProtocolFees, NoDelegateCall, ERC6909Claim
         PoolKey memory key,
         IPoolManager.ModifyLiquidityParams memory params,
         bytes calldata hookData
-    ) external onlyWhenUnlocked noDelegateCall returns (BalanceDelta callerDelta, BalanceDelta feesAccrued) {
+    ) external override onlyWhenUnlocked noDelegateCall returns (BalanceDelta callerDelta, BalanceDelta feesAccrued) {
         PoolId id = key.toId();
         Pool.State storage pool = _getPool(id);
         pool.checkPoolInitialized();
@@ -185,6 +186,7 @@ contract PoolManager is IPoolManager, ProtocolFees, NoDelegateCall, ERC6909Claim
     /// @inheritdoc IPoolManager
     function swap(PoolKey memory key, IPoolManager.SwapParams memory params, bytes calldata hookData)
         external
+        override
         onlyWhenUnlocked
         noDelegateCall
         returns (BalanceDelta swapDelta)
@@ -246,6 +248,7 @@ contract PoolManager is IPoolManager, ProtocolFees, NoDelegateCall, ERC6909Claim
     /// @inheritdoc IPoolManager
     function donate(PoolKey memory key, uint256 amount0, uint256 amount1, bytes calldata hookData)
         external
+        override
         onlyWhenUnlocked
         noDelegateCall
         returns (BalanceDelta delta)
@@ -263,15 +266,13 @@ contract PoolManager is IPoolManager, ProtocolFees, NoDelegateCall, ERC6909Claim
     }
 
     /// @inheritdoc IPoolManager
-    function sync(Currency currency) external {
-        CurrencyReserves.requireNotSynced();
-        if (currency.isNative()) return;
-        uint256 balance = currency.balanceOfSelf();
-        CurrencyReserves.syncCurrencyAndReserves(currency, balance);
+    function sync(Currency currency) public returns (uint256 balance) {
+        balance = currency.balanceOfSelf();
+        currency.setReserves(balance);
     }
 
     /// @inheritdoc IPoolManager
-    function take(Currency currency, address to, uint256 amount) external onlyWhenUnlocked {
+    function take(Currency currency, address to, uint256 amount) external override onlyWhenUnlocked {
         unchecked {
             // negation must be safe as amount is not negative
             _accountDelta(currency, -(amount.toInt128()), msg.sender);
@@ -280,38 +281,32 @@ contract PoolManager is IPoolManager, ProtocolFees, NoDelegateCall, ERC6909Claim
     }
 
     /// @inheritdoc IPoolManager
-    function settle() external payable onlyWhenUnlocked returns (uint256 paid) {
-        Currency currency = CurrencyReserves.getSyncedCurrency();
-        // If not previously synced, expects native currency to be settled because CurrencyLibrary.NATIVE == address(0)
+    function settle(Currency currency) external payable override onlyWhenUnlocked returns (uint256 paid) {
         if (currency.isNative()) {
             paid = msg.value;
         } else {
             if (msg.value > 0) NonZeroNativeValue.selector.revertWith();
-            // Reserves are guaranteed to be set, because currency and reserves are always set together
-            uint256 reservesBefore = CurrencyReserves.getSyncedReserves();
-            uint256 reservesNow = currency.balanceOfSelf();
+            uint256 reservesBefore = currency.getReserves();
+            uint256 reservesNow = sync(currency);
             paid = reservesNow - reservesBefore;
-            CurrencyReserves.resetCurrency();
         }
 
         _accountDelta(currency, paid.toInt128(), msg.sender);
     }
 
     /// @inheritdoc IPoolManager
-    function mint(address to, uint256 id, uint256 amount) external onlyWhenUnlocked {
+    function mint(address to, uint256 id, uint256 amount) external override onlyWhenUnlocked {
         unchecked {
-            Currency currency = CurrencyLibrary.fromId(id);
             // negation must be safe as amount is not negative
-            _accountDelta(currency, -(amount.toInt128()), msg.sender);
-            _mint(to, currency.toId(), amount);
+            _accountDelta(CurrencyLibrary.fromId(id), -(amount.toInt128()), msg.sender);
+            _mint(to, id, amount);
         }
     }
 
     /// @inheritdoc IPoolManager
-    function burn(address from, uint256 id, uint256 amount) external onlyWhenUnlocked {
-        Currency currency = CurrencyLibrary.fromId(id);
-        _accountDelta(currency, amount.toInt128(), msg.sender);
-        _burnFrom(from, currency.toId(), amount);
+    function burn(address from, uint256 id, uint256 amount) external override onlyWhenUnlocked {
+        _accountDelta(CurrencyLibrary.fromId(id), amount.toInt128(), msg.sender);
+        _burnFrom(from, id, amount);
     }
 
     /// @inheritdoc IPoolManager
@@ -328,16 +323,13 @@ contract PoolManager is IPoolManager, ProtocolFees, NoDelegateCall, ERC6909Claim
     function _accountDelta(Currency currency, int128 delta, address target) internal {
         if (delta == 0) return;
 
-        int256 current = currency.getDelta(target);
-        int256 next = current + delta;
+        (int256 previous, int256 next) = currency.applyDelta(target, delta);
 
         if (next == 0) {
             NonZeroDeltaCount.decrement();
-        } else if (current == 0) {
+        } else if (previous == 0) {
             NonZeroDeltaCount.increment();
         }
-
-        currency.setDelta(target, next);
     }
 
     /// @notice Accounts the deltas of 2 currencies to a target address
