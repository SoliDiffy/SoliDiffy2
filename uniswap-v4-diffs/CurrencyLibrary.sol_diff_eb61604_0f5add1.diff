diff --git a/contracts/libraries/CurrencyLibrary.sol b/contracts/libraries/CurrencyLibrary.sol
index 9e8848b9..ca85930e 100644
--- a/contracts/libraries/CurrencyLibrary.sol
+++ b/contracts/libraries/CurrencyLibrary.sol
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-2.0-or-later
 pragma solidity ^0.8.19;
 
-import {IERC20Minimal} from "../interfaces/external/IERC20Minimal.sol";
+import {IERC20Minimal} from '../interfaces/external/IERC20Minimal.sol';
 
 type Currency is address;
 
@@ -20,7 +20,7 @@ library CurrencyLibrary {
 
     function transfer(Currency currency, address to, uint256 amount) internal {
         if (currency.isNative()) {
-            (bool success,) = to.call{value: amount}("");
+            (bool success, ) = to.call{value: amount}('');
             if (!success) revert NativeTransferFailed();
         } else {
             // implementation from
@@ -36,17 +36,16 @@ library CurrencyLibrary {
                 mstore(add(freeMemoryPointer, 4), to) // Append the "to" argument.
                 mstore(add(freeMemoryPointer, 36), amount) // Append the "amount" argument.
 
-                success :=
-                    and(
-                        // Set success to whether the call reverted, if not we check it either
-                        // returned exactly 1 (can't just be non-zero data), or had no return data.
-                        or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),
-                        // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.
-                        // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.
-                        // Counterintuitively, this call must be positioned second to the or() call in the
-                        // surrounding and() call or else returndatasize() will be zero during the computation.
-                        call(gas(), currency, 0, freeMemoryPointer, 68, 0, 32)
-                    )
+                success := and(
+                    // Set success to whether the call reverted, if not we check it either
+                    // returned exactly 1 (can't just be non-zero data), or had no return data.
+                    or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),
+                    // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.
+                    // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.
+                    // Counterintuitively, this call must be positioned second to the or() call in the
+                    // surrounding and() call or else returndatasize() will be zero during the computation.
+                    call(gas(), currency, 0, freeMemoryPointer, 68, 0, 32)
+                )
             }
 
             if (!success) revert ERC20TransferFailed();
