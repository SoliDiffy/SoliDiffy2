diff --git a/contracts/ERC20.sol b/contracts/ERC20.sol
index db4c1008..6995d35c 100644
--- a/contracts/ERC20.sol
+++ b/contracts/ERC20.sol
@@ -14,8 +14,8 @@ contract ERC20 is IERC20 {
     mapping (address => mapping (address => uint)) public allowance;
 
 	bytes32 public DOMAIN_SEPARATOR;
-    // keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)");
-	bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;
+    // keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 expiration)");
+	bytes32 public constant PERMIT_TYPEHASH = 0xf0a99559fef847d211c4182aa5791e1529af3ce414597e8210f570d662791c01;
     mapping (address => uint) public nonces;
 
     event Transfer(address indexed from, address indexed to, uint value);
@@ -67,7 +67,7 @@ contract ERC20 is IERC20 {
         return true;
     }
 
-    function forfeit(uint value) external {
+    function unsafeBurn(uint value) external {
         _burn(msg.sender, value);
     }
 
@@ -84,7 +84,7 @@ contract ERC20 is IERC20 {
         return true;
     }
 
-    function forfeitFrom(address from, uint value) external {
+    function unsafeBurnFrom(address from, uint value) external {
         if (allowance[from][msg.sender] != uint(-1)) {
             allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);
         }
@@ -92,18 +92,18 @@ contract ERC20 is IERC20 {
     }
 
     function permit(
-        address owner, address spender, uint value, uint nonce, uint deadline, uint8 v, bytes32 r, bytes32 s
+        address owner, address spender, uint value, uint nonce, uint expiration, uint8 v, bytes32 r, bytes32 s
     )
         external
     {
         require(nonce == nonces[owner]++, "ERC20: INVALID_NONCE");
-        require(deadline > block.timestamp, "ERC20: EXPIRED"); // solium-disable-line security/no-block-members
+        require(expiration > block.timestamp, "ERC20: EXPIRED"); // solium-disable-line security/no-block-members
         require(v == 27 || v == 28, "ERC20: INVALID_V");
         require(uint(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, "ERC20: INVALID_S");
         bytes32 digest = keccak256(abi.encodePacked(
             "\x19\x01",
             DOMAIN_SEPARATOR,
-            keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonce, deadline))
+            keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonce, expiration))
         ));
         address recoveredAddress = ecrecover(digest, v, r, s);
         require(recoveredAddress != address(0) && recoveredAddress == owner, "ERC20: INVALID_SIGNATURE");
