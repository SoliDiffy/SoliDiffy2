diff --git a/contracts/UniswapV3Pair.sol b/contracts/UniswapV3Pair.sol
index 2c0b2506..12ab8aa3 100644
--- a/contracts/UniswapV3Pair.sol
+++ b/contracts/UniswapV3Pair.sol
@@ -137,16 +137,13 @@ contract UniswapV3Pair is IUniswapV3Pair {
         return uint32(block.timestamp); // truncation is desired
     }
 
-    // increases the target observation cardinality, callable by anyone after initialize.
-    function increaseObservationCardinality(uint16 observationCardinalityTarget) external override lock {
-        Slot0 memory _slot0 = slot0;
-        (slot0.observationCardinality, slot0.observationCardinalityTarget) = observations.grow(
-            _slot0.observationIndex,
-            _slot0.observationCardinality,
-            _slot0.observationCardinalityTarget,
-            observationCardinalityTarget
-        );
-        emit ObservationCardinalityIncreased(_slot0.observationCardinalityTarget, observationCardinalityTarget);
+    // increases the target observation cardinality, callable by anyone. does not lock the contract because
+    // it is always safe to call, even within the callback of a swap or mint.
+    function increaseObservationCardinality(uint16 observationCardinality) external override {
+        uint16 target = slot0.observationCardinalityTarget;
+        require(observationCardinality > target, 'LTE');
+        for (uint16 i = target; i < observationCardinality; i++) observations[i].blockTimestamp = 1; // trigger SSTORE
+        slot0.observationCardinalityTarget = observationCardinality;
     }
 
     function scry(uint32 secondsAgo)
@@ -185,18 +182,26 @@ contract UniswapV3Pair is IUniswapV3Pair {
         require(tick >= minTick, 'MIN');
         require(tick < maxTick, 'MAX');
 
-        (uint16 cardinality, uint16 target) = observations.initialize(_blockTimestamp());
+        Slot0 memory _slot0 =
+            Slot0({
+                sqrtPriceX96: sqrtPriceX96,
+                tick: tick,
+                observationIndex: 0,
+                observationCardinality: 1,
+                observationCardinalityTarget: 1,
+                feeProtocol: 0,
+                unlocked: true
+            });
 
-        slot0 = Slot0({
-            sqrtPriceX96: sqrtPriceX96,
-            tick: tick,
-            observationIndex: 0,
-            observationCardinality: cardinality,
-            observationCardinalityTarget: target,
-            feeProtocol: 0,
-            unlocked: true
+        observations[_slot0.observationIndex] = Oracle.Observation({
+            blockTimestamp: _blockTimestamp(),
+            tickCumulative: 0,
+            liquidityCumulative: 0,
+            initialized: true
         });
 
+        slot0 = _slot0;
+
         emit Initialized(sqrtPriceX96, tick);
     }
 
