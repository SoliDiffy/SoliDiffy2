diff --git a/contracts/test/SwapMathEchidnaTest.sol b/contracts/test/SwapMathEchidnaTest.sol
index 4385f006..49cd1725 100644
--- a/contracts/test/SwapMathEchidnaTest.sol
+++ b/contracts/test/SwapMathEchidnaTest.sol
@@ -1,39 +1,41 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 pragma solidity =0.6.12;
 
+import '@uniswap/lib/contracts/libraries/Babylonian.sol';
+
 import '../libraries/FixedPoint128.sol';
 import '../libraries/TickMath.sol';
 import '../libraries/SwapMath.sol';
 
 contract SwapMathEchidnaTest {
-    function requirePriceWithinBounds(uint128 price) private pure {
-        require(price < TickMath.getRatioAtTick(TickMath.MAX_TICK / 2));
-        require(price >= TickMath.getRatioAtTick(TickMath.MIN_TICK / 2));
+    function requirePriceWithinBounds(uint256 price) private pure {
+        require(price < TickMath.getRatioAtTick(TickMath.MAX_TICK));
+        require(price >= TickMath.getRatioAtTick(TickMath.MIN_TICK));
     }
 
     function checkComputeSwapStepInvariants(
-        uint128 sqrtPriceRaw,
-        uint128 sqrtPriceTargetRaw,
+        uint256 priceRaw,
+        uint256 priceTargetRaw,
         uint128 liquidity,
         uint256 amountInMax,
         uint24 feePips
     ) external pure {
-        requirePriceWithinBounds(sqrtPriceRaw);
-        requirePriceWithinBounds(sqrtPriceTargetRaw);
+        requirePriceWithinBounds(priceRaw);
+        requirePriceWithinBounds(priceTargetRaw);
         require(feePips < 1e6);
 
-        bool zeroForOne = sqrtPriceRaw >= sqrtPriceTargetRaw;
+        bool zeroForOne = priceRaw >= priceTargetRaw;
 
         require(amountInMax > 0);
 
         (
-            FixedPoint64.uq64x64 memory sqrtQ,
+            FixedPoint128.uq128x128 memory priceAfter,
             uint256 amountIn, /*uint256 amountOut*/
             ,
             uint256 feeAmount
         ) = SwapMath.computeSwapStep(
-            FixedPoint64.uq64x64(sqrtPriceRaw),
-            FixedPoint64.uq64x64(sqrtPriceTargetRaw),
+            FixedPoint128.uq128x128(priceRaw),
+            FixedPoint128.uq128x128(priceTargetRaw),
             liquidity,
             amountInMax,
             feePips,
@@ -41,11 +43,11 @@ contract SwapMathEchidnaTest {
         );
 
         if (zeroForOne) {
-            assert(sqrtQ._x <= sqrtPriceRaw);
-            assert(sqrtQ._x >= sqrtPriceTargetRaw);
+            assert(Babylonian.sqrt(priceAfter._x) <= Babylonian.sqrt(priceRaw));
+            assert(Babylonian.sqrt(priceAfter._x) >= Babylonian.sqrt(priceTargetRaw));
         } else {
-            assert(sqrtQ._x >= sqrtPriceRaw);
-            assert(sqrtQ._x <= sqrtPriceTargetRaw);
+            assert(Babylonian.sqrt(priceAfter._x) >= Babylonian.sqrt(priceRaw));
+            assert(Babylonian.sqrt(priceAfter._x) <= Babylonian.sqrt(priceTargetRaw));
         }
 
         assert(amountIn + feeAmount <= amountInMax);
