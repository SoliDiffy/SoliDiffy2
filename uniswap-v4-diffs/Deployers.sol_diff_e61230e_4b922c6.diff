diff --git a/test/foundry-tests/utils/Deployers.sol b/test/foundry-tests/utils/Deployers.sol
index 987c8603..777ba750 100644
--- a/test/foundry-tests/utils/Deployers.sol
+++ b/test/foundry-tests/utils/Deployers.sol
@@ -1,7 +1,5 @@
-// SPDX-License-Identifier: UNLICENSED
 pragma solidity ^0.8.19;
 
-import {Hooks} from "../../../contracts/libraries/Hooks.sol";
 import {TestERC20} from "../../../contracts/test/TestERC20.sol";
 import {Currency} from "../../../contracts/libraries/CurrencyLibrary.sol";
 import {IHooks} from "../../../contracts/interfaces/IHooks.sol";
@@ -10,35 +8,30 @@ import {PoolManager} from "../../../contracts/PoolManager.sol";
 import {PoolId} from "../../../contracts/libraries/PoolId.sol";
 
 contract Deployers {
-    function deployTokens(uint8 count, uint256 totalSupply) internal returns (TestERC20[] memory tokens) {
+    function deployTokens(uint8 count, uint256 totalSupply) public returns (TestERC20[] memory tokens) {
         tokens = new TestERC20[](count);
         for (uint8 i = 0; i < count; i++) {
             tokens[i] = new TestERC20(totalSupply);
         }
     }
 
-    function createPool(PoolManager manager, IHooks hooks, uint24 fee, uint160 sqrtPriceX96)
-        private
+    function createPool(PoolManager manager, IHooks hooks, uint160 sqrtPriceX96)
+        public
         returns (IPoolManager.PoolKey memory key, bytes32 id)
     {
         TestERC20[] memory tokens = deployTokens(2, 2 ** 255);
-        key = IPoolManager.PoolKey(
-            Currency.wrap(address(tokens[0])),
-            Currency.wrap(address(tokens[1])),
-            fee,
-            fee == Hooks.DYNAMIC_FEE ? int24(60) : int24(fee / 100 * 2),
-            hooks
-        );
+        key =
+            IPoolManager.PoolKey(Currency.wrap(address(tokens[0])), Currency.wrap(address(tokens[1])), 3000, 60, hooks);
         id = PoolId.toId(key);
         manager.initialize(key, sqrtPriceX96);
     }
 
-    function createFreshPool(IHooks hooks, uint24 fee, uint160 sqrtPriceX96)
-        internal
+    function createFreshPool(IHooks hooks, uint160 sqrtPriceX96)
+        public
         returns (PoolManager manager, IPoolManager.PoolKey memory key, bytes32 id)
     {
         manager = new PoolManager(500000);
-        (key, id) = createPool(manager, hooks, fee, sqrtPriceX96);
+        (key, id) = createPool(manager, hooks, sqrtPriceX96);
         return (manager, key, id);
     }
 }
