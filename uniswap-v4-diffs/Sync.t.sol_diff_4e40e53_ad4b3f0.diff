diff --git a/test/Sync.t.sol b/test/Sync.t.sol
index b01b25ef..77137697 100644
--- a/test/Sync.t.sol
+++ b/test/Sync.t.sol
@@ -14,9 +14,11 @@ import {IUnlockCallback} from "../src/interfaces/callback/IUnlockCallback.sol";
 import {PoolKey} from "../src/types/PoolKey.sol";
 import {ActionsRouter, Actions} from "../src/test/ActionsRouter.sol";
 import {SafeCast} from "../src/libraries/SafeCast.sol";
-import {Reserves} from "../src/libraries/Reserves.sol";
+import {CurrencyReserves} from "../src/libraries/CurrencyReserves.sol";
 import {StateLibrary} from "../src/libraries/StateLibrary.sol";
 import {TransientStateLibrary} from "../src/libraries/TransientStateLibrary.sol";
+import {NativeERC20} from "../src/test/NativeERC20.sol";
+import {IPoolManager} from "../src/interfaces/IPoolManager.sol";
 
 contract SyncTest is Test, Deployers, GasSnapshot {
     using StateLibrary for IPoolManager;
@@ -34,10 +36,11 @@ contract SyncTest is Test, Deployers, GasSnapshot {
 
     function test_sync_balanceIsZero() public noIsolate {
         assertEq(currency2.balanceOf(address(manager)), uint256(0));
-        uint256 balance = manager.sync(currency2);
+        manager.sync(currency2);
+        uint256 balance = currency2.balanceOf(address(manager));
 
         assertEq(uint256(balance), 0);
-        assertEq(manager.getReserves(currency2), type(uint256).max);
+        assertEq(manager.getSyncedReserves(), 0);
     }
 
     function test_sync_balanceIsNonZero() public noIsolate {
@@ -45,11 +48,12 @@ contract SyncTest is Test, Deployers, GasSnapshot {
         assertGt(currency0Balance, uint256(0));
 
         // Without calling sync, getReserves should return 0.
-        assertEq(manager.getReserves(currency0), 0);
+        assertEq(manager.getSyncedReserves(), 0);
 
-        uint256 balance = manager.sync(currency0);
+        manager.sync(currency0);
+        uint256 balance = currency0.balanceOf(address(manager));
         assertEq(balance, currency0Balance, "balance not equal");
-        assertEq(manager.getReserves(currency0), balance);
+        assertEq(manager.getSyncedReserves(), balance);
     }
 
     function test_settle_withStartingBalance() public noIsolate {
@@ -59,11 +63,12 @@ contract SyncTest is Test, Deployers, GasSnapshot {
             PoolSwapTest.TestSettings({takeClaims: false, settleUsingBurn: false});
 
         // Sync has not been called.
-        assertEq(manager.getReserves(currency0), 0);
+        assertEq(manager.getSyncedReserves(), 0);
 
         swapRouter.swap(key, SWAP_PARAMS, testSettings, new bytes(0));
         (uint256 balanceCurrency0) = currency0.balanceOf(address(manager));
-        assertEq(manager.getReserves(currency0), balanceCurrency0); // Reserves are up to date since settle was called.
+        manager.sync(currency0);
+        assertEq(manager.getSyncedReserves(), balanceCurrency0); // Reserves are up to date since settle + sync was called.
     }
 
     function test_settle_withNoStartingBalance() public noIsolate {
@@ -76,38 +81,54 @@ contract SyncTest is Test, Deployers, GasSnapshot {
         manager.initialize(key2, SQRT_PRICE_1_1, new bytes(0));
 
         // Sync has not been called.
-        assertEq(manager.getReserves(currency2), 0);
+        assertEq(manager.getSyncedReserves(), 0);
         modifyLiquidityRouter.modifyLiquidity(key2, IPoolManager.ModifyLiquidityParams(-60, 60, 100, 0), new bytes(0));
         (uint256 balanceCurrency2) = currency2.balanceOf(address(manager));
-        assertEq(manager.getReserves(currency2), balanceCurrency2);
+        manager.sync(currency2);
+        assertEq(manager.getSyncedReserves(), balanceCurrency2);
     }
 
-    function test_settle_revertsIfSyncNotCalled() public noIsolate {
-        Actions[] memory actions = new Actions[](1);
-        bytes[] memory params = new bytes[](1);
+    function test_settle_payOnBehalf(address taker, uint256 amount) public {
+        vm.assume(taker != address(router));
+        amount = bound(amount, 1, uint256(int256(type(int128).max)));
+        MockERC20(Currency.unwrap(currency2)).approve(address(router), type(uint256).max);
+        MockERC20(Currency.unwrap(currency2)).mint(address(manager), amount);
 
-        actions[0] = Actions.SETTLE;
-        params[0] = abi.encode(currency0);
+        Actions[] memory actions = new Actions[](6);
+        bytes[] memory params = new bytes[](6);
+
+        actions[0] = Actions.PRANK_TAKE_FROM;
+        params[0] = abi.encode(currency2, taker, taker, amount);
+
+        actions[1] = Actions.ASSERT_DELTA_EQUALS;
+        params[1] = abi.encode(currency2, taker, int256(amount) * -1);
+
+        actions[2] = Actions.SYNC;
+        params[2] = abi.encode(currency2);
+
+        actions[3] = Actions.TRANSFER_FROM;
+        params[3] = abi.encode(currency2, address(this), address(manager), amount);
+
+        actions[4] = Actions.SETTLE_FOR;
+        params[4] = abi.encode(taker);
+
+        actions[5] = Actions.ASSERT_DELTA_EQUALS;
+        params[5] = abi.encode(currency2, taker, 0);
 
-        vm.expectRevert(Reserves.ReservesMustBeSynced.selector);
         router.executeActions(actions, params);
     }
 
-    /// @notice When there is no balance and reserves are set to type(uint256).max, no delta should be applied.
+    /// @notice When there is no balance and reserves are set to 0, no delta should be applied.
     function test_settle_noBalanceInPool_shouldNotApplyDelta() public noIsolate {
         assertEq(currency2.balanceOf(address(manager)), uint256(0));
 
-        // Sync has not been called.
-        assertEq(manager.getReserves(currency2), 0);
-
         manager.sync(currency2);
-        assertEq(manager.getReserves(currency2), type(uint256).max);
+        assertEq(manager.getSyncedReserves(), 0);
 
         Actions[] memory actions = new Actions[](2);
         bytes[] memory params = new bytes[](2);
 
         actions[0] = Actions.SETTLE;
-        params[0] = abi.encode(currency2);
 
         actions[1] = Actions.ASSERT_DELTA_EQUALS;
         params[1] = abi.encode(currency2, address(router), 0);
@@ -120,16 +141,15 @@ contract SyncTest is Test, Deployers, GasSnapshot {
         uint256 currency0Balance = currency0.balanceOf(address(manager));
 
         // Sync has not been called.
-        assertEq(manager.getReserves(currency0), 0);
+        assertEq(manager.getSyncedReserves(), 0);
 
         manager.sync(currency0);
-        assertEq(manager.getReserves(currency0), currency0Balance);
+        assertEq(manager.getSyncedReserves(), currency0Balance);
 
         Actions[] memory actions = new Actions[](2);
         bytes[] memory params = new bytes[](2);
 
         actions[0] = Actions.SETTLE;
-        params[0] = abi.encode(currency0);
 
         actions[1] = Actions.ASSERT_DELTA_EQUALS;
         params[1] = abi.encode(currency0, address(router), 0);
@@ -137,95 +157,18 @@ contract SyncTest is Test, Deployers, GasSnapshot {
         router.executeActions(actions, params);
     }
 
-    /// @notice When there is no actual balance in the pool, the ZERO_BALANCE stored in transient reserves should never actually used in calculating the amount paid in settle.
-    /// This tests check that the reservesNow value is set to 0 not ZERO_BALANCE, by checking that an underflow happens when
-    /// a) the contract balance is 0 and b) the reservesBefore value is out of date (sync isn't called again before settle).
-    /// ie because paid = reservesNow - reservesBefore, and because reservesNow < reservesBefore an underflow should happen.
-    function test_settle_afterTake_doesNotApplyDelta() public noIsolate {
-        Currency currency3 = deployMintAndApproveCurrency();
-
-        // Approve the router for a transfer.
-        MockERC20(Currency.unwrap(currency3)).approve(address(router), type(uint256).max);
-
-        // Sync has not been called on currency3.
-        assertEq(manager.getReserves(currency3), 0);
-
-        manager.sync(currency3);
-        // Sync has been called.
-        assertEq(manager.getReserves(currency3), type(uint256).max);
-
-        uint256 maxBalanceCurrency3 = uint256(int256(type(int128).max));
-
-        Actions[] memory actions = new Actions[](10);
-        bytes[] memory params = new bytes[](10);
-
-        // 1. First supply a large amount of currency3 to the pool, by minting and transfering.
-        // Encode a MINT.
-        actions[0] = Actions.MINT;
-        params[0] = abi.encode(address(this), currency3, maxBalanceCurrency3);
-
-        // Encode a TRANSFER.
-        actions[1] = Actions.TRANSFER_FROM;
-        params[1] = abi.encode(currency3, address(this), address(manager), maxBalanceCurrency3);
-
-        // Encode a SETTLE.
-        actions[2] = Actions.SETTLE;
-        params[2] = abi.encode(currency3);
-
-        // 2. Second check that the balances (token balances, reserves balance, and delta balance) are as expected.
-        // The token balance of the pool should be the full balance.
-        // The reserves balance should have been updated to the full balance in settle.
-        // And the delta balance should be 0, because it has been fully settled.
-
-        // Assert that the manager balance is the full balance.
-        actions[3] = Actions.ASSERT_BALANCE_EQUALS;
-        params[3] = abi.encode(currency3, address(manager), maxBalanceCurrency3);
-
-        // Assert that the reserves balance is the full balance.
-        actions[4] = Actions.ASSERT_RESERVES_EQUALS;
-        params[4] = abi.encode(currency3, maxBalanceCurrency3);
-
-        // Assert that the delta is settled.
-        actions[5] = Actions.ASSERT_DELTA_EQUALS;
-        params[5] = abi.encode(currency3, address(router), 0);
-
-        // 3. Take the full balance from the pool, but do not call sync.
-        // Thus reservesBefore stays > 0. And the next reserves call will be 0 causing a revert.
-
-        // Encode a TAKE.
-        actions[6] = Actions.TAKE;
-        params[6] = abi.encode(currency3, address(this), maxBalanceCurrency3);
-
-        // Assert that the actual balance of the pool is 0.
-        actions[7] = Actions.ASSERT_BALANCE_EQUALS;
-        params[7] = abi.encode(currency3, address(manager), 0);
-
-        // Assert that the reserves balance is the old pool balance because sync has not been called.
-        actions[8] = Actions.ASSERT_RESERVES_EQUALS;
-        params[8] = abi.encode(currency3, maxBalanceCurrency3);
-
-        // Encode a SETTLE.
-        actions[9] = Actions.SETTLE;
-        params[9] = abi.encode(currency3);
-
-        // Expect an underflow/overflow because reservesBefore > reservesNow since sync() had not been called before settle.
-        vm.expectRevert(abi.encodeWithSignature("Panic(uint256)", 0x11));
-
-        router.executeActions(actions, params);
-    }
-
-    // @notice This tests expected behavior if you DO NOT call sync. (ie. Do not interact with the pool manager properly. You can lose funds.)
-    function test_settle_withoutSync_doesNotRevert_takesUserBalance() public noIsolate {
+    // @notice This tests expected behavior if you DO NOT call sync before a non native settle. (ie. Do not interact with the pool manager properly. You can lose funds.)
+    function test_settle_nonNative_withoutSync_loseFunds() public noIsolate {
         MockERC20(Currency.unwrap(currency0)).approve(address(router), type(uint256).max);
         uint256 managerCurrency0BalanceBefore = currency0.balanceOf(address(manager));
         uint256 userCurrency0BalanceBefore = currency0.balanceOf(address(this));
 
-        Actions[] memory actions = new Actions[](8);
-        bytes[] memory params = new bytes[](8);
+        Actions[] memory actions = new Actions[](9);
+        bytes[] memory params = new bytes[](9);
 
         manager.sync(currency0);
         snapStart("getReserves");
-        uint256 reserves = manager.getReserves(currency0);
+        uint256 reserves = manager.getSyncedReserves();
         snapEnd();
         assertEq(reserves, managerCurrency0BalanceBefore); // reserves are 100.
 
@@ -236,25 +179,25 @@ contract SyncTest is Test, Deployers, GasSnapshot {
         actions[1] = Actions.ASSERT_DELTA_EQUALS;
         params[1] = abi.encode(currency0, address(router), -10);
 
-        actions[2] = Actions.TRANSFER_FROM;
+        actions[2] = Actions.TRANSFER_FROM; // NOT syned before sending tokens
         params[2] = abi.encode(currency0, address(this), manager, 10);
 
-        actions[3] = Actions.SETTLE;
-        params[3] = abi.encode(currency0); // Since reserves now == reserves, paid = 0 and the delta owed by the user will still be -10 after settle.
+        actions[3] = Actions.SETTLE; // calling settle without sync is expecting a native token, but msg.value == 0 so it settles for 0.
 
         actions[4] = Actions.ASSERT_DELTA_EQUALS;
         params[4] = abi.encode(currency0, address(router), -10);
 
+        actions[5] = Actions.SYNC;
+        params[5] = abi.encode(currency0);
+
         // To now settle the delta, the user owes 10 to the pool.
-        // Because sync is called in settle we can transfer + settle.
-        actions[5] = Actions.TRANSFER_FROM;
-        params[5] = abi.encode(currency0, address(this), manager, 10);
+        actions[6] = Actions.TRANSFER_FROM;
+        params[6] = abi.encode(currency0, address(this), manager, 10);
 
-        actions[6] = Actions.SETTLE;
-        params[6] = abi.encode(currency0);
+        actions[7] = Actions.SETTLE;
 
-        actions[7] = Actions.ASSERT_DELTA_EQUALS;
-        params[7] = abi.encode(currency0, address(router), 0);
+        actions[8] = Actions.ASSERT_DELTA_EQUALS;
+        params[8] = abi.encode(currency0, address(router), 0);
 
         router.executeActions(actions, params);
 
@@ -263,4 +206,44 @@ contract SyncTest is Test, Deployers, GasSnapshot {
         // The user lost 10 currency0, and can never claim it back.
         assertEq(currency0.balanceOf(address(this)), userCurrency0BalanceBefore - 10);
     }
+
+    function test_settle_failsWithNativeERC20IfNotSyncedInOrder(uint256 value) public noIsolate {
+        value = bound(value, 1, uint256(int256(type(int128).max / 2)));
+        vm.deal(address(this), value);
+        vm.deal(address(manager), value);
+        NativeERC20 nativeERC20 = new NativeERC20();
+
+        manager.sync(Currency.wrap(address(nativeERC20)));
+
+        Actions[] memory actions = new Actions[](1);
+        bytes[] memory params = new bytes[](1);
+
+        // Revert with NonZeroNativeValue
+        actions[0] = Actions.SETTLE_NATIVE;
+        params[0] = abi.encode(value);
+
+        vm.expectRevert(IPoolManager.NonZeroNativeValue.selector);
+        router.executeActions{value: value}(actions, params);
+
+        // Reference only - see OZ C01 report - previous test confirming vulnerability
+        // uint256 balanceBefore = address(this).balance;
+
+        // actions[1] = Actions.SETTLE;
+        // params[1] = abi.encode(Currency.wrap(address(nativeERC20)));
+
+        // actions[2] = Actions.ASSERT_DELTA_EQUALS;
+        // params[2] = abi.encode(Currency.wrap(address(0)), address(router), value);
+
+        // actions[3] = Actions.ASSERT_DELTA_EQUALS;
+        // params[3] = abi.encode(Currency.wrap(address(nativeERC20)), address(router), value);
+
+        // actions[4] = Actions.TAKE;
+        // params[4] = abi.encode(Currency.wrap(address(0)), address(this), value);
+
+        // actions[5] = Actions.TAKE;
+        // params[5] = abi.encode(Currency.wrap(address(nativeERC20)), address(this), value);
+
+        // uint256 balanceAfter = address(this).balance;
+        // assertEq(balanceAfter - balanceBefore, value);
+    }
 }
