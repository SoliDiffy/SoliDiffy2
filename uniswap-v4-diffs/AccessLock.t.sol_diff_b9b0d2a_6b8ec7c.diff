diff --git a/test/AccessLock.t.sol b/test/AccessLock.t.sol
index 3373ed9f..e96935ec 100644
--- a/test/AccessLock.t.sol
+++ b/test/AccessLock.t.sol
@@ -249,7 +249,7 @@ contract AccessLockTest is Test, Deployers {
         BalanceDelta delta = swapRouter.swap(
             key,
             IPoolManager.SwapParams(true, 10000, TickMath.MIN_SQRT_RATIO + 1),
-            PoolSwapTest.TestSettings({withdrawTokens: false, settleUsingTransfer: true, currencyAlreadySent: false}),
+            PoolSwapTest.TestSettings({withdrawTokens: false, settleUsingTransfer: true}),
             ZERO_BYTES
         );
 
@@ -333,7 +333,7 @@ contract AccessLockTest is Test, Deployers {
         BalanceDelta delta = swapRouter.swap(
             key,
             IPoolManager.SwapParams(true, 1, TickMath.MIN_SQRT_RATIO + 1),
-            PoolSwapTest.TestSettings({withdrawTokens: true, settleUsingTransfer: true, currencyAlreadySent: false}),
+            PoolSwapTest.TestSettings({withdrawTokens: true, settleUsingTransfer: true}),
             abi.encode(amount, AccessLockHook.LockAction.Mint)
         );
 
@@ -366,7 +366,7 @@ contract AccessLockTest is Test, Deployers {
         BalanceDelta delta = swapRouter.swap(
             key,
             IPoolManager.SwapParams(true, 1, TickMath.MIN_SQRT_RATIO + 1),
-            PoolSwapTest.TestSettings({withdrawTokens: true, settleUsingTransfer: true, currencyAlreadySent: false}),
+            PoolSwapTest.TestSettings({withdrawTokens: true, settleUsingTransfer: true}),
             abi.encode(amount, AccessLockHook.LockAction.Take)
         );
         uint256 balanceOfAfter0 = MockERC20(Currency.unwrap(currency0)).balanceOf(address(this));
@@ -395,7 +395,7 @@ contract AccessLockTest is Test, Deployers {
             key,
             // Use small amounts so that the zeroForOne swap is larger
             IPoolManager.SwapParams(false, 1, TickMath.MAX_SQRT_RATIO - 1),
-            PoolSwapTest.TestSettings({withdrawTokens: true, settleUsingTransfer: true, currencyAlreadySent: false}),
+            PoolSwapTest.TestSettings({withdrawTokens: true, settleUsingTransfer: true}),
             abi.encode(amount, AccessLockHook.LockAction.Swap)
         );
 
@@ -426,7 +426,7 @@ contract AccessLockTest is Test, Deployers {
         swapRouter.swap(
             key,
             IPoolManager.SwapParams(true, 1, TickMath.MIN_SQRT_RATIO + 1),
-            PoolSwapTest.TestSettings({withdrawTokens: true, settleUsingTransfer: true, currencyAlreadySent: false}),
+            PoolSwapTest.TestSettings({withdrawTokens: true, settleUsingTransfer: true}),
             abi.encode(amount, AccessLockHook.LockAction.ModifyPosition)
         );
         uint256 balanceOfAfter0 = MockERC20(Currency.unwrap(currency0)).balanceOf(address(this));
@@ -453,7 +453,7 @@ contract AccessLockTest is Test, Deployers {
         swapRouter.swap(
             key,
             IPoolManager.SwapParams(true, 1, TickMath.MIN_SQRT_RATIO + 1),
-            PoolSwapTest.TestSettings({withdrawTokens: true, settleUsingTransfer: true, currencyAlreadySent: false}),
+            PoolSwapTest.TestSettings({withdrawTokens: true, settleUsingTransfer: true}),
             abi.encode(amount, AccessLockHook.LockAction.Donate)
         );
         uint256 balanceOfAfter0 = MockERC20(Currency.unwrap(currency0)).balanceOf(address(this));
@@ -796,7 +796,7 @@ contract AccessLockTest is Test, Deployers {
         swapRouter.swap(
             noOpKey,
             IPoolManager.SwapParams(true, 1, TickMath.MIN_SQRT_RATIO + 1),
-            PoolSwapTest.TestSettings({withdrawTokens: true, settleUsingTransfer: true, currencyAlreadySent: false}),
+            PoolSwapTest.TestSettings({withdrawTokens: true, settleUsingTransfer: true}),
             abi.encode(0, AccessLockHook.LockAction.NoOp)
         );
     }
