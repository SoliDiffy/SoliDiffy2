diff --git a/test/PoolManager.t.sol b/test/PoolManager.t.sol
index a2999253..97d14c4f 100644
--- a/test/PoolManager.t.sol
+++ b/test/PoolManager.t.sol
@@ -762,8 +762,8 @@ contract PoolManagerTest is Test, Deployers, GasSnapshot {
 
         uint24 protocolFee = (uint24(protocolFee1) << 12) | uint24(protocolFee0);
 
-        vm.prank(address(feeController));
-        manager.setProtocolFee(key, protocolFee);
+        feeController.setProtocolFeeForPool(key.toId(), protocolFee);
+        manager.setProtocolFee(key);
 
         (,, uint24 slot0ProtocolFee,) = manager.getSlot0(key.toId());
         assertEq(slot0ProtocolFee, protocolFee);
@@ -954,38 +954,42 @@ contract PoolManagerTest is Test, Deployers, GasSnapshot {
     function test_setProtocolFee_updatesProtocolFeeForInitializedPool(uint24 protocolFee) public {
         (,, uint24 slot0ProtocolFee,) = manager.getSlot0(key.toId());
         assertEq(slot0ProtocolFee, 0);
+        feeController.setProtocolFeeForPool(key.toId(), protocolFee);
 
         uint16 fee0 = protocolFee.getZeroForOneFee();
         uint16 fee1 = protocolFee.getOneForZeroFee();
-        vm.prank(address(feeController));
         if ((fee0 > 2500) || (fee1 > 2500)) {
-            vm.expectRevert(IProtocolFees.InvalidProtocolFee.selector);
-            manager.setProtocolFee(key, protocolFee);
+            vm.expectRevert(IProtocolFees.ProtocolFeeControllerCallFailedOrInvalidResult.selector);
+            manager.setProtocolFee(key);
         } else {
             vm.expectEmit(false, false, false, true);
             emit IProtocolFees.ProtocolFeeUpdated(key.toId(), protocolFee);
-            manager.setProtocolFee(key, protocolFee);
+            manager.setProtocolFee(key);
 
             (,, slot0ProtocolFee,) = manager.getSlot0(key.toId());
             assertEq(slot0ProtocolFee, protocolFee);
         }
     }
 
-    function test_setProtocolFee_failsWithInvalidFee() public {
+    function test_setProtocolFee_failsWithInvalidProtocolFeeControllers() public {
         (,, uint24 slot0ProtocolFee,) = manager.getSlot0(key.toId());
         assertEq(slot0ProtocolFee, 0);
 
-        vm.prank(address(feeController));
-        vm.expectRevert(IProtocolFees.InvalidProtocolFee.selector);
-        manager.setProtocolFee(key, MAX_FEE_BOTH_TOKENS + 1);
-    }
+        manager.setProtocolFeeController(revertingFeeController);
+        vm.expectRevert(IProtocolFees.ProtocolFeeControllerCallFailedOrInvalidResult.selector);
+        manager.setProtocolFee(key);
 
-    function test_setProtocolFee_failsWithInvalidCaller() public {
-        (,, uint24 slot0ProtocolFee,) = manager.getSlot0(key.toId());
-        assertEq(slot0ProtocolFee, 0);
+        manager.setProtocolFeeController(outOfBoundsFeeController);
+        vm.expectRevert(IProtocolFees.ProtocolFeeControllerCallFailedOrInvalidResult.selector);
+        manager.setProtocolFee(key);
 
-        vm.expectRevert(IProtocolFees.InvalidCaller.selector);
-        manager.setProtocolFee(key, MAX_FEE_BOTH_TOKENS);
+        manager.setProtocolFeeController(overflowFeeController);
+        vm.expectRevert(IProtocolFees.ProtocolFeeControllerCallFailedOrInvalidResult.selector);
+        manager.setProtocolFee(key);
+
+        manager.setProtocolFeeController(invalidReturnSizeFeeController);
+        vm.expectRevert(IProtocolFees.ProtocolFeeControllerCallFailedOrInvalidResult.selector);
+        manager.setProtocolFee(key);
     }
 
     function test_collectProtocolFees_initializesWithProtocolFeeIfCalled() public {
@@ -1004,9 +1008,8 @@ contract PoolManagerTest is Test, Deployers, GasSnapshot {
     function test_collectProtocolFees_ERC20_accumulateFees_gas() public {
         uint256 expectedFees = 7;
 
-        uint24 protocolFee = MAX_FEE_BOTH_TOKENS;
-        vm.prank(address(feeController));
-        manager.setProtocolFee(key, protocolFee);
+        feeController.setProtocolFeeForPool(key.toId(), MAX_FEE_BOTH_TOKENS);
+        manager.setProtocolFee(key);
 
         (,, uint24 slot0ProtocolFee,) = manager.getSlot0(key.toId());
         assertEq(slot0ProtocolFee, MAX_FEE_BOTH_TOKENS);
@@ -1032,9 +1035,8 @@ contract PoolManagerTest is Test, Deployers, GasSnapshot {
     function test_collectProtocolFees_ERC20_returnsAllFeesIf0IsProvidedAsParameter() public {
         uint256 expectedFees = 7;
 
-        uint24 protocolFee = MAX_FEE_BOTH_TOKENS;
-        vm.prank(address(feeController));
-        manager.setProtocolFee(key, protocolFee);
+        feeController.setProtocolFeeForPool(key.toId(), MAX_FEE_BOTH_TOKENS);
+        manager.setProtocolFee(key);
 
         (,, uint24 slot0ProtocolFee,) = manager.getSlot0(key.toId());
         assertEq(slot0ProtocolFee, MAX_FEE_BOTH_TOKENS);
@@ -1060,9 +1062,8 @@ contract PoolManagerTest is Test, Deployers, GasSnapshot {
         Currency nativeCurrency = CurrencyLibrary.NATIVE;
 
         // set protocol fee before initializing the pool as it is fetched on initialization
-        uint24 protocolFee = MAX_FEE_BOTH_TOKENS;
-        vm.prank(address(feeController));
-        manager.setProtocolFee(nativeKey, protocolFee);
+        feeController.setProtocolFeeForPool(nativeKey.toId(), MAX_FEE_BOTH_TOKENS);
+        manager.setProtocolFee(nativeKey);
 
         (,, uint24 slot0ProtocolFee,) = manager.getSlot0(nativeKey.toId());
         assertEq(slot0ProtocolFee, MAX_FEE_BOTH_TOKENS);
@@ -1089,9 +1090,8 @@ contract PoolManagerTest is Test, Deployers, GasSnapshot {
         uint256 expectedFees = 7;
         Currency nativeCurrency = CurrencyLibrary.NATIVE;
 
-        uint24 protocolFee = MAX_FEE_BOTH_TOKENS;
-        vm.prank(address(feeController));
-        manager.setProtocolFee(nativeKey, protocolFee);
+        feeController.setProtocolFeeForPool(nativeKey.toId(), MAX_FEE_BOTH_TOKENS);
+        manager.setProtocolFee(nativeKey);
 
         (,, uint24 slot0ProtocolFee,) = manager.getSlot0(nativeKey.toId());
         assertEq(slot0ProtocolFee, MAX_FEE_BOTH_TOKENS);
