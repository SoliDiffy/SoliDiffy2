diff --git a/src/interfaces/IPoolManager.sol b/src/interfaces/IPoolManager.sol
index 04138aa6..0755288b 100644
--- a/src/interfaces/IPoolManager.sol
+++ b/src/interfaces/IPoolManager.sol
@@ -27,7 +27,6 @@ interface IPoolManager is IProtocolFees, IERC6909Claims, IExtsload {
 
     /// @notice Pools are limited to type(int16).max tickSpacing in #initialize, to prevent overflow
     error TickSpacingTooLarge();
-
     /// @notice Pools must have a positive non-zero tickSpacing passed to #initialize
     error TickSpacingTooSmall();
 
@@ -38,9 +37,6 @@ interface IPoolManager is IProtocolFees, IERC6909Claims, IExtsload {
     /// or on a pool that does not have a dynamic swap fee.
     error UnauthorizedDynamicLPFeeUpdate();
 
-    /// @notice Thrown when trying to swap amount of 0
-    error SwapAmountCannotBeZero();
-
     ///@notice Thrown when native currency is passed to a non native settlement
     error NonZeroNativeValue();
 
@@ -165,8 +161,8 @@ interface IPoolManager is IProtocolFees, IERC6909Claims, IExtsload {
     /// @param key The pool to modify liquidity in
     /// @param params The parameters for modifying the liquidity
     /// @param hookData Any data to pass to the callback, via `IUnlockCallback(msg.sender).unlockCallback(data)`
-    /// @return callerDelta The balance delta of the caller of modifyLiquidity. This is the total of both principal and fee deltas.
-    /// @return feeDelta The balance delta of the fees generated in the liquidity range. Returned for informational purposes.
+    /// @return delta The balance delta of the liquidity change
+    /// @return feeDelta The balance delta of the fees generated in the liquidity range
     function modifyLiquidity(PoolKey memory key, ModifyLiquidityParams memory params, bytes calldata hookData)
         external
         returns (BalanceDelta, BalanceDelta);
@@ -178,13 +174,6 @@ interface IPoolManager is IProtocolFees, IERC6909Claims, IExtsload {
     }
 
     /// @notice Swap against the given pool
-    /// @param key The pool to swap in
-    /// @param params The parameters for swapping
-    /// @param hookData Any data to pass to the callback, via `IUnlockCallback(msg.sender).unlockCallback(data)`
-    /// @return swapDelta The balance delta of the address swapping
-    /// @dev Swapping on low liquidity pools may cause unexpected swap amounts when liquidity available is less than amountSpecified.
-    /// Additionally note that if interacting with hooks that have the BEFORE_SWAP_RETURNS_DELTA_FLAG or AFTER_SWAP_RETURNS_DELTA_FLAG
-    /// the hook may alter the swap input/output. Integrators should perform checks on the returned swapDelta.
     function swap(PoolKey memory key, SwapParams memory params, bytes calldata hookData)
         external
         returns (BalanceDelta);
