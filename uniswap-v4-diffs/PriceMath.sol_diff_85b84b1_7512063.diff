diff --git a/contracts/libraries/PriceMath.sol b/contracts/libraries/PriceMath.sol
index 6b5cf74d..fd8bb9ab 100644
--- a/contracts/libraries/PriceMath.sol
+++ b/contracts/libraries/PriceMath.sol
@@ -21,7 +21,7 @@ library PriceMath {
         return ABDKMathQuad.from128x128(int256(self._x) << 16);
     }
 
-    function getTradeToRatioInner(bytes16 reserveIn, bytes16 reserveOut, bytes16 fee, bytes16 inOutRatio)
+    function getInputToRatioInner(bytes16 reserveIn, bytes16 reserveOut, bytes16 fee, bytes16 inOutRatio)
         private
         pure
         returns (bytes16)
@@ -84,7 +84,7 @@ library PriceMath {
     //		(fee - 1)
     //	)
     //) / 2
-    function getTradeToRatio(
+    function getInputToRatio(
         uint112 reserveIn,
         uint112 reserveOut,
         uint16 lpFee,
@@ -95,13 +95,15 @@ library PriceMath {
         returns (uint112 amountIn)
     {
         require(reserveIn > 0 && reserveOut > 0, 'PriceMath: NONZERO');
-        require(FixedPoint.fraction(reserveIn, reserveOut)._x <= inOutRatio._x, 'PriceMath: DIRECTION');
+        FixedPoint.uq112x112 memory reserveRatio = FixedPoint.fraction(reserveIn, reserveOut);
+        if (reserveRatio._x == inOutRatio._x) return 0; // short-circuit if the ratios are equal
+        require(reserveRatio._x < inOutRatio._x, 'PriceMath: DIRECTION');
         bytes16 fee = ABDKMathQuad.div(ABDKMathQuad.fromUInt(lpFee), ABDKMathQuad.fromUInt(LP_FEE_BASE));
         bytes16 quadReserveIn = ABDKMathQuad.fromUInt(reserveIn);
         bytes16 quadReserveOut = ABDKMathQuad.fromUInt(reserveOut);
         bytes16 quadInOutRatio = toQuad(inOutRatio);
 
-        uint result = ABDKMathQuad.toUInt(getTradeToRatioInner(quadReserveIn, quadReserveOut, fee, quadInOutRatio));
+        uint result = ABDKMathQuad.toUInt(getInputToRatioInner(quadReserveIn, quadReserveOut, fee, quadInOutRatio));
         require(result <= type(uint112).max, 'PriceMath: AMOUNT_OVERFLOW_UINT112');
         return uint112(result);
     }
