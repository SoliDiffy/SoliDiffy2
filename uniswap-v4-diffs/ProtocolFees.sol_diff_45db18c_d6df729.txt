diff --git a/src/ProtocolFees.sol b/src/ProtocolFees.sol
index f9d91323..4775f19d 100644
--- a/src/ProtocolFees.sol
+++ b/src/ProtocolFees.sol
@@ -1,16 +1,20 @@
 // SPDX-License-Identifier: GPL-2.0-or-later
 pragma solidity ^0.8.19;
 
-import {Currency, CurrencyLibrary} from "./types/Currency.sol";
-import {IProtocolFeeController} from "./interfaces/IProtocolFeeController.sol";
-import {IProtocolFees} from "./interfaces/IProtocolFees.sol";
-import {PoolKey} from "./types/PoolKey.sol";
-import {ProtocolFeeLibrary} from "./libraries/ProtocolFeeLibrary.sol";
+import {Currency, CurrencyLibrary} from "src/types/Currency.sol";
+import {IProtocolFeeController} from "src/interfaces/IProtocolFeeController.sol";
+import {IProtocolFees} from "src/interfaces/IProtocolFees.sol";
+import {PoolKey} from "src/types/PoolKey.sol";
+import {ProtocolFeeLibrary} from "src/libraries/ProtocolFeeLibrary.sol";
 import {Owned} from "solmate/auth/Owned.sol";
+import {PoolId, PoolIdLibrary} from "src/types/PoolId.sol";
+import {Pool} from "src/libraries/Pool.sol";
 
 abstract contract ProtocolFees is IProtocolFees, Owned {
     using CurrencyLibrary for Currency;
     using ProtocolFeeLibrary for uint24;
+    using PoolIdLibrary for PoolKey;
+    using Pool for Pool.State;
 
     mapping(Currency currency => uint256) public protocolFeesAccrued;
 
@@ -22,6 +26,35 @@ abstract contract ProtocolFees is IProtocolFees, Owned {
         controllerGasLimit = _controllerGasLimit;
     }
 
+    /// @inheritdoc IProtocolFees
+    function setProtocolFeeController(IProtocolFeeController controller) external onlyOwner {
+        protocolFeeController = controller;
+        emit ProtocolFeeControllerUpdated(address(controller));
+    }
+
+    /// @inheritdoc IProtocolFees
+    function setProtocolFee(PoolKey memory key) external {
+        (bool success, uint24 newProtocolFee) = _fetchProtocolFee(key);
+        if (!success) revert ProtocolFeeControllerCallFailedOrInvalidResult();
+        PoolId id = key.toId();
+        _getPool(id).setProtocolFee(newProtocolFee);
+        emit ProtocolFeeUpdated(id, newProtocolFee);
+    }
+
+    /// @inheritdoc IProtocolFees
+    function collectProtocolFees(address recipient, Currency currency, uint256 amount)
+        external
+        returns (uint256 amountCollected)
+    {
+        if (msg.sender != address(protocolFeeController)) revert InvalidCaller();
+
+        amountCollected = (amount == 0) ? protocolFeesAccrued[currency] : amount;
+        protocolFeesAccrued[currency] -= amountCollected;
+        currency.transfer(recipient, amountCollected);
+    }
+
+    function _getPool(PoolId id) internal virtual returns (Pool.State storage);
+
     /// @notice Fetch the protocol fees for a given pool, returning false if the call fails or the returned fees are invalid.
     /// @dev to prevent an invalid protocol fee controller from blocking pools from being initialized
     ///      the success of this function is NOT checked on initialize and if the call fails, the protocol fees are set to 0.
@@ -50,19 +83,9 @@ abstract contract ProtocolFees is IProtocolFees, Owned {
         }
     }
 
-    function setProtocolFeeController(IProtocolFeeController controller) external onlyOwner {
-        protocolFeeController = controller;
-        emit ProtocolFeeControllerUpdated(address(controller));
-    }
-
-    function collectProtocolFees(address recipient, Currency currency, uint256 amount)
-        external
-        returns (uint256 amountCollected)
-    {
-        if (msg.sender != address(protocolFeeController)) revert InvalidCaller();
-
-        amountCollected = (amount == 0) ? protocolFeesAccrued[currency] : amount;
-        protocolFeesAccrued[currency] -= amountCollected;
-        currency.transfer(recipient, amountCollected);
+    function _updateProtocolFees(Currency currency, uint256 amount) internal {
+        unchecked {
+            protocolFeesAccrued[currency] += amount;
+        }
     }
 }
