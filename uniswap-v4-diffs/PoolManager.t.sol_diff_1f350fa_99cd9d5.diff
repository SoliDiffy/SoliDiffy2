diff --git a/test/PoolManager.t.sol b/test/PoolManager.t.sol
index f2153839..3dcfdcd1 100644
--- a/test/PoolManager.t.sol
+++ b/test/PoolManager.t.sol
@@ -51,10 +51,9 @@ contract PoolManagerTest is Test, Deployers, GasSnapshot {
         int24 tick,
         uint24 fee
     );
+    event Mint(address indexed to, Currency indexed currency, uint256 amount);
+    event Burn(address indexed from, Currency indexed currency, uint256 amount);
     event ProtocolFeeUpdated(PoolId indexed id, uint16 protocolFee);
-    event Transfer(
-        address caller, address indexed sender, address indexed receiver, uint256 indexed id, uint256 amount
-    );
 
     PoolLockTest lockTest;
 
@@ -645,103 +644,52 @@ contract PoolManagerTest is Test, Deployers, GasSnapshot {
         snapEnd();
     }
 
-    function test_swap_mint6909IfOutputNotTaken_gas() public {
+    function test_swap_mintClaimIfOutputNotTaken_gas() public {
         IPoolManager.SwapParams memory params =
             IPoolManager.SwapParams({zeroForOne: true, amountSpecified: 100, sqrtPriceLimitX96: SQRT_RATIO_1_2});
 
         PoolSwapTest.TestSettings memory testSettings =
             PoolSwapTest.TestSettings({withdrawTokens: false, settleUsingTransfer: true, currencyAlreadySent: false});
 
-        vm.expectEmit();
-        emit Transfer(address(swapRouter), address(0), address(this), CurrencyLibrary.toId(currency1), 98);
-        snapStart("swap mint output as 6909");
+        vm.expectEmit(true, true, true, false);
+        emit Mint(address(this), currency1, 98);
+        snapStart("swap mint output as claim");
         swapRouter.swap(key, params, testSettings, ZERO_BYTES);
         snapEnd();
 
-        uint256 erc6909Balance = manager.balanceOf(address(this), CurrencyLibrary.toId(currency1));
-        assertEq(erc6909Balance, 98);
-    }
-
-    function test_swap_mint6909IfNativeOutputNotTaken_gas() public {
-        IPoolManager.SwapParams memory params =
-            IPoolManager.SwapParams({zeroForOne: false, amountSpecified: 100, sqrtPriceLimitX96: SQRT_RATIO_2_1});
-
-        PoolSwapTest.TestSettings memory testSettings =
-            PoolSwapTest.TestSettings({withdrawTokens: false, settleUsingTransfer: true, currencyAlreadySent: false});
-
-        vm.expectEmit();
-        emit Transfer(address(swapRouter), address(0), address(this), CurrencyLibrary.toId(CurrencyLibrary.NATIVE), 98);
-        snapStart("swap mint native output as 6909");
-        swapRouter.swap(nativeKey, params, testSettings, ZERO_BYTES);
-        snapEnd();
-
-        uint256 erc6909Balance = manager.balanceOf(address(this), CurrencyLibrary.toId(CurrencyLibrary.NATIVE));
-        assertEq(erc6909Balance, 98);
+        uint256 claimsBalance = manager.balanceOf(address(this), currency1);
+        assertEq(claimsBalance, 98);
     }
 
-    function test_swap_burn6909AsInput_gas() public {
+    function test_swap_useClaimAsInput_gas() public {
         IPoolManager.SwapParams memory params =
             IPoolManager.SwapParams({zeroForOne: true, amountSpecified: 100, sqrtPriceLimitX96: SQRT_RATIO_1_2});
 
         PoolSwapTest.TestSettings memory testSettings =
             PoolSwapTest.TestSettings({withdrawTokens: false, settleUsingTransfer: true, currencyAlreadySent: false});
 
-        vm.expectEmit();
-        emit Transfer(address(swapRouter), address(0), address(this), CurrencyLibrary.toId(currency1), 98);
+        vm.expectEmit(true, true, true, false);
+        emit Mint(address(this), currency1, 98);
         swapRouter.swap(key, params, testSettings, ZERO_BYTES);
 
-        uint256 erc6909Balance = manager.balanceOf(address(this), uint256(uint160(Currency.unwrap(currency1))));
-        assertEq(erc6909Balance, 98);
-
-        // give permission for swapRouter to burn the 6909s
-        manager.setOperator(address(swapRouter), true);
+        uint256 claimsBalance = manager.balanceOf(address(this), currency1);
+        assertEq(claimsBalance, 98);
 
-        // swap from currency1 to currency0 again, using 6909s as input tokens
+        // swap from currency1 to currency0 again, using Claims as input tokens
         params = IPoolManager.SwapParams({zeroForOne: false, amountSpecified: -25, sqrtPriceLimitX96: SQRT_RATIO_4_1});
-        testSettings =
-            PoolSwapTest.TestSettings({withdrawTokens: true, settleUsingTransfer: false, currencyAlreadySent: false});
 
-        vm.expectEmit();
-        emit Transfer(address(swapRouter), address(this), address(0), CurrencyLibrary.toId(currency1), 27);
-        snapStart("swap burn 6909 for input");
-        swapRouter.swap(key, params, testSettings, ZERO_BYTES);
-        snapEnd();
-
-        erc6909Balance = manager.balanceOf(address(this), CurrencyLibrary.toId(currency1));
-        assertEq(erc6909Balance, 71);
-    }
-
-    function test_swap_burnNative6909AsInput_gas() public {
-        IPoolManager.SwapParams memory params =
-            IPoolManager.SwapParams({zeroForOne: false, amountSpecified: 100, sqrtPriceLimitX96: SQRT_RATIO_2_1});
-
-        PoolSwapTest.TestSettings memory testSettings =
-            PoolSwapTest.TestSettings({withdrawTokens: false, settleUsingTransfer: true, currencyAlreadySent: false});
-
-        vm.expectEmit();
-        emit Transfer(address(swapRouter), address(0), address(this), CurrencyLibrary.toId(CurrencyLibrary.NATIVE), 98);
-        swapRouter.swap(nativeKey, params, testSettings, ZERO_BYTES);
-
-        uint256 erc6909Balance = manager.balanceOf(address(this), CurrencyLibrary.toId(CurrencyLibrary.NATIVE));
-        assertEq(erc6909Balance, 98);
-
-        // give permission for swapRouter to burn the 6909s
-        manager.setOperator(address(swapRouter), true);
-
-        // swap from currency0 to currency1, using 6909s as input tokens
-        params = IPoolManager.SwapParams({zeroForOne: true, amountSpecified: -25, sqrtPriceLimitX96: SQRT_RATIO_1_4});
         testSettings =
             PoolSwapTest.TestSettings({withdrawTokens: true, settleUsingTransfer: false, currencyAlreadySent: false});
+        manager.transfer(address(swapRouter), currency1, claimsBalance);
 
-        vm.expectEmit();
-        emit Transfer(address(swapRouter), address(this), address(0), CurrencyLibrary.toId(CurrencyLibrary.NATIVE), 27);
-        snapStart("swap burn native 6909 for input");
-        // don't have to send in native currency since burning 6909 for input
-        swapRouter.swap(nativeKey, params, testSettings, ZERO_BYTES);
+        vm.expectEmit(true, true, true, false);
+        emit Burn(address(swapRouter), currency1, 27);
+        snapStart("swap burn claim for input");
+        swapRouter.swap(key, params, testSettings, ZERO_BYTES);
         snapEnd();
 
-        erc6909Balance = manager.balanceOf(address(this), CurrencyLibrary.toId(CurrencyLibrary.NATIVE));
-        assertEq(erc6909Balance, 71);
+        claimsBalance = manager.balanceOf(address(swapRouter), currency1);
+        assertEq(claimsBalance, 71);
     }
 
     function test_swap_againstLiq_gas() public {
