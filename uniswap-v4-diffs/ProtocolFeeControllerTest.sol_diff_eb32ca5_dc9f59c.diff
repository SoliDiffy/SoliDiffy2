diff --git a/src/test/ProtocolFeeControllerTest.sol b/src/test/ProtocolFeeControllerTest.sol
index 1b46080d..ebb82079 100644
--- a/src/test/ProtocolFeeControllerTest.sol
+++ b/src/test/ProtocolFeeControllerTest.sol
@@ -10,27 +10,32 @@ contract ProtocolFeeControllerTest is IProtocolFeeController {
     using PoolIdLibrary for PoolKey;
 
     mapping(PoolId => uint16) public swapFeeForPool;
+    mapping(PoolId => uint16) public withdrawFeeForPool;
 
-    function protocolFeeForPool(PoolKey memory key) external view returns (uint16) {
-        return swapFeeForPool[key.toId()];
+    function protocolFeesForPool(PoolKey memory key) external view returns (uint24) {
+        return (uint24(swapFeeForPool[key.toId()]) << 12 | withdrawFeeForPool[key.toId()]);
     }
 
     // for tests to set pool protocol fees
     function setSwapFeeForPool(PoolId id, uint16 fee) external {
         swapFeeForPool[id] = fee;
     }
+
+    function setWithdrawFeeForPool(PoolId id, uint16 fee) external {
+        withdrawFeeForPool[id] = fee;
+    }
 }
 
 /// @notice Reverts on call
 contract RevertingProtocolFeeControllerTest is IProtocolFeeController {
-    function protocolFeeForPool(PoolKey memory /* key */ ) external pure returns (uint16) {
+    function protocolFeesForPool(PoolKey memory /* key */ ) external pure returns (uint24) {
         revert();
     }
 }
 
 /// @notice Returns an out of bounds protocol fee
 contract OutOfBoundsProtocolFeeControllerTest is IProtocolFeeController {
-    function protocolFeeForPool(PoolKey memory /* key */ ) external pure returns (uint16) {
+    function protocolFeesForPool(PoolKey memory /* key */ ) external pure returns (uint24) {
         // set both swap and withdraw fees to 1, which is less than MIN_PROTOCOL_FEE_DENOMINATOR
         return 0x001001;
     }
@@ -38,7 +43,7 @@ contract OutOfBoundsProtocolFeeControllerTest is IProtocolFeeController {
 
 /// @notice Return a value that overflows a uint24
 contract OverflowProtocolFeeControllerTest is IProtocolFeeController {
-    function protocolFeeForPool(PoolKey memory /* key */ ) external pure returns (uint16) {
+    function protocolFeesForPool(PoolKey memory /* key */ ) external pure returns (uint24) {
         assembly {
             let ptr := mload(0x40)
             mstore(ptr, 0xFFFFAAA001)
@@ -49,7 +54,7 @@ contract OverflowProtocolFeeControllerTest is IProtocolFeeController {
 
 /// @notice Returns data that is larger than a word
 contract InvalidReturnSizeProtocolFeeControllerTest is IProtocolFeeController {
-    function protocolFeeForPool(PoolKey memory /* key */ ) external view returns (uint16) {
+    function protocolFeesForPool(PoolKey memory /* key */ ) external view returns (uint24) {
         address a = address(this);
         assembly {
             let ptr := mload(0x40)
