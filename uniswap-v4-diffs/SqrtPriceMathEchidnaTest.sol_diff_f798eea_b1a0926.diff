diff --git a/contracts/test/SqrtPriceMathEchidnaTest.sol b/contracts/test/SqrtPriceMathEchidnaTest.sol
index cb0a4984..de3cb036 100644
--- a/contracts/test/SqrtPriceMathEchidnaTest.sol
+++ b/contracts/test/SqrtPriceMathEchidnaTest.sol
@@ -33,7 +33,7 @@ contract SqrtPriceMathEchidnaTest {
 
         if (zeroForOne) {
             assert(sqrtQ <= sqrtP);
-            assert(amountIn >= SqrtPriceMath.getAmount0Delta(sqrtQ, sqrtP, liquidity, true));
+            assert(amountIn >= SqrtPriceMath.getAmount0Delta(sqrtP, sqrtQ, liquidity, true));
         } else {
             assert(sqrtQ >= sqrtP);
             assert(amountIn >= SqrtPriceMath.getAmount1Delta(sqrtP, sqrtQ, liquidity, true));
@@ -53,7 +53,7 @@ contract SqrtPriceMathEchidnaTest {
             assert(amountOut <= SqrtPriceMath.getAmount1Delta(sqrtQ, sqrtP, liquidity, true));
         } else {
             assert(sqrtQ >= sqrtP);
-            assert(amountOut <= SqrtPriceMath.getAmount0Delta(sqrtP, sqrtQ, liquidity, true));
+            assert(amountOut <= SqrtPriceMath.getAmount0Delta(sqrtQ, sqrtP, liquidity, true));
         }
     }
 
@@ -104,14 +104,10 @@ contract SqrtPriceMathEchidnaTest {
         uint160 sqrtQ,
         uint128 liquidity
     ) external pure {
+        require(sqrtP >= sqrtQ);
         require(sqrtP > 0 && sqrtQ > 0);
-
-        uint256 amount0Down = SqrtPriceMath.getAmount0Delta(sqrtQ, sqrtP, liquidity, false);
-        assert(amount0Down == SqrtPriceMath.getAmount0Delta(sqrtP, sqrtQ, liquidity, false));
-
-        uint256 amount0Up = SqrtPriceMath.getAmount0Delta(sqrtQ, sqrtP, liquidity, true);
-        assert(amount0Up == SqrtPriceMath.getAmount0Delta(sqrtP, sqrtQ, liquidity, true));
-
+        uint256 amount0Down = SqrtPriceMath.getAmount0Delta(sqrtP, sqrtQ, liquidity, false);
+        uint256 amount0Up = SqrtPriceMath.getAmount0Delta(sqrtP, sqrtQ, liquidity, true);
         assert(amount0Down <= amount0Up);
         // diff is 0 or 1
         assert(amount0Up - amount0Down < 2);
@@ -137,7 +133,7 @@ contract SqrtPriceMathEchidnaTest {
             roundUp
                 ? FullMath.mulDivRoundingUp(numerator1, numerator2, denominator)
                 : FullMath.mulDiv(numerator1, numerator2, denominator);
-        uint256 fullResult = SqrtPriceMath.getAmount0Delta(sqrtQ, sqrtP, liquidity, roundUp);
+        uint256 fullResult = SqrtPriceMath.getAmount0Delta(sqrtP, sqrtQ, liquidity, roundUp);
 
         assert(safeResult == fullResult);
     }
@@ -147,14 +143,10 @@ contract SqrtPriceMathEchidnaTest {
         uint160 sqrtQ,
         uint128 liquidity
     ) external pure {
+        require(sqrtP <= sqrtQ);
         require(sqrtP > 0 && sqrtQ > 0);
-
         uint256 amount1Down = SqrtPriceMath.getAmount1Delta(sqrtP, sqrtQ, liquidity, false);
-        assert(amount1Down == SqrtPriceMath.getAmount1Delta(sqrtQ, sqrtP, liquidity, false));
-
         uint256 amount1Up = SqrtPriceMath.getAmount1Delta(sqrtP, sqrtQ, liquidity, true);
-        assert(amount1Up == SqrtPriceMath.getAmount1Delta(sqrtQ, sqrtP, liquidity, true));
-
         assert(amount1Down <= amount1Up);
         // diff is 0 or 1
         assert(amount1Up - amount1Down < 2);
@@ -165,9 +157,10 @@ contract SqrtPriceMathEchidnaTest {
         uint160 sqrtQ,
         int128 liquidity
     ) external pure {
+        require(sqrtP >= sqrtQ);
         require(sqrtP > 0 && sqrtQ > 0);
 
-        int256 amount0 = SqrtPriceMath.getAmount0Delta(sqrtQ, sqrtP, liquidity);
+        int256 amount0 = SqrtPriceMath.getAmount0Delta(sqrtP, sqrtQ, liquidity);
         if (liquidity < 0) assert(amount0 <= 0);
         if (liquidity > 0) {
             if (sqrtP == sqrtQ) assert(amount0 == 0);
@@ -181,6 +174,7 @@ contract SqrtPriceMathEchidnaTest {
         uint160 sqrtQ,
         int128 liquidity
     ) external pure {
+        require(sqrtP <= sqrtQ);
         require(sqrtP > 0 && sqrtQ > 0);
 
         int256 amount1 = SqrtPriceMath.getAmount1Delta(sqrtP, sqrtQ, liquidity);
@@ -193,21 +187,18 @@ contract SqrtPriceMathEchidnaTest {
     }
 
     function getOutOfRangeMintInvariants(
-        uint160 sqrtA,
-        uint160 sqrtB,
+        uint160 sqrtP,
+        uint160 sqrtQ,
         int128 liquidity
     ) external pure {
-        require(sqrtA > 0 && sqrtB > 0);
+        require(sqrtP > 0 && sqrtQ > 0 && sqrtP != sqrtQ);
         require(liquidity > 0);
 
-        int256 amount0 = SqrtPriceMath.getAmount0Delta(sqrtA, sqrtB, liquidity);
-        int256 amount1 = SqrtPriceMath.getAmount1Delta(sqrtA, sqrtB, liquidity);
-
-        if (sqrtA == sqrtB) {
-            assert(amount0 == 0);
-            assert(amount1 == 0);
-        } else {
+        if (sqrtP > sqrtQ) {
+            int256 amount0 = SqrtPriceMath.getAmount0Delta(sqrtP, sqrtQ, liquidity);
             assert(amount0 > 0);
+        } else {
+            int256 amount1 = SqrtPriceMath.getAmount1Delta(sqrtP, sqrtQ, liquidity);
             assert(amount1 > 0);
         }
     }
@@ -222,7 +213,7 @@ contract SqrtPriceMathEchidnaTest {
         require(sqrtLower <= sqrtCurrent && sqrtCurrent <= sqrtUpper);
         require(liquidity > 0);
 
-        int256 amount0 = SqrtPriceMath.getAmount0Delta(sqrtCurrent, sqrtUpper, liquidity);
+        int256 amount0 = SqrtPriceMath.getAmount0Delta(sqrtUpper, sqrtCurrent, liquidity);
         int256 amount1 = SqrtPriceMath.getAmount1Delta(sqrtLower, sqrtCurrent, liquidity);
 
         assert(amount0 > 0 || amount1 > 0);
