diff --git a/test/foundry-tests/PoolManager.t.sol b/test/foundry-tests/PoolManager.t.sol
index c69f2117..1a4ae6f8 100644
--- a/test/foundry-tests/PoolManager.t.sol
+++ b/test/foundry-tests/PoolManager.t.sol
@@ -7,11 +7,8 @@ import {IHooks} from "../../contracts/interfaces/IHooks.sol";
 import {Hooks} from "../../contracts/libraries/Hooks.sol";
 import {IPoolManager} from "../../contracts/interfaces/IPoolManager.sol";
 import {IFees} from "../../contracts/interfaces/IFees.sol";
-import {IProtocolFeeController} from "../../contracts/interfaces/IProtocolFeeController.sol";
 import {PoolManager} from "../../contracts/PoolManager.sol";
 import {PoolDonateTest} from "../../contracts/test/PoolDonateTest.sol";
-import {ProtocolFeeControllerTest} from "../../contracts/test/ProtocolFeeControllerTest.sol";
-import {PoolTakeTest} from "../../contracts/test/PoolTakeTest.sol";
 import {TickMath} from "../../contracts/libraries/TickMath.sol";
 import {Pool} from "../../contracts/libraries/Pool.sol";
 import {Deployers} from "./utils/Deployers.sol";
@@ -26,7 +23,6 @@ import {EmptyTestHooks} from "../../contracts/test/EmptyTestHooks.sol";
 import {PoolKey} from "../../contracts/types/PoolKey.sol";
 import {BalanceDelta} from "../../contracts/types/BalanceDelta.sol";
 import {PoolSwapTest} from "../../contracts/test/PoolSwapTest.sol";
-import {TestInvalidERC20} from "../../contracts/test/TestInvalidERC20.sol";
 import {GasSnapshot} from "forge-gas-snapshot/GasSnapshot.sol";
 import {PoolLockTest} from "../../contracts/test/PoolLockTest.sol";
 import {PoolId, PoolIdLibrary} from "../../contracts/types/PoolId.sol";
@@ -34,8 +30,6 @@ import {ProtocolFeeControllerTest} from "../../contracts/test/ProtocolFeeControl
 import {FeeLibrary} from "../../contracts/libraries/FeeLibrary.sol";
 import {Position} from "../../contracts/libraries/Position.sol";
 
-import {console2} from "forge-std/console2.sol";
-
 contract PoolManagerTest is Test, Deployers, TokenFixture, GasSnapshot, IERC1155Receiver {
     using Hooks for IHooks;
     using Pool for Pool.State;
@@ -69,13 +63,10 @@ contract PoolManagerTest is Test, Deployers, TokenFixture, GasSnapshot, IERC1155
     event TransferSingle(
         address indexed operator, address indexed from, address indexed to, uint256 id, uint256 amount
     );
-    event ProtocolFeeUpdated(PoolId indexed id, uint24 protocolFees);
 
     Pool.State state;
     PoolManager manager;
     PoolDonateTest donateRouter;
-    PoolTakeTest takeRouter;
-    ProtocolFeeControllerTest feeController;
     PoolModifyPositionTest modifyPositionRouter;
     PoolSwapTest swapRouter;
     PoolLockTest lockTest;
@@ -90,9 +81,7 @@ contract PoolManagerTest is Test, Deployers, TokenFixture, GasSnapshot, IERC1155
         initializeTokens();
         manager = Deployers.createFreshManager();
         donateRouter = new PoolDonateTest(manager);
-        takeRouter = new PoolTakeTest(manager);
         modifyPositionRouter = new PoolModifyPositionTest(manager);
-        feeController = new ProtocolFeeControllerTest();
 
         lockTest = new PoolLockTest(manager);
         swapRouter = new PoolSwapTest(manager);
@@ -109,16 +98,9 @@ contract PoolManagerTest is Test, Deployers, TokenFixture, GasSnapshot, IERC1155
 
         MockERC20(Currency.unwrap(currency0)).approve(address(donateRouter), 10 ether);
         MockERC20(Currency.unwrap(currency1)).approve(address(donateRouter), 10 ether);
-
-        MockERC20(Currency.unwrap(currency0)).approve(address(takeRouter), 10 ether);
-        MockERC20(Currency.unwrap(currency1)).approve(address(takeRouter), 10 ether);
-    }
-
-    function test_bytecodeSize() public {
-        snapSize("poolManager bytecode size", address(manager));
     }
 
-    function test_initialize(PoolKey memory key, uint160 sqrtPriceX96) public {
+    function testPoolManagerInitialize(PoolKey memory key, uint160 sqrtPriceX96) public {
         // Assumptions tested in Pool.t.sol
         vm.assume(sqrtPriceX96 >= TickMath.MIN_SQRT_RATIO);
         vm.assume(sqrtPriceX96 < TickMath.MAX_SQRT_RATIO);
@@ -148,11 +130,11 @@ contract PoolManagerTest is Test, Deployers, TokenFixture, GasSnapshot, IERC1155
 
             (Pool.Slot0 memory slot0,,,) = manager.pools(key.toId());
             assertEq(slot0.sqrtPriceX96, sqrtPriceX96);
-            assertEq(slot0.protocolFees, 0);
+            assertEq(slot0.protocolFees >> 12, 0);
         }
     }
 
-    function test_initialize_forNativeTokens(uint160 sqrtPriceX96) public {
+    function testPoolManagerInitializeForNativeTokens(uint160 sqrtPriceX96) public {
         // Assumptions tested in Pool.t.sol
         vm.assume(sqrtPriceX96 >= TickMath.MIN_SQRT_RATIO);
         vm.assume(sqrtPriceX96 < TickMath.MAX_SQRT_RATIO);
@@ -174,7 +156,7 @@ contract PoolManagerTest is Test, Deployers, TokenFixture, GasSnapshot, IERC1155
         assertEq(slot0.tick, TickMath.getTickAtSqrtRatio(sqrtPriceX96));
     }
 
-    function test_initialize_succeedsWithHooks(uint160 sqrtPriceX96) public {
+    function testPoolManagerInitializeSucceedsWithHooks(uint160 sqrtPriceX96) public {
         // Assumptions tested in Pool.t.sol
         vm.assume(sqrtPriceX96 >= TickMath.MIN_SQRT_RATIO);
         vm.assume(sqrtPriceX96 < TickMath.MAX_SQRT_RATIO);
@@ -207,7 +189,7 @@ contract PoolManagerTest is Test, Deployers, TokenFixture, GasSnapshot, IERC1155
         assertTrue(MockContract(mockAddr).calledWithSelector(afterSelector, afterParams));
     }
 
-    function test_initialize_succeedsWithMaxTickSpacing(uint160 sqrtPriceX96) public {
+    function testPoolManagerInitializeSucceedsWithMaxTickSpacing(uint160 sqrtPriceX96) public {
         // Assumptions tested in Pool.t.sol
         vm.assume(sqrtPriceX96 >= TickMath.MIN_SQRT_RATIO);
         vm.assume(sqrtPriceX96 < TickMath.MAX_SQRT_RATIO);
@@ -226,7 +208,7 @@ contract PoolManagerTest is Test, Deployers, TokenFixture, GasSnapshot, IERC1155
         manager.initialize(key, sqrtPriceX96, ZERO_BYTES);
     }
 
-    function test_initialize_succeedsWithEmptyHooks(uint160 sqrtPriceX96) public {
+    function testPoolManagerInitializeSucceedsWithEmptyHooks(uint160 sqrtPriceX96) public {
         // Assumptions tested in Pool.t.sol
         vm.assume(sqrtPriceX96 >= TickMath.MIN_SQRT_RATIO);
         vm.assume(sqrtPriceX96 < TickMath.MAX_SQRT_RATIO);
@@ -245,7 +227,7 @@ contract PoolManagerTest is Test, Deployers, TokenFixture, GasSnapshot, IERC1155
         assertEq(slot0.sqrtPriceX96, sqrtPriceX96);
     }
 
-    function test_initialize_revertsWithIdenticalTokens(uint160 sqrtPriceX96) public {
+    function testPoolManagerInitializeRevertsWithIdenticalTokens(uint160 sqrtPriceX96) public {
         // Assumptions tested in Pool.t.sol
         vm.assume(sqrtPriceX96 >= TickMath.MIN_SQRT_RATIO);
         vm.assume(sqrtPriceX96 < TickMath.MAX_SQRT_RATIO);
@@ -258,7 +240,7 @@ contract PoolManagerTest is Test, Deployers, TokenFixture, GasSnapshot, IERC1155
         manager.initialize(key, sqrtPriceX96, ZERO_BYTES);
     }
 
-    function test_initialize_revertsWithSameTokenCombo(uint160 sqrtPriceX96) public {
+    function testPoolManagerInitializeRevertsWithSameTokenCombo(uint160 sqrtPriceX96) public {
         // Assumptions tested in Pool.t.sol
         vm.assume(sqrtPriceX96 >= TickMath.MIN_SQRT_RATIO);
         vm.assume(sqrtPriceX96 < TickMath.MAX_SQRT_RATIO);
@@ -274,7 +256,7 @@ contract PoolManagerTest is Test, Deployers, TokenFixture, GasSnapshot, IERC1155
         manager.initialize(keyInvertedCurrency, sqrtPriceX96, ZERO_BYTES);
     }
 
-    function test_initialize_revertsWhenPoolAlreadyInitialized(uint160 sqrtPriceX96) public {
+    function testPoolManagerInitializeRevertsWhenPoolAlreadyInitialized(uint160 sqrtPriceX96) public {
         // Assumptions tested in Pool.t.sol
         vm.assume(sqrtPriceX96 >= TickMath.MIN_SQRT_RATIO);
         vm.assume(sqrtPriceX96 < TickMath.MAX_SQRT_RATIO);
@@ -287,7 +269,7 @@ contract PoolManagerTest is Test, Deployers, TokenFixture, GasSnapshot, IERC1155
         manager.initialize(key, sqrtPriceX96, ZERO_BYTES);
     }
 
-    function test_initialize_failsWithIncorrectSelectors() public {
+    function testPoolManagerInitializeFailsWithIncorrectSelectors() public {
         address hookAddr = address(uint160(Hooks.BEFORE_INITIALIZE_FLAG | Hooks.AFTER_INITIALIZE_FLAG));
 
         MockHooks impl = new MockHooks();
@@ -310,7 +292,7 @@ contract PoolManagerTest is Test, Deployers, TokenFixture, GasSnapshot, IERC1155
         manager.initialize(key, SQRT_RATIO_1_1, ZERO_BYTES);
     }
 
-    function test_initialize_succeedsWithCorrectSelectors() public {
+    function testPoolManagerInitializeSucceedsWithCorrectSelectors() public {
         address hookAddr = address(uint160(Hooks.BEFORE_INITIALIZE_FLAG | Hooks.AFTER_INITIALIZE_FLAG));
 
         MockHooks impl = new MockHooks();
@@ -329,7 +311,7 @@ contract PoolManagerTest is Test, Deployers, TokenFixture, GasSnapshot, IERC1155
         manager.initialize(key, SQRT_RATIO_1_1, ZERO_BYTES);
     }
 
-    function test_initialize_failsIfTickSpaceTooLarge(uint160 sqrtPriceX96) public {
+    function testPoolManagerInitializeFailsIfTickSpaceTooLarge(uint160 sqrtPriceX96) public {
         // Assumptions tested in Pool.t.sol
         vm.assume(sqrtPriceX96 >= TickMath.MIN_SQRT_RATIO);
         vm.assume(sqrtPriceX96 < TickMath.MAX_SQRT_RATIO);
@@ -346,7 +328,7 @@ contract PoolManagerTest is Test, Deployers, TokenFixture, GasSnapshot, IERC1155
         manager.initialize(key, sqrtPriceX96, ZERO_BYTES);
     }
 
-    function test_initialize_failsIfTickSpaceZero(uint160 sqrtPriceX96) public {
+    function testPoolManagerInitializeFailsIfTickSpaceZero(uint160 sqrtPriceX96) public {
         // Assumptions tested in Pool.t.sol
         vm.assume(sqrtPriceX96 >= TickMath.MIN_SQRT_RATIO);
         vm.assume(sqrtPriceX96 < TickMath.MAX_SQRT_RATIO);
@@ -358,7 +340,7 @@ contract PoolManagerTest is Test, Deployers, TokenFixture, GasSnapshot, IERC1155
         manager.initialize(key, sqrtPriceX96, ZERO_BYTES);
     }
 
-    function test_initialize_failsIfTickSpaceNeg(uint160 sqrtPriceX96) public {
+    function testPoolManagerInitializeFailsIfTickSpaceNeg(uint160 sqrtPriceX96) public {
         // Assumptions tested in Pool.t.sol
         vm.assume(sqrtPriceX96 >= TickMath.MIN_SQRT_RATIO);
         vm.assume(sqrtPriceX96 < TickMath.MAX_SQRT_RATIO);
@@ -370,16 +352,7 @@ contract PoolManagerTest is Test, Deployers, TokenFixture, GasSnapshot, IERC1155
         manager.initialize(key, sqrtPriceX96, ZERO_BYTES);
     }
 
-    function test_initialize_gas() public {
-        PoolKey memory key =
-            PoolKey({currency0: currency0, currency1: currency1, fee: 3000, hooks: IHooks(address(0)), tickSpacing: 60});
-
-        snapStart("initialize");
-        manager.initialize(key, SQRT_RATIO_1_1, ZERO_BYTES);
-        snapEnd();
-    }
-
-    function test_feeControllerSet() public {
+    function testPoolManagerFeeControllerSet() public {
         assertEq(address(manager.protocolFeeController()), address(0));
         vm.expectEmit(false, false, false, true, address(manager));
         emit ProtocolFeeControllerUpdated(address(protocolFeeController));
@@ -387,7 +360,7 @@ contract PoolManagerTest is Test, Deployers, TokenFixture, GasSnapshot, IERC1155
         assertEq(address(manager.protocolFeeController()), address(protocolFeeController));
     }
 
-    function test_fetchFeeWhenController(uint160 sqrtPriceX96) public {
+    function testPoolManagerFetchFeeWhenController(uint160 sqrtPriceX96) public {
         // Assumptions tested in Pool.t.sol
         vm.assume(sqrtPriceX96 >= TickMath.MIN_SQRT_RATIO);
         vm.assume(sqrtPriceX96 < TickMath.MAX_SQRT_RATIO);
@@ -407,7 +380,16 @@ contract PoolManagerTest is Test, Deployers, TokenFixture, GasSnapshot, IERC1155
         assertEq(slot0.protocolFees >> 12, poolProtocolFee);
     }
 
-    function test_mint_failsIfNotInitialized() public {
+    function testGasPoolManagerInitialize() public {
+        PoolKey memory key =
+            PoolKey({currency0: currency0, currency1: currency1, fee: 3000, hooks: IHooks(address(0)), tickSpacing: 60});
+
+        snapStart("initialize");
+        manager.initialize(key, SQRT_RATIO_1_1, ZERO_BYTES);
+        snapEnd();
+    }
+
+    function testMintFailsIfNotInitialized() public {
         PoolKey memory key =
             PoolKey({currency0: currency0, currency1: currency1, fee: 3000, hooks: IHooks(address(0)), tickSpacing: 60});
         vm.expectRevert();
@@ -416,7 +398,7 @@ contract PoolManagerTest is Test, Deployers, TokenFixture, GasSnapshot, IERC1155
         );
     }
 
-    function test_mint_succeedsIfInitialized(uint160 sqrtPriceX96) public {
+    function testMintSucceedsIfInitialized(uint160 sqrtPriceX96) public {
         vm.assume(sqrtPriceX96 >= TickMath.MIN_SQRT_RATIO);
         vm.assume(sqrtPriceX96 < TickMath.MAX_SQRT_RATIO);
 
@@ -433,7 +415,7 @@ contract PoolManagerTest is Test, Deployers, TokenFixture, GasSnapshot, IERC1155
         );
     }
 
-    function test_mint_succeedsForNativeTokensIfInitialized(uint160 sqrtPriceX96) public {
+    function testMintSucceedsForNativeTokensIfInitialized(uint160 sqrtPriceX96) public {
         vm.assume(sqrtPriceX96 >= TickMath.MIN_SQRT_RATIO);
         vm.assume(sqrtPriceX96 < TickMath.MAX_SQRT_RATIO);
 
@@ -454,7 +436,7 @@ contract PoolManagerTest is Test, Deployers, TokenFixture, GasSnapshot, IERC1155
         );
     }
 
-    function test_mint_succeedsWithHooksIfInitialized(uint160 sqrtPriceX96) public {
+    function testMintSucceedsWithHooksIfInitialized(uint160 sqrtPriceX96) public {
         vm.assume(sqrtPriceX96 >= TickMath.MIN_SQRT_RATIO);
         vm.assume(sqrtPriceX96 < TickMath.MAX_SQRT_RATIO);
 
@@ -489,7 +471,7 @@ contract PoolManagerTest is Test, Deployers, TokenFixture, GasSnapshot, IERC1155
         assertTrue(MockContract(mockAddr).calledWithSelector(afterSelector, afterParams));
     }
 
-    function test_mint_failsWithIncorrectSelectors() public {
+    function testMintFailsWithIncorrectSelectors() public {
         address hookAddr = address(uint160(Hooks.BEFORE_MODIFY_POSITION_FLAG | Hooks.AFTER_MODIFY_POSITION_FLAG));
 
         MockHooks impl = new MockHooks();
@@ -517,7 +499,7 @@ contract PoolManagerTest is Test, Deployers, TokenFixture, GasSnapshot, IERC1155
         modifyPositionRouter.modifyPosition(key, params, ZERO_BYTES);
     }
 
-    function test_mint_succeedsWithCorrectSelectors() public {
+    function testMintSucceedsWithCorrectSelectors() public {
         address hookAddr = address(uint160(Hooks.BEFORE_MODIFY_POSITION_FLAG | Hooks.AFTER_MODIFY_POSITION_FLAG));
 
         MockHooks impl = new MockHooks();
@@ -541,7 +523,7 @@ contract PoolManagerTest is Test, Deployers, TokenFixture, GasSnapshot, IERC1155
         modifyPositionRouter.modifyPosition(key, params, ZERO_BYTES);
     }
 
-    function test_mint_gas() public {
+    function testGasMint() public {
         PoolKey memory key =
             PoolKey({currency0: currency0, currency1: currency1, fee: 3000, hooks: IHooks(address(0)), tickSpacing: 60});
 
@@ -554,7 +536,7 @@ contract PoolManagerTest is Test, Deployers, TokenFixture, GasSnapshot, IERC1155
         snapEnd();
     }
 
-    function test_mint_withNative_gas() public {
+    function testGasMintWithNative() public {
         PoolKey memory key = PoolKey({
             currency0: Currency.wrap(address(0)),
             currency1: currency1,
@@ -572,7 +554,7 @@ contract PoolManagerTest is Test, Deployers, TokenFixture, GasSnapshot, IERC1155
         snapEnd();
     }
 
-    function test_mint_withHooks_gas() public {
+    function testGasMintWithHooks() public {
         address hookEmptyAddr = EMPTY_HOOKS;
         MockHooks impl = new MockHooks();
         vm.etch(hookEmptyAddr, address(impl).code);
@@ -590,7 +572,7 @@ contract PoolManagerTest is Test, Deployers, TokenFixture, GasSnapshot, IERC1155
         snapEnd();
     }
 
-    function test_swap_failsIfNotInitialized(uint160 sqrtPriceX96) public {
+    function testSwapFailsIfNotInitialized(uint160 sqrtPriceX96) public {
         vm.assume(sqrtPriceX96 >= TickMath.MIN_SQRT_RATIO);
         vm.assume(sqrtPriceX96 < TickMath.MAX_SQRT_RATIO);
 
@@ -607,7 +589,7 @@ contract PoolManagerTest is Test, Deployers, TokenFixture, GasSnapshot, IERC1155
         swapRouter.swap(key, params, testSettings, ZERO_BYTES);
     }
 
-    function test_swap_succeedsIfInitialized() public {
+    function testSwapSucceedsIfInitialized() public {
         PoolKey memory key =
             PoolKey({currency0: currency0, currency1: currency1, fee: 3000, hooks: IHooks(address(0)), tickSpacing: 60});
 
@@ -625,7 +607,7 @@ contract PoolManagerTest is Test, Deployers, TokenFixture, GasSnapshot, IERC1155
         swapRouter.swap(key, params, testSettings, ZERO_BYTES);
     }
 
-    function test_swap_succeedsWithNativeTokensIfInitialized() public {
+    function testSwapSucceedsWithNativeTokensIfInitialized() public {
         PoolKey memory key = PoolKey({
             currency0: Currency.wrap(address(0)),
             currency1: currency1,
@@ -648,7 +630,7 @@ contract PoolManagerTest is Test, Deployers, TokenFixture, GasSnapshot, IERC1155
         swapRouter.swap(key, params, testSettings, ZERO_BYTES);
     }
 
-    function test_swap_succeedsWithHooksIfInitialized() public {
+    function testSwapSucceedsWithHooksIfInitialized() public {
         address payable mockAddr = payable(address(uint160(Hooks.BEFORE_SWAP_FLAG | Hooks.AFTER_SWAP_FLAG)));
         address payable hookAddr = payable(MOCK_HOOKS);
 
@@ -683,7 +665,7 @@ contract PoolManagerTest is Test, Deployers, TokenFixture, GasSnapshot, IERC1155
         assertTrue(MockContract(mockAddr).calledWithSelector(afterSelector, afterParams));
     }
 
-    function test_swap_failsWithIncorrectSelectors() public {
+    function testSwapFailsWithIncorrectSelectors() public {
         address hookAddr = address(uint160(Hooks.BEFORE_SWAP_FLAG | Hooks.AFTER_SWAP_FLAG));
 
         MockHooks impl = new MockHooks();
@@ -718,7 +700,7 @@ contract PoolManagerTest is Test, Deployers, TokenFixture, GasSnapshot, IERC1155
         swapRouter.swap(key, swapParams, testSettings, ZERO_BYTES);
     }
 
-    function test_swap_succeedsWithCorrectSelectors() public {
+    function testSwapSucceedsWithCorrectSelectors() public {
         address hookAddr = address(uint160(Hooks.BEFORE_SWAP_FLAG | Hooks.AFTER_SWAP_FLAG));
 
         MockHooks impl = new MockHooks();
@@ -749,7 +731,7 @@ contract PoolManagerTest is Test, Deployers, TokenFixture, GasSnapshot, IERC1155
         swapRouter.swap(key, swapParams, testSettings, ZERO_BYTES);
     }
 
-    function test_swap_gas() public {
+    function testGasSwap() public {
         PoolKey memory key =
             PoolKey({currency0: currency0, currency1: currency1, fee: 3000, hooks: IHooks(address(0)), tickSpacing: 60});
 
@@ -770,7 +752,7 @@ contract PoolManagerTest is Test, Deployers, TokenFixture, GasSnapshot, IERC1155
         snapEnd();
     }
 
-    function test_swap_withNative_gas() public {
+    function testGasSwapWithNative() public {
         PoolKey memory key =
             PoolKey({currency0: currency0, currency1: currency1, fee: 3000, hooks: IHooks(address(0)), tickSpacing: 60});
 
@@ -791,7 +773,7 @@ contract PoolManagerTest is Test, Deployers, TokenFixture, GasSnapshot, IERC1155
         snapEnd();
     }
 
-    function test_swap_withHooks_gas() public {
+    function testGasSwapWithHooks() public {
         address hookEmptyAddr = EMPTY_HOOKS;
 
         MockHooks impl = new MockHooks();
@@ -818,7 +800,7 @@ contract PoolManagerTest is Test, Deployers, TokenFixture, GasSnapshot, IERC1155
         snapEnd();
     }
 
-    function test_swap_GasMintERC1155IfOutputNotTaken() public {
+    function testGasSwapMintERC1155IfOutputNotTaken() public {
         PoolKey memory key =
             PoolKey({currency0: currency0, currency1: currency1, fee: 3000, hooks: IHooks(address(0)), tickSpacing: 60});
 
@@ -845,7 +827,7 @@ contract PoolManagerTest is Test, Deployers, TokenFixture, GasSnapshot, IERC1155
         assertEq(erc1155Balance, 98);
     }
 
-    function test_swap_GasUse1155AsInput() public {
+    function testGasSwapUse1155AsInput() public {
         PoolKey memory key =
             PoolKey({currency0: currency0, currency1: currency1, fee: 3000, hooks: IHooks(address(0)), tickSpacing: 60});
 
@@ -886,7 +868,7 @@ contract PoolManagerTest is Test, Deployers, TokenFixture, GasSnapshot, IERC1155
         assertEq(erc1155Balance, 71);
     }
 
-    function test_swap_againstLiq_gas() public {
+    function testGasSwapAgainstLiq() public {
         PoolKey memory key =
             PoolKey({currency0: currency0, currency1: currency1, fee: 3000, hooks: IHooks(address(0)), tickSpacing: 60});
 
@@ -912,7 +894,7 @@ contract PoolManagerTest is Test, Deployers, TokenFixture, GasSnapshot, IERC1155
         snapEnd();
     }
 
-    function test_swap_againstLiqWithNative_gas() public {
+    function testGasSwapAgainstLiqWithNative() public {
         PoolKey memory key = PoolKey({
             currency0: Currency.wrap(address(0)),
             currency1: currency1,
@@ -943,14 +925,14 @@ contract PoolManagerTest is Test, Deployers, TokenFixture, GasSnapshot, IERC1155
         snapEnd();
     }
 
-    function test_donate_failsIfNotInitialized() public {
+    function testDonateFailsIfNotInitialized() public {
         PoolKey memory key =
             PoolKey({currency0: currency0, currency1: currency1, fee: 100, hooks: IHooks(address(0)), tickSpacing: 10});
         vm.expectRevert(abi.encodeWithSelector(Pool.NoLiquidityToReceiveFees.selector));
         donateRouter.donate(key, 100, 100, ZERO_BYTES);
     }
 
-    function test_donate_failsIfNoLiquidity(uint160 sqrtPriceX96) public {
+    function testDonateFailsIfNoLiquidity(uint160 sqrtPriceX96) public {
         vm.assume(sqrtPriceX96 >= TickMath.MIN_SQRT_RATIO);
         vm.assume(sqrtPriceX96 < TickMath.MAX_SQRT_RATIO);
 
@@ -962,7 +944,7 @@ contract PoolManagerTest is Test, Deployers, TokenFixture, GasSnapshot, IERC1155
     }
 
     // test successful donation if pool has liquidity
-    function test_donate_succeedsWhenPoolHasLiquidity() public {
+    function testDonateSucceedsWhenPoolHasLiquidity() public {
         PoolKey memory key =
             PoolKey({currency0: currency0, currency1: currency1, fee: 100, hooks: IHooks(address(0)), tickSpacing: 10});
         manager.initialize(key, SQRT_RATIO_1_1, ZERO_BYTES);
@@ -978,7 +960,7 @@ contract PoolManagerTest is Test, Deployers, TokenFixture, GasSnapshot, IERC1155
         assertEq(feeGrowthGlobal1X128, 680564733841876926926749214863536422912);
     }
 
-    function test_donate_succeedsForNativeTokensWhenPoolHasLiquidity() public {
+    function testDonateSucceedsForNativeTokensWhenPoolHasLiquidity() public {
         vm.deal(address(this), 1 ether);
 
         PoolKey memory key = PoolKey({
@@ -999,7 +981,7 @@ contract PoolManagerTest is Test, Deployers, TokenFixture, GasSnapshot, IERC1155
         assertEq(feeGrowthGlobal1X128, 680564733841876926926749214863536422912);
     }
 
-    function test_donate_failsWithIncorrectSelectors() public {
+    function testDonateFailsWithIncorrectSelectors() public {
         address hookAddr = address(uint160(Hooks.BEFORE_DONATE_FLAG | Hooks.AFTER_DONATE_FLAG));
 
         MockHooks impl = new MockHooks();
@@ -1025,7 +1007,7 @@ contract PoolManagerTest is Test, Deployers, TokenFixture, GasSnapshot, IERC1155
         donateRouter.donate(key, 100, 200, ZERO_BYTES);
     }
 
-    function test_donate_succeedsWithCorrectSelectors() public {
+    function testDonateSucceedsWithCorrectSelectors() public {
         address hookAddr = address(uint160(Hooks.BEFORE_DONATE_FLAG | Hooks.AFTER_DONATE_FLAG));
 
         MockHooks impl = new MockHooks();
@@ -1045,7 +1027,7 @@ contract PoolManagerTest is Test, Deployers, TokenFixture, GasSnapshot, IERC1155
         donateRouter.donate(key, 100, 200, ZERO_BYTES);
     }
 
-    function test_donate_OneToken_gas() public {
+    function testGasDonateOneToken() public {
         PoolKey memory key =
             PoolKey({currency0: currency0, currency1: currency1, fee: 100, hooks: IHooks(address(0)), tickSpacing: 10});
         manager.initialize(key, SQRT_RATIO_1_1, ZERO_BYTES);
@@ -1058,226 +1040,13 @@ contract PoolManagerTest is Test, Deployers, TokenFixture, GasSnapshot, IERC1155
         snapEnd();
     }
 
-    function test_take_failsWithNoLiquidity() public {
-        PoolKey memory key =
-            PoolKey({currency0: currency0, currency1: currency1, fee: 3000, hooks: IHooks(address(0)), tickSpacing: 60});
-
-        vm.expectRevert();
-        takeRouter.take(key, 100, 0);
-    }
-
-    function test_take_failsWithInvalidTokensThatDoNotReturnTrueOnTransfer() public {
-        TestInvalidERC20 invalidToken = new TestInvalidERC20(2**255);
-        Currency invalidCurrency = Currency.wrap(address(invalidToken));
-        bool currency0Invalid = invalidCurrency < currency0;
-        PoolKey memory key = PoolKey({
-            currency0: currency0Invalid ? invalidCurrency : currency0,
-            currency1: currency0Invalid ? currency0 : invalidCurrency,
-            fee: 3000,
-            hooks: IHooks(address(0)),
-            tickSpacing: 60
-        });
-
-        invalidToken.approve(address(modifyPositionRouter), type(uint256).max);
-        invalidToken.approve(address(takeRouter), type(uint256).max);
-        MockERC20(Currency.unwrap(currency0)).approve(address(takeRouter), type(uint256).max);
-
-        manager.initialize(key, SQRT_RATIO_1_1, ZERO_BYTES);
-        IPoolManager.ModifyPositionParams memory params = IPoolManager.ModifyPositionParams(-60, 60, 1000);
-        modifyPositionRouter.modifyPosition(key, params, ZERO_BYTES);
-
-        (uint256 amount0, uint256 amount1) = currency0Invalid ? (1, 0) : (0, 1);
-        vm.expectRevert();
-        takeRouter.take(key, amount0, amount1);
-
-        // should not revert when non zero amount passed in for valid currency
-        // assertions inside takeRouter because it takes then settles
-        (amount0, amount1) = currency0Invalid ? (0, 1) : (1, 0);
-        takeRouter.take(key, amount0, amount1);
-    }
-
-    function test_take_succeedsWithPoolWithLiquidity() public {
-        PoolKey memory key =
-            PoolKey({currency0: currency0, currency1: currency1, fee: 100, hooks: IHooks(address(0)), tickSpacing: 10});
-        manager.initialize(key, SQRT_RATIO_1_1, ZERO_BYTES);
-
-        IPoolManager.ModifyPositionParams memory params = IPoolManager.ModifyPositionParams(-60, 60, 100);
-        modifyPositionRouter.modifyPosition(key, params, ZERO_BYTES);
-        takeRouter.take(key, 1, 1); // assertions inside takeRouter because it takes then settles
-    }
-
-    function test_take_succeedsWithPoolWithLiquidityWithNativeToken() public {
-        PoolKey memory key = PoolKey({
-            currency0: Currency.wrap(address(0)),
-            currency1: currency1,
-            fee: 100,
-            hooks: IHooks(address(0)),
-            tickSpacing: 10
-        });
-        manager.initialize(key, SQRT_RATIO_1_1, ZERO_BYTES);
-
-        IPoolManager.ModifyPositionParams memory params = IPoolManager.ModifyPositionParams(-60, 60, 100);
-        modifyPositionRouter.modifyPosition{value: 100}(key, params, ZERO_BYTES);
-        takeRouter.take{value: 1}(key, 1, 1); // assertions inside takeRouter because it takes then settles
-    }
-
-    function test_setProtocolFee_updatesProtocolFeeForInitializedPool() public {
-        uint24 protocolFee = 4;
-
-        PoolKey memory key =
-            PoolKey({currency0: currency0, currency1: currency1, fee: 100, hooks: IHooks(address(0)), tickSpacing: 10});
-        manager.initialize(key, SQRT_RATIO_1_1, ZERO_BYTES);
-
-        (Pool.Slot0 memory slot0,,,) = manager.pools(key.toId());
-        assertEq(slot0.protocolFees, 0);
-        manager.setProtocolFeeController(IProtocolFeeController(address(feeController)));
-        feeController.setSwapFeeForPool(key.toId(), uint16(protocolFee));
-
-        vm.expectEmit(false, false, false, true);
-        emit ProtocolFeeUpdated(key.toId(), protocolFee << 12);
-        manager.setProtocolFees(key);
-    }
-
-    function test_collectProtocolFees_initializesWithProtocolFeeIfCalled() public {
-        uint24 protocolFee = 260; // 0001 00 00 0100
-        PoolKey memory key =
-            PoolKey({currency0: currency0, currency1: currency1, fee: 100, hooks: IHooks(address(0)), tickSpacing: 10});
-        manager.setProtocolFeeController(IProtocolFeeController(address(feeController)));
-        // sets the upper 12 bits
-        feeController.setSwapFeeForPool(key.toId(), uint16(protocolFee));
-
-        manager.initialize(key, SQRT_RATIO_1_1, ZERO_BYTES);
-        (Pool.Slot0 memory slot0,,,) = manager.pools(key.toId());
-        assertEq(slot0.protocolFees, protocolFee << 12);
-    }
-
-    function test_collectProtocolFees_ERC20_allowsOwnerToAccumulateFees() public {
-        uint24 protocolFee = 260; // 0001 00 00 0100
-        uint256 expectedFees = 7;
-
-        PoolKey memory key =
-            PoolKey({currency0: currency0, currency1: currency1, fee: 3000, hooks: IHooks(address(0)), tickSpacing: 10});
-        manager.setProtocolFeeController(IProtocolFeeController(address(feeController)));
-        feeController.setSwapFeeForPool(key.toId(), uint16(protocolFee));
-
-        manager.initialize(key, SQRT_RATIO_1_1, ZERO_BYTES);
-        (Pool.Slot0 memory slot0,,,) = manager.pools(key.toId());
-        assertEq(slot0.protocolFees, protocolFee << 12);
-
-        IPoolManager.ModifyPositionParams memory params = IPoolManager.ModifyPositionParams(-120, 120, 10 ether);
-        modifyPositionRouter.modifyPosition(key, params, ZERO_BYTES);
-        swapRouter.swap(
-            key, IPoolManager.SwapParams(true, 10000, SQRT_RATIO_1_2), PoolSwapTest.TestSettings(true, true), ZERO_BYTES
-        );
-
-        assertEq(manager.protocolFeesAccrued(currency0), expectedFees);
-        assertEq(manager.protocolFeesAccrued(currency1), 0);
-        assertEq(currency0.balanceOf(address(1)), 0);
-        manager.collectProtocolFees(address(1), currency0, expectedFees);
-        assertEq(currency0.balanceOf(address(1)), expectedFees);
-        assertEq(manager.protocolFeesAccrued(currency0), 0);
-    }
-
-    function test_collectProtocolFees_ERC20_returnsAllFeesIf0IsProvidedAsParameter() public {
-        uint24 protocolFee = 260; // 0001 00 00 0100
-        uint256 expectedFees = 7;
-
-        PoolKey memory key =
-            PoolKey({currency0: currency0, currency1: currency1, fee: 3000, hooks: IHooks(address(0)), tickSpacing: 10});
-        manager.setProtocolFeeController(IProtocolFeeController(address(feeController)));
-        feeController.setSwapFeeForPool(key.toId(), uint16(protocolFee));
-
-        manager.initialize(key, SQRT_RATIO_1_1, ZERO_BYTES);
-        (Pool.Slot0 memory slot0,,,) = manager.pools(key.toId());
-        assertEq(slot0.protocolFees, protocolFee << 12);
-
-        IPoolManager.ModifyPositionParams memory params = IPoolManager.ModifyPositionParams(-120, 120, 10 ether);
-        modifyPositionRouter.modifyPosition(key, params, ZERO_BYTES);
-        swapRouter.swap(
-            key, IPoolManager.SwapParams(true, 10000, SQRT_RATIO_1_2), PoolSwapTest.TestSettings(true, true), ZERO_BYTES
-        );
-
-        assertEq(manager.protocolFeesAccrued(currency0), expectedFees);
-        assertEq(manager.protocolFeesAccrued(currency1), 0);
-        assertEq(currency0.balanceOf(address(1)), 0);
-        manager.collectProtocolFees(address(1), currency0, 0);
-        assertEq(currency0.balanceOf(address(1)), expectedFees);
-        assertEq(manager.protocolFeesAccrued(currency0), 0);
-    }
-
-    function test_collectProtocolFees_nativeToken_allowsOwnerToAccumulateFees() public {
-        uint24 protocolFee = 260; // 0001 00 00 0100
-        uint256 expectedFees = 7;
-        Currency nativeCurrency = Currency.wrap(address(0));
-
-        PoolKey memory key = PoolKey({
-            currency0: nativeCurrency,
-            currency1: currency1,
-            fee: 3000,
-            hooks: IHooks(address(0)),
-            tickSpacing: 10
-        });
-        manager.setProtocolFeeController(IProtocolFeeController(address(feeController)));
-        feeController.setSwapFeeForPool(key.toId(), uint16(protocolFee));
-
-        manager.initialize(key, SQRT_RATIO_1_1, ZERO_BYTES);
-        (Pool.Slot0 memory slot0,,,) = manager.pools(key.toId());
-        assertEq(slot0.protocolFees, protocolFee << 12);
-
-        IPoolManager.ModifyPositionParams memory params = IPoolManager.ModifyPositionParams(-120, 120, 10 ether);
-        modifyPositionRouter.modifyPosition{value: 10 ether}(key, params, ZERO_BYTES);
-        swapRouter.swap{value: 10000}(
-            key, IPoolManager.SwapParams(true, 10000, SQRT_RATIO_1_2), PoolSwapTest.TestSettings(true, true), ZERO_BYTES
-        );
-
-        assertEq(manager.protocolFeesAccrued(nativeCurrency), expectedFees);
-        assertEq(manager.protocolFeesAccrued(currency1), 0);
-        assertEq(nativeCurrency.balanceOf(address(1)), 0);
-        manager.collectProtocolFees(address(1), nativeCurrency, expectedFees);
-        assertEq(nativeCurrency.balanceOf(address(1)), expectedFees);
-        assertEq(manager.protocolFeesAccrued(nativeCurrency), 0);
-    }
-
-    function test_collectProtocolFees_nativeToken_returnsAllFeesIf0IsProvidedAsParameter() public {
-        uint24 protocolFee = 260; // 0001 00 00 0100
-        uint256 expectedFees = 7;
-        Currency nativeCurrency = Currency.wrap(address(0));
-
-        PoolKey memory key = PoolKey({
-            currency0: nativeCurrency,
-            currency1: currency1,
-            fee: 3000,
-            hooks: IHooks(address(0)),
-            tickSpacing: 10
-        });
-        manager.setProtocolFeeController(IProtocolFeeController(address(feeController)));
-        feeController.setSwapFeeForPool(key.toId(), uint16(protocolFee));
-
-        manager.initialize(key, SQRT_RATIO_1_1, ZERO_BYTES);
-        (Pool.Slot0 memory slot0,,,) = manager.pools(key.toId());
-        assertEq(slot0.protocolFees, protocolFee << 12);
-
-        IPoolManager.ModifyPositionParams memory params = IPoolManager.ModifyPositionParams(-120, 120, 10 ether);
-        modifyPositionRouter.modifyPosition{value: 10 ether}(key, params, ZERO_BYTES);
-        swapRouter.swap{value: 10000}(
-            key, IPoolManager.SwapParams(true, 10000, SQRT_RATIO_1_2), PoolSwapTest.TestSettings(true, true), ZERO_BYTES
-        );
-
-        assertEq(manager.protocolFeesAccrued(nativeCurrency), expectedFees);
-        assertEq(manager.protocolFeesAccrued(currency1), 0);
-        assertEq(nativeCurrency.balanceOf(address(1)), 0);
-        manager.collectProtocolFees(address(1), nativeCurrency, 0);
-        assertEq(nativeCurrency.balanceOf(address(1)), expectedFees);
-        assertEq(manager.protocolFeesAccrued(nativeCurrency), 0);
-    }
-
-    function test_lock_NoOpIsOk() public {
+    function testNoOpLockIsOk() public {
         snapStart("gas overhead of no-op lock");
         lockTest.lock();
         snapEnd();
     }
 
-    function test_lock_EmitsCorrectId() public {
+    function testLockEmitsCorrectId() public {
         vm.expectEmit(false, false, false, true);
         emit LockAcquired();
         lockTest.lock();
@@ -1350,7 +1119,7 @@ contract PoolManagerTest is Test, Deployers, TokenFixture, GasSnapshot, IERC1155
     //     assertEq(feeGrowthGlobal1X128Extsload, 204793365386061595215803889394593);
     // }
 
-    function test_getPosition() public {
+    function testGetPosition() public {
         PoolKey memory key =
             PoolKey({currency0: currency0, currency1: currency1, fee: 100, hooks: IHooks(address(0)), tickSpacing: 10});
         manager.initialize(key, SQRT_RATIO_1_1, ZERO_BYTES);
