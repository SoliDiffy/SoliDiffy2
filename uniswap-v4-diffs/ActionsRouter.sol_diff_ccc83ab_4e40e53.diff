diff --git a/src/test/ActionsRouter.sol b/src/test/ActionsRouter.sol
index 3ad2b436..083dce5a 100644
--- a/src/test/ActionsRouter.sol
+++ b/src/test/ActionsRouter.sol
@@ -9,6 +9,7 @@ import {PoolKey} from "../types/PoolKey.sol";
 import {MockERC20} from "solmate/test/utils/mocks/MockERC20.sol";
 import {StateLibrary} from "../libraries/StateLibrary.sol";
 import {TransientStateLibrary} from "../libraries/TransientStateLibrary.sol";
+import {GasSnapshot} from "forge-gas-snapshot/GasSnapshot.sol";
 
 // Supported Actions.
 enum Actions {
@@ -16,9 +17,11 @@ enum Actions {
     TAKE,
     SYNC,
     MINT,
+    CLEAR,
     ASSERT_BALANCE_EQUALS,
     ASSERT_RESERVES_EQUALS,
     ASSERT_DELTA_EQUALS,
+    ASSERT_NONZERO_DELTA_COUNT_EQUALS,
     TRANSFER_FROM
 }
 // TODO: Add other actions as needed.
@@ -29,7 +32,7 @@ enum Actions {
 
 /// @notice A router that handles an arbitrary input of actions.
 /// TODO: Can continue to add functions per action.
-contract ActionsRouter is IUnlockCallback, Test {
+contract ActionsRouter is IUnlockCallback, Test, GasSnapshot {
     using StateLibrary for IPoolManager;
     using TransientStateLibrary for IPoolManager;
 
@@ -58,12 +61,16 @@ contract ActionsRouter is IUnlockCallback, Test {
                 _sync(param);
             } else if (action == Actions.MINT) {
                 _mint(param);
+            } else if (action == Actions.CLEAR) {
+                _clear(param);
             } else if (action == Actions.ASSERT_BALANCE_EQUALS) {
                 _assertBalanceEquals(param);
             } else if (action == Actions.ASSERT_RESERVES_EQUALS) {
                 _assertReservesEquals(param);
             } else if (action == Actions.ASSERT_DELTA_EQUALS) {
                 _assertDeltaEquals(param);
+            } else if (action == Actions.ASSERT_NONZERO_DELTA_COUNT_EQUALS) {
+                _assertNonzeroDeltaCountEquals(param);
             } else if (action == Actions.TRANSFER_FROM) {
                 _transferFrom(param);
             }
@@ -94,6 +101,14 @@ contract ActionsRouter is IUnlockCallback, Test {
         manager.mint(recipient, currency.toId(), amount);
     }
 
+    function _clear(bytes memory params) internal {
+        (Currency currency, uint256 amount, bool measureGas, string memory gasSnapName) =
+            abi.decode(params, (Currency, uint256, bool, string));
+
+        manager.clear(currency, amount);
+        if (measureGas) snapLastCall(gasSnapName);
+    }
+
     function _assertBalanceEquals(bytes memory params) internal view {
         (Currency currency, address user, uint256 expectedBalance) = abi.decode(params, (Currency, address, uint256));
         assertEq(currency.balanceOf(user), expectedBalance, "usertoken value incorrect");
@@ -110,6 +125,11 @@ contract ActionsRouter is IUnlockCallback, Test {
         assertEq(manager.currencyDelta(caller, currency), expectedDelta, "delta value incorrect");
     }
 
+    function _assertNonzeroDeltaCountEquals(bytes memory params) internal view {
+        (uint256 expectedCount) = abi.decode(params, (uint256));
+        assertEq(manager.getNonzeroDeltaCount(), expectedCount, "nonzero delta count incorrect");
+    }
+
     function _transferFrom(bytes memory params) internal {
         (Currency currency, address from, address recipient, uint256 amount) =
             abi.decode(params, (Currency, address, address, uint256));
