diff --git a/src/libraries/Hooks.sol b/src/libraries/Hooks.sol
index c131b3a8..27e1fd06 100644
--- a/src/libraries/Hooks.sol
+++ b/src/libraries/Hooks.sol
@@ -149,9 +149,7 @@ library Hooks {
         }
 
         // Length must be at least 32 to contain the selector. Check expected selector and returned selector match.
-        if (result.length < 32 || result.parseSelector() != data.parseSelector()) {
-            InvalidHookResponse.selector.revertWith();
-        }
+        if (result.parseSelector() != data.parseSelector()) InvalidHookResponse.selector.revertWith();
     }
 
     /// @notice performs a hook call using the given calldata on the given hook
@@ -164,9 +162,6 @@ library Hooks {
 
         // If this hook wasnt meant to return something, default to 0 delta
         if (!parseReturn) return 0;
-
-        // A length of 64 bytes is required to return a bytes4, and a 32 byte delta
-        if (result.length != 64) InvalidHookResponse.selector.revertWith();
         return result.parseReturnDelta();
     }
 
@@ -262,9 +257,6 @@ library Hooks {
         if (self.hasPermission(BEFORE_SWAP_FLAG)) {
             bytes memory result = callHook(self, abi.encodeCall(IHooks.beforeSwap, (msg.sender, key, params, hookData)));
 
-            // A length of 96 bytes is required to return a bytes4, a 32 byte delta, and an LP fee
-            if (result.length != 96) InvalidHookResponse.selector.revertWith();
-
             // dynamic fee pools that do not want to override the cache fee, return 0 otherwise they return a valid fee with the override flag
             if (key.fee.isDynamicFee()) lpFeeOverride = result.parseFee();
 
