diff --git a/contracts/libraries/SqrtPriceMath.sol b/contracts/libraries/SqrtPriceMath.sol
index d7774e63..83642a99 100644
--- a/contracts/libraries/SqrtPriceMath.sol
+++ b/contracts/libraries/SqrtPriceMath.sol
@@ -14,17 +14,17 @@ library SqrtPriceMath {
     using LowGasSafeMath for uint256;
     using SafeCast for uint256;
 
-    /// @notice Gets the next sqrt price given a delta of token0
+    /// @notice Get the next sqrt price given a delta of token0
+    /// @param sqrtPX96 the starting price, i.e. before accounting for the token0 delta
+    /// @param liquidity the amount of usable liquidity
+    /// @param amount how much of token0 to add or remove from virtual reserves
+    /// @param add whether to add or remove the amount of token0
+    /// @return the price after adding or removing amount, depending on add
     /// @dev Always rounds up, because in the exact output case (increasing price) we need to move the price at least
     /// far enough to get the desired output amount, and in the exact input case (decreasing price) we need to move the
     /// price less in order to not send too much output.
-    /// The most precise formula for this is liquidity * sqrtPX96 / (liquidity +- amount * sqrtPX96),
-    /// if this is impossible because of overflow, we calculate liquidity / (liquidity / sqrtPX96 +- amount).
-    /// @param sqrtPX96 The starting price, i.e. before accounting for the token0 delta
-    /// @param liquidity The amount of usable liquidity
-    /// @param amount How much of token0 to add or remove from virtual reserves
-    /// @param add Whether to add or remove the amount of token0
-    /// @return The price after adding or removing amount, depending on add
+    /// The most precise formula for this is liquidity * sqrtPX96 / (liquidity +- amount * sqrtPX96)
+    /// If this is impossible because of overflow, we calculate liquidity / (liquidity / sqrtPX96 +- amount)
     function getNextSqrtPriceFromAmount0RoundingUp(
         uint160 sqrtPX96,
         uint128 liquidity,
@@ -58,16 +58,16 @@ library SqrtPriceMath {
         }
     }
 
-    /// @notice Gets the next sqrt price given a delta of token1
+    /// @notice Get the next sqrt price given a delta of token1
+    /// @param sqrtPX96 the starting price, i.e. before accounting for the token1 delta
+    /// @param liquidity the amount of usable liquidity
+    /// @param amount how much of token1 to add or remove from virtual reserves
+    /// @param add whether to add or remove the amount of token1
+    /// @return the price after adding or removing amount, depending on add
     /// @dev Always rounds down, because in the exact output case (decreasing price) we need to move the price at least
     /// far enough to get the desired output amount, and in the exact input case (increasing price) we need to move the
     /// price less in order to not send too much output.
     /// The formula we compute is lossless: sqrtPX96 +- amount / liquidity
-    /// @param sqrtPX96 The starting price, i.e., before accounting for the token1 delta
-    /// @param liquidity The amount of usable liquidity
-    /// @param amount How much of token1 to add, or remove, from virtual reserves
-    /// @param add Whether to add, or remove, the amount of token1
-    /// @return The price after adding or removing `amount`
     function getNextSqrtPriceFromAmount1RoundingDown(
         uint160 sqrtPX96,
         uint128 liquidity,
@@ -92,13 +92,13 @@ library SqrtPriceMath {
         return (add ? uint256(sqrtPX96).add(quotient) : uint256(sqrtPX96).sub(quotient)).toUint160();
     }
 
-    /// @notice Gets the next sqrt price given an input amount of token0 or token1
-    /// @dev Throws if price or liquidity are 0, or if the next price is out of bounds
-    /// @param sqrtPX96 The starting price, i.e., before accounting for the input amount
-    /// @param liquidity The amount of usable liquidity
-    /// @param amountIn How much of token0, or token1, is being swapped in
-    /// @param zeroForOne Whether the amount in is token0 or token1
-    /// @return sqrtQX96 The price after adding the input amount to token0 or token1
+    /// @notice Get the next sqrt price given an input amount of token0 or token1
+    /// @param sqrtPX96 the starting price, i.e. before accounting for the input amount
+    /// @param liquidity the amount of usable liquidity
+    /// @param amountIn how much of token0 or token1 is being swapped in
+    /// @param zeroForOne whether the amount in is token0 or token1
+    /// @return sqrtQX96 the price after adding the input amount to token0 or token1
+    /// @dev Throws if price or liquidity are 0 or the next price is out of bounds
     function getNextSqrtPriceFromInput(
         uint160 sqrtPX96,
         uint128 liquidity,
@@ -115,13 +115,13 @@ library SqrtPriceMath {
                 : getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountIn, true);
     }
 
-    /// @notice Gets the next sqrt price given an output amount of token0 or token1
+    /// @notice Get the next sqrt price given an output amount of token0 or token1
+    /// @param sqrtPX96 the starting price, i.e. before accounting for the output amount
+    /// @param liquidity the amount of usable liquidity
+    /// @param amountOut how much of token0 or token1 is being swapped out
+    /// @param zeroForOne whether the amount out is token0 or token1
+    /// @return sqrtQX96 the price after removing the output amount of token0 or token1
     /// @dev Throws if price or liquidity are 0 or the next price is out of bounds
-    /// @param sqrtPX96 The starting price before accounting for the output amount
-    /// @param liquidity The amount of usable liquidity
-    /// @param amountOut How much of token0, or token1, is being swapped out
-    /// @param zeroForOne Whether the amount out is token0 or token1
-    /// @return sqrtQX96 The price after removing the output amount of token0 or token1
     function getNextSqrtPriceFromOutput(
         uint160 sqrtPX96,
         uint128 liquidity,
@@ -138,15 +138,15 @@ library SqrtPriceMath {
                 : getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountOut, false);
     }
 
-    /// @notice Gets the delta of amount0 between two prices
+    /// @notice Get the delta of amount0 between two prices
+    /// @param sqrtPX96 the starting sqrt price
+    /// @param sqrtQX96 the ending sqrt price
+    /// @param liquidity the amount of usable liquidity
+    /// @param roundUp whether to round the amount up or down
+    /// @return amount0 the difference in virtual reserves of token0 between the two prices
     /// @dev Throws if the starting price is less than the ending price. To get the price in the other direction, swap
     /// the argument order.
     /// Calculates liquidity / sqrt(Q) - liquidity / sqrt(P), i.e. liquidity * (sqrt(P) - sqrt(Q)) / (sqrt(P) * sqrt(Q))
-    /// @param sqrtPX96 The starting sqrt price
-    /// @param sqrtQX96 The ending sqrt price
-    /// @param liquidity The amount of usable liquidity
-    /// @param roundUp Whether to round the amount up or down
-    /// @return amount0 The difference in virtual reserves of token0 between the two prices
     function getAmount0Delta(
         uint160 sqrtPX96,
         uint160 sqrtQX96,
@@ -165,15 +165,15 @@ library SqrtPriceMath {
                 : FullMath.mulDiv(numerator1, numerator2, sqrtPX96) / sqrtQX96;
     }
 
-    /// @notice Gets the delta of amount1 between two prices
+    /// @notice Get the delta of amount1 between two prices
+    /// @param sqrtPX96 the starting sqrt price
+    /// @param sqrtQX96 the ending sqrt price
+    /// @param liquidity the amount of usable liquidity
+    /// @param roundUp whether to round the amount up or down
+    /// @return amount1 the difference in virtual reserves of token1 between the two prices
     /// @dev Throws if the starting price is greater than the ending price. To get the price in the other direction,
     /// swap the argument order.
     /// Calculates liquidity * (sqrt(Q) - sqrt(P))
-    /// @param sqrtPX96 The starting sqrt price
-    /// @param sqrtQX96 The ending sqrt price
-    /// @param liquidity The amount of usable liquidity
-    /// @param roundUp Whether to round the amount up, or down
-    /// @return amount1 The difference in virtual reserves of token1 between the two prices
     function getAmount1Delta(
         uint160 sqrtPX96,
         uint160 sqrtQX96,
@@ -190,10 +190,10 @@ library SqrtPriceMath {
     }
 
     /// @notice Helper that gets signed token0 delta from a liquidity delta
-    /// @param sqrtPX96 The current sqrt price
-    /// @param sqrtQX96 The target sqrt price
-    /// @param liquidity The change in liquidity
-    /// @return amount0 The difference in virtual reserves of token0 between two prices due to a given liquidity delta
+    /// @param sqrtPX96 the current sqrt price
+    /// @param sqrtQX96 the target sqrt price
+    /// @param liquidity the change in liquidity
+    /// @return amount0 the difference in virtual reserves of token0 between two prices due to a given liquidity delta
     function getAmount0Delta(
         uint160 sqrtPX96,
         uint160 sqrtQX96,
@@ -206,10 +206,10 @@ library SqrtPriceMath {
     }
 
     /// @notice Helper that gets signed token1 delta from a liquidity delta
-    /// @param sqrtPX96 The current sqrt price
-    /// @param sqrtQX96 The target sqrt price
-    /// @param liquidity The change in liquidity
-    /// @return amount1 The difference in virtual reserves of token1 between two prices due to a given liquidity delta
+    /// @param sqrtPX96 the current sqrt price
+    /// @param sqrtQX96 the target sqrt price
+    /// @param liquidity the change in liquidity
+    /// @return amount1 the difference in virtual reserves of token1 between two prices due to a given liquidity delta
     function getAmount1Delta(
         uint160 sqrtPX96,
         uint160 sqrtQX96,
