diff --git a/contracts/libraries/Tick.sol b/contracts/libraries/Tick.sol
index 5a6ba77d..2755aa2b 100644
--- a/contracts/libraries/Tick.sol
+++ b/contracts/libraries/Tick.sol
@@ -12,6 +12,7 @@ library Tick {
         // the total position liquidity that references this tick
         uint128 liquidityGross;
         // amount of liquidity added (subtracted) when tick is crossed from left to right (right to left),
+        // i.e. as the price goes up (down), for each fee vote
         int128 liquidityDelta;
         // seconds spent on the _other_ side of this tick (relative to the current tick)
         // only has relative meaning, not absolute â€” the value depends on when the tick is initialized
@@ -34,42 +35,55 @@ library Tick {
         minTick = (SqrtTickMath.MIN_TICK / tickSpacing) * tickSpacing;
         maxTick = (SqrtTickMath.MAX_TICK / tickSpacing) * tickSpacing;
         uint24 numTicks = uint24((maxTick - minTick) / tickSpacing) + 1;
-        maxLiquidityPerTick = uint128(-1) / numTicks;
+        maxLiquidityPerTick = type(uint128).max / numTicks;
     }
 
-    function getFeeGrowthInside(
-        mapping(int24 => Tick.Info) storage self,
-        int24 tickLower,
-        int24 tickUpper,
+    function _getFeeGrowthBelow(
+        int24 tick,
         int24 tickCurrent,
+        Info storage info,
         uint256 feeGrowthGlobal0X128,
         uint256 feeGrowthGlobal1X128
-    ) internal view returns (uint256 feeGrowthInside0X128, uint256 feeGrowthInside1X128) {
-        Info storage lower = self[tickLower];
-        Info storage upper = self[tickUpper];
-
-        // calculate fee growth below
-        uint256 feeGrowthBelow0X128;
-        uint256 feeGrowthBelow1X128;
-        if (tickCurrent >= tickLower) {
-            feeGrowthBelow0X128 = lower.feeGrowthOutside0X128;
-            feeGrowthBelow1X128 = lower.feeGrowthOutside1X128;
+    ) private view returns (uint256 feeGrowthBelow0X128, uint256 feeGrowthBelow1X128) {
+        // tick is above the current tick, meaning growth outside represents growth above, not below
+        if (tick > tickCurrent) {
+            feeGrowthBelow0X128 = feeGrowthGlobal0X128 - info.feeGrowthOutside0X128;
+            feeGrowthBelow1X128 = feeGrowthGlobal1X128 - info.feeGrowthOutside1X128;
         } else {
-            feeGrowthBelow0X128 = feeGrowthGlobal0X128 - lower.feeGrowthOutside0X128;
-            feeGrowthBelow1X128 = feeGrowthGlobal1X128 - lower.feeGrowthOutside1X128;
+            feeGrowthBelow0X128 = info.feeGrowthOutside0X128;
+            feeGrowthBelow1X128 = info.feeGrowthOutside1X128;
         }
+    }
 
-        // calculate fee growth above
-        uint256 feeGrowthAbove0X128;
-        uint256 feeGrowthAbove1X128;
-        if (tickCurrent < tickUpper) {
-            feeGrowthAbove0X128 = upper.feeGrowthOutside0X128;
-            feeGrowthAbove1X128 = upper.feeGrowthOutside1X128;
+    function _getFeeGrowthAbove(
+        int24 tick,
+        int24 tickCurrent,
+        Info storage info,
+        uint256 feeGrowthGlobal0X128,
+        uint256 feeGrowthGlobal1X128
+    ) private view returns (uint256 feeGrowthAbove0X128, uint256 feeGrowthAbove1X128) {
+        // tick is above current tick, meaning growth outside represents growth above
+        if (tick > tickCurrent) {
+            feeGrowthAbove0X128 = info.feeGrowthOutside0X128;
+            feeGrowthAbove1X128 = info.feeGrowthOutside1X128;
         } else {
-            feeGrowthAbove0X128 = feeGrowthGlobal0X128 - upper.feeGrowthOutside0X128;
-            feeGrowthAbove1X128 = feeGrowthGlobal1X128 - upper.feeGrowthOutside1X128;
+            feeGrowthAbove0X128 = feeGrowthGlobal0X128 - info.feeGrowthOutside0X128;
+            feeGrowthAbove1X128 = feeGrowthGlobal1X128 - info.feeGrowthOutside1X128;
         }
+    }
 
+    function getFeeGrowthInside(
+        mapping(int24 => Tick.Info) storage self,
+        int24 tickLower,
+        int24 tickUpper,
+        int24 tickCurrent,
+        uint256 feeGrowthGlobal0X128,
+        uint256 feeGrowthGlobal1X128
+    ) internal view returns (uint256 feeGrowthInside0X128, uint256 feeGrowthInside1X128) {
+        (uint256 feeGrowthBelow0X128, uint256 feeGrowthBelow1X128) =
+            _getFeeGrowthBelow(tickLower, tickCurrent, self[tickLower], feeGrowthGlobal0X128, feeGrowthGlobal1X128);
+        (uint256 feeGrowthAbove0X128, uint256 feeGrowthAbove1X128) =
+            _getFeeGrowthAbove(tickUpper, tickCurrent, self[tickUpper], feeGrowthGlobal0X128, feeGrowthGlobal1X128);
         feeGrowthInside0X128 = feeGrowthGlobal0X128 - feeGrowthBelow0X128 - feeGrowthAbove0X128;
         feeGrowthInside1X128 = feeGrowthGlobal1X128 - feeGrowthBelow1X128 - feeGrowthAbove1X128;
     }
