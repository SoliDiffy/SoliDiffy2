diff --git a/test/PoolManagerInitialize.t.sol b/test/PoolManagerInitialize.t.sol
index 313e439d..be8c4e27 100644
--- a/test/PoolManagerInitialize.t.sol
+++ b/test/PoolManagerInitialize.t.sol
@@ -82,7 +82,7 @@ contract PoolManagerInitializeTest is Test, Deployers, GasSnapshot {
 
             (Pool.Slot0 memory slot0,,,) = manager.pools(key0.toId());
             assertEq(slot0.sqrtPriceX96, sqrtPriceX96);
-            assertEq(slot0.protocolFee, 0);
+            assertEq(slot0.protocolFees, 0);
         }
     }
 
@@ -104,7 +104,7 @@ contract PoolManagerInitializeTest is Test, Deployers, GasSnapshot {
 
         (Pool.Slot0 memory slot0,,,) = manager.pools(uninitializedKey.toId());
         assertEq(slot0.sqrtPriceX96, sqrtPriceX96);
-        assertEq(slot0.protocolFee, 0);
+        assertEq(slot0.protocolFees >> 12, 0);
         assertEq(slot0.tick, TickMath.getTickAtSqrtRatio(sqrtPriceX96));
     }
 
@@ -198,22 +198,19 @@ contract PoolManagerInitializeTest is Test, Deployers, GasSnapshot {
         initializeRouter.initialize(uninitializedKey, sqrtPriceX96, ZERO_BYTES);
     }
 
-    function test_initialize_fetchFeeWhenController(uint16 protocolFee) public {
-        manager.setProtocolFeeController(feeController);
-        feeController.setSwapFeeForPool(uninitializedKey.toId(), protocolFee);
+    function test_initialize_fetchFeeWhenController(uint160 sqrtPriceX96) public {
+        // Assumptions tested in Pool.t.sol
+        sqrtPriceX96 = uint160(bound(sqrtPriceX96, TickMath.MIN_SQRT_RATIO, TickMath.MAX_SQRT_RATIO - 1));
 
-        uint8 fee0 = uint8(protocolFee >> 8);
-        uint8 fee1 = uint8(protocolFee % 256);
+        manager.setProtocolFeeController(feeController);
+        uint16 poolProtocolFee = 4;
+        feeController.setSwapFeeForPool(uninitializedKey.toId(), poolProtocolFee);
 
-        initializeRouter.initialize(uninitializedKey, SQRT_RATIO_1_1, ZERO_BYTES);
+        initializeRouter.initialize(uninitializedKey, sqrtPriceX96, ZERO_BYTES);
 
         (Pool.Slot0 memory slot0,,,) = manager.pools(uninitializedKey.toId());
-        assertEq(slot0.sqrtPriceX96, SQRT_RATIO_1_1);
-        if ((0 < fee0 && fee0 < 4) || (0 < fee1 && fee1 < 4)) {
-            assertEq(slot0.protocolFee, 0);
-        } else {
-            assertEq(slot0.protocolFee, protocolFee);
-        }
+        assertEq(slot0.sqrtPriceX96, sqrtPriceX96);
+        assertEq(slot0.protocolFees >> 12, poolProtocolFee);
     }
 
     function test_initialize_revertsWhenPoolAlreadyInitialized(uint160 sqrtPriceX96) public {
@@ -320,10 +317,11 @@ contract PoolManagerInitializeTest is Test, Deployers, GasSnapshot {
         initializeRouter.initialize(uninitializedKey, sqrtPriceX96, ZERO_BYTES);
         // protocol fees should default to 0
         (Pool.Slot0 memory slot0,,,) = manager.pools(uninitializedKey.toId());
-        assertEq(slot0.protocolFee, 0);
-        // call to setProtocolFee should also revert
+        assertEq(slot0.protocolFees >> 12, 0);
+        assertEq(slot0.protocolFees & 0xFFF, 0);
+        // call to setProtocolFees should also revert
         vm.expectRevert(IFees.ProtocolFeeControllerCallFailedOrInvalidResult.selector);
-        manager.setProtocolFee(uninitializedKey);
+        manager.setProtocolFees(uninitializedKey);
     }
 
     function test_initialize_succeedsWithRevertingFeeController(uint160 sqrtPriceX96) public {
@@ -344,7 +342,8 @@ contract PoolManagerInitializeTest is Test, Deployers, GasSnapshot {
         initializeRouter.initialize(uninitializedKey, sqrtPriceX96, ZERO_BYTES);
         // protocol fees should default to 0
         (Pool.Slot0 memory slot0,,,) = manager.pools(uninitializedKey.toId());
-        assertEq(slot0.protocolFee, 0);
+        assertEq(slot0.protocolFees >> 12, 0);
+        assertEq(slot0.protocolFees & 0xFFF, 0);
     }
 
     function test_initialize_succeedsWithOverflowFeeController(uint160 sqrtPriceX96) public {
@@ -365,7 +364,8 @@ contract PoolManagerInitializeTest is Test, Deployers, GasSnapshot {
         initializeRouter.initialize(uninitializedKey, sqrtPriceX96, ZERO_BYTES);
         // protocol fees should default to 0
         (Pool.Slot0 memory slot0,,,) = manager.pools(uninitializedKey.toId());
-        assertEq(slot0.protocolFee, 0);
+        assertEq(slot0.protocolFees >> 12, 0);
+        assertEq(slot0.protocolFees & 0xFFF, 0);
     }
 
     function test_initialize_succeedsWithWrongReturnSizeFeeController(uint160 sqrtPriceX96) public {
@@ -386,7 +386,41 @@ contract PoolManagerInitializeTest is Test, Deployers, GasSnapshot {
         initializeRouter.initialize(uninitializedKey, sqrtPriceX96, ZERO_BYTES);
         // protocol fees should default to 0
         (Pool.Slot0 memory slot0,,,) = manager.pools(uninitializedKey.toId());
-        assertEq(slot0.protocolFee, 0);
+        assertEq(slot0.protocolFees >> 12, 0);
+        assertEq(slot0.protocolFees & 0xFFF, 0);
+    }
+
+    function test_initialize_succeedsAndSetsHookFeeIfControllerReverts(uint160 sqrtPriceX96) public {
+        // Assumptions tested in Pool.t.sol
+        sqrtPriceX96 = uint160(bound(sqrtPriceX96, TickMath.MIN_SQRT_RATIO, TickMath.MAX_SQRT_RATIO - 1));
+
+        address hookAddr = address(99); // can't be a zero address, but does not have to have any other hook flags specified
+        MockHooks impl = new MockHooks();
+        vm.etch(hookAddr, address(impl).code);
+        MockHooks hook = MockHooks(hookAddr);
+
+        uninitializedKey = PoolKey({
+            currency0: currency0,
+            currency1: currency1,
+            fee: FeeLibrary.HOOK_SWAP_FEE_FLAG | uint24(3000),
+            hooks: hook,
+            tickSpacing: 60
+        });
+
+        manager.setProtocolFeeController(revertingFeeController);
+        // expect initialize to succeed even though the controller reverts
+        initializeRouter.initialize(uninitializedKey, sqrtPriceX96, ZERO_BYTES);
+        (Pool.Slot0 memory slot0,,,) = manager.pools(uninitializedKey.toId());
+        assertEq(slot0.sqrtPriceX96, sqrtPriceX96);
+        // protocol fees should default to 0
+        assertEq(slot0.protocolFees >> 12, 0);
+        // hook fees can still be set
+        assertEq(uint16(slot0.hookFees >> 12), 0);
+        hook.setSwapFee(uninitializedKey, 3000);
+        manager.setHookFees(uninitializedKey);
+
+        (slot0,,,) = manager.pools(uninitializedKey.toId());
+        assertEq(uint16(slot0.hookFees >> 12), 3000);
     }
 
     function test_initialize_gas() public {
