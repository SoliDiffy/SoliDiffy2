diff --git a/test/libraries/Pool.t.sol b/test/libraries/Pool.t.sol
index 4919f68c..187bf131 100644
--- a/test/libraries/Pool.t.sol
+++ b/test/libraries/Pool.t.sol
@@ -10,7 +10,6 @@ import {TickMath} from "src/libraries/TickMath.sol";
 import {TickBitmap} from "src/libraries/TickBitmap.sol";
 import {LiquidityAmounts} from "test/utils/LiquidityAmounts.sol";
 import {Constants} from "test/utils/Constants.sol";
-import {BalanceDelta} from "src/types/BalanceDelta.sol";
 import {SafeCast} from "src/libraries/SafeCast.sol";
 import {ProtocolFeeLibrary} from "src/libraries/ProtocolFeeLibrary.sol";
 import {LPFeeLibrary} from "src/libraries/LPFeeLibrary.sol";
@@ -23,12 +22,12 @@ contract PoolTest is Test {
     uint24 constant MAX_PROTOCOL_FEE = ProtocolFeeLibrary.MAX_PROTOCOL_FEE; // 0.1%
     uint24 constant MAX_LP_FEE = LPFeeLibrary.MAX_LP_FEE; // 100%
 
-    function testPoolInitialize(uint160 sqrtPriceX96, uint24 protocolFee, uint24 swapFee) public {
+    function testPoolInitialize(uint160 sqrtPriceX96, uint24 protocolFee, uint24 dynamicFee) public {
         if (sqrtPriceX96 < TickMath.MIN_SQRT_RATIO || sqrtPriceX96 >= TickMath.MAX_SQRT_RATIO) {
             vm.expectRevert(TickMath.InvalidSqrtRatio.selector);
-            state.initialize(sqrtPriceX96, protocolFee, swapFee);
+            state.initialize(sqrtPriceX96, protocolFee, dynamicFee);
         } else {
-            state.initialize(sqrtPriceX96, protocolFee, swapFee);
+            state.initialize(sqrtPriceX96, protocolFee, dynamicFee);
             assertEq(state.slot0.sqrtPriceX96, sqrtPriceX96);
             assertEq(state.slot0.protocolFee, protocolFee);
             assertEq(state.slot0.tick, TickMath.getTickAtSqrtRatio(sqrtPriceX96));
@@ -117,44 +116,40 @@ contract PoolTest is Test {
         );
         Pool.Slot0 memory slot0 = state.slot0;
 
-        if (params.amountSpecified > 0 && lpFee == MAX_LP_FEE) {
-            vm.expectRevert(Pool.InvalidFeeForExactOut.selector);
-            state.swap(params);
-        } else if (params.zeroForOne && params.amountSpecified != 0) {
+        if (params.amountSpecified == 0) {
+            vm.expectRevert(Pool.SwapAmountCannotBeZero.selector);
+        } else if (params.zeroForOne) {
             if (params.sqrtPriceLimitX96 >= slot0.sqrtPriceX96) {
                 vm.expectRevert(
                     abi.encodeWithSelector(
                         Pool.PriceLimitAlreadyExceeded.selector, slot0.sqrtPriceX96, params.sqrtPriceLimitX96
                     )
                 );
-                state.swap(params);
             } else if (params.sqrtPriceLimitX96 <= TickMath.MIN_SQRT_RATIO) {
                 vm.expectRevert(abi.encodeWithSelector(Pool.PriceLimitOutOfBounds.selector, params.sqrtPriceLimitX96));
-                state.swap(params);
             }
-        } else if (!params.zeroForOne && params.amountSpecified != 0) {
+        } else if (!params.zeroForOne) {
             if (params.sqrtPriceLimitX96 <= slot0.sqrtPriceX96) {
                 vm.expectRevert(
                     abi.encodeWithSelector(
                         Pool.PriceLimitAlreadyExceeded.selector, slot0.sqrtPriceX96, params.sqrtPriceLimitX96
                     )
                 );
-                state.swap(params);
             } else if (params.sqrtPriceLimitX96 >= TickMath.MAX_SQRT_RATIO) {
                 vm.expectRevert(abi.encodeWithSelector(Pool.PriceLimitOutOfBounds.selector, params.sqrtPriceLimitX96));
-                state.swap(params);
             }
-        } else {
-            uint160 sqrtPriceBefore = state.slot0.sqrtPriceX96;
-            state.swap(params);
-
-            if (params.amountSpecified == 0) {
-                assertEq(sqrtPriceBefore, state.slot0.sqrtPriceX96, "amountSpecified == 0");
-            } else if (params.zeroForOne) {
-                assertGe(state.slot0.sqrtPriceX96, params.sqrtPriceLimitX96, "zeroForOne");
-            } else {
-                assertLe(state.slot0.sqrtPriceX96, params.sqrtPriceLimitX96, "oneForZero");
+        } else if (params.amountSpecified > 0) {
+            if (lpFee == MAX_LP_FEE) {
+                vm.expectRevert(Pool.InvalidFeeForExactOut.selector);
             }
         }
+
+        state.swap(params);
+
+        if (params.zeroForOne) {
+            assertGe(state.slot0.sqrtPriceX96, params.sqrtPriceLimitX96);
+        } else {
+            assertLe(state.slot0.sqrtPriceX96, params.sqrtPriceLimitX96);
+        }
     }
 }
