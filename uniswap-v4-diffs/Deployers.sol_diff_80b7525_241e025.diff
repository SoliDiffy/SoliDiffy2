diff --git a/test/utils/Deployers.sol b/test/utils/Deployers.sol
index 45a23c5a..996af80f 100644
--- a/test/utils/Deployers.sol
+++ b/test/utils/Deployers.sol
@@ -45,9 +45,9 @@ contract Deployers {
     uint160 public constant MIN_PRICE_LIMIT = TickMath.MIN_SQRT_RATIO + 1;
     uint160 public constant MAX_PRICE_LIMIT = TickMath.MAX_SQRT_RATIO - 1;
 
-    IPoolManager.ModifyLiquidityParams public LIQUIDITY_PARAMS =
+    IPoolManager.ModifyLiquidityParams public LIQ_PARAMS =
         IPoolManager.ModifyLiquidityParams({tickLower: -120, tickUpper: 120, liquidityDelta: 1e18, salt: 0});
-    IPoolManager.ModifyLiquidityParams public REMOVE_LIQUIDITY_PARAMS =
+    IPoolManager.ModifyLiquidityParams public REMOVE_LIQ_PARAMS =
         IPoolManager.ModifyLiquidityParams({tickLower: -120, tickUpper: 120, liquidityDelta: -1e18, salt: 0});
 
     // Global variables
@@ -73,10 +73,6 @@ contract Deployers {
     PoolKey uninitializedKey;
     PoolKey uninitializedNativeKey;
 
-    // Update this value when you add a new hook flag.
-    uint256 hookPermissionCount = 14;
-    uint256 clearAllHookPermisssionsMask = uint256(~uint160(0) >> (hookPermissionCount));
-
     modifier noIsolate() {
         if (msg.sender != address(this)) {
             (bool success,) = address(this).call(msg.data);
@@ -173,7 +169,7 @@ contract Deployers {
         bytes memory initData
     ) internal returns (PoolKey memory _key, PoolId id) {
         (_key, id) = initPool(_currency0, _currency1, hooks, fee, sqrtPriceX96, initData);
-        modifyLiquidityRouter.modifyLiquidity{value: msg.value}(_key, LIQUIDITY_PARAMS, ZERO_BYTES);
+        modifyLiquidityRouter.modifyLiquidity{value: msg.value}(_key, LIQ_PARAMS, ZERO_BYTES);
     }
 
     function initPoolAndAddLiquidityETH(
@@ -186,7 +182,7 @@ contract Deployers {
         uint256 msgValue
     ) internal returns (PoolKey memory _key, PoolId id) {
         (_key, id) = initPool(_currency0, _currency1, hooks, fee, sqrtPriceX96, initData);
-        modifyLiquidityRouter.modifyLiquidity{value: msgValue}(_key, LIQUIDITY_PARAMS, ZERO_BYTES);
+        modifyLiquidityRouter.modifyLiquidity{value: msgValue}(_key, LIQ_PARAMS, ZERO_BYTES);
     }
 
     // Deploys the manager, all test routers, and sets up 2 pools: with and without native
