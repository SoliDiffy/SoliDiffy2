diff --git a/contracts/libraries/SqrtPriceMath.sol b/contracts/libraries/SqrtPriceMath.sol
index 304b1f03..a1cd0d1a 100644
--- a/contracts/libraries/SqrtPriceMath.sol
+++ b/contracts/libraries/SqrtPriceMath.sol
@@ -76,27 +76,20 @@ library SqrtPriceMath {
     ) internal pure returns (uint160) {
         // if we're adding (subtracting), rounding down requires rounding the quotient down (up)
         // in both cases, avoid a mulDiv for most inputs
-        if (add) {
-            uint256 quotient =
-                (
+        uint256 quotient =
+            add
+                ? (
                     amount <= type(uint160).max
                         ? (amount << FixedPoint96.RESOLUTION) / liquidity
                         : FullMath.mulDiv(amount, FixedPoint96.Q96, liquidity)
-                );
-
-            return uint256(sqrtPX96).add(quotient).toUint160();
-        } else {
-            uint256 quotient =
-                (
+                )
+                : (
                     amount <= type(uint160).max
                         ? UnsafeMath.divRoundingUp(amount << FixedPoint96.RESOLUTION, liquidity)
                         : FullMath.mulDivRoundingUp(amount, FixedPoint96.Q96, liquidity)
                 );
 
-            require(sqrtPX96 > quotient);
-            // always fits 160 bits
-            return uint160(sqrtPX96 - quotient);
-        }
+        return (add ? uint256(sqrtPX96).add(quotient) : uint256(sqrtPX96).sub(quotient)).toUint160();
     }
 
     /// @notice Gets the next sqrt price given an input amount of token0 or token1
