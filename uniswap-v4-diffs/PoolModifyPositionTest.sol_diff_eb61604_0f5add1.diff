diff --git a/contracts/test/PoolModifyPositionTest.sol b/contracts/test/PoolModifyPositionTest.sol
index 4fb849a3..0f58ba11 100644
--- a/contracts/test/PoolModifyPositionTest.sol
+++ b/contracts/test/PoolModifyPositionTest.sol
@@ -1,15 +1,14 @@
 // SPDX-License-Identifier: UNLICENSED
 pragma solidity =0.8.19;
 
-import {CurrencyLibrary, Currency} from "../libraries/CurrencyLibrary.sol";
-import {IERC20Minimal} from "../interfaces/external/IERC20Minimal.sol";
+import {CurrencyLibrary, Currency} from '../libraries/CurrencyLibrary.sol';
+import {IERC20Minimal} from '../interfaces/external/IERC20Minimal.sol';
 
-import {ILockCallback} from "../interfaces/callback/ILockCallback.sol";
-import {IPoolManager} from "../interfaces/IPoolManager.sol";
+import {ILockCallback} from '../interfaces/callback/ILockCallback.sol';
+import {IPoolManager} from '../interfaces/IPoolManager.sol';
 
 contract PoolModifyPositionTest is ILockCallback {
     using CurrencyLibrary for Currency;
-
     IPoolManager public immutable manager;
 
     constructor(IPoolManager _manager) {
@@ -22,12 +21,14 @@ contract PoolModifyPositionTest is ILockCallback {
         IPoolManager.ModifyPositionParams params;
     }
 
-    function modifyPosition(IPoolManager.PoolKey memory key, IPoolManager.ModifyPositionParams memory params)
-        external
-        payable
-        returns (IPoolManager.BalanceDelta memory delta)
-    {
-        delta = abi.decode(manager.lock(abi.encode(CallbackData(msg.sender, key, params))), (IPoolManager.BalanceDelta));
+    function modifyPosition(
+        IPoolManager.PoolKey memory key,
+        IPoolManager.ModifyPositionParams memory params
+    ) external payable returns (IPoolManager.BalanceDelta memory delta) {
+        delta = abi.decode(
+            manager.lock(abi.encode(CallbackData(msg.sender, key, params))),
+            (IPoolManager.BalanceDelta)
+        );
 
         uint256 ethBalance = address(this).balance;
         if (ethBalance > 0) {
@@ -47,7 +48,9 @@ contract PoolModifyPositionTest is ILockCallback {
                 manager.settle{value: uint256(delta.amount0)}(data.key.currency0);
             } else {
                 IERC20Minimal(Currency.unwrap(data.key.currency0)).transferFrom(
-                    data.sender, address(manager), uint256(delta.amount0)
+                    data.sender,
+                    address(manager),
+                    uint256(delta.amount0)
                 );
                 manager.settle(data.key.currency0);
             }
@@ -57,7 +60,9 @@ contract PoolModifyPositionTest is ILockCallback {
                 manager.settle{value: uint256(delta.amount1)}(data.key.currency1);
             } else {
                 IERC20Minimal(Currency.unwrap(data.key.currency1)).transferFrom(
-                    data.sender, address(manager), uint256(delta.amount1)
+                    data.sender,
+                    address(manager),
+                    uint256(delta.amount1)
                 );
                 manager.settle(data.key.currency1);
             }
