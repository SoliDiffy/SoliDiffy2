diff --git a/contracts/UniswapV2.sol b/contracts/UniswapV2.sol
index 329d537e..0fdbb733 100644
--- a/contracts/UniswapV2.sol
+++ b/contracts/UniswapV2.sol
@@ -56,18 +56,14 @@ contract UniswapV2 is IUniswapV2, ERC20("Uniswap V2", "UNI-V2", 18, 0), SafeTran
         initialize(chainId);
     }
 
-    function getReserves() external view returns (uint128, uint128) {
-        return (reserves.token0, reserves.token1);
-    }
-
-    function getReservesCumulative() external view returns (uint128, uint128, uint128, uint128) {
+    function getReservesCumulativeAndOverflows() external view returns (uint128, uint128, uint128, uint128) {
         require(blockNumberLast > 0, "UniswapV2: NOT_INITIALIZED");
 
         TokenData memory reservesCumulativeNext;
         TokenData memory reservesCumulativeOverflowsNext;
         // replicate the logic in update
         if (block.number > blockNumberLast) {
-            uint128 blocksElapsed = (block.number - blockNumberLast).downcast128();
+                uint128 blocksElapsed = block.number.sub(blockNumberLast).downcast128();
 
             TokenData memory remaindersMul;
             TokenData memory overflowsMul;
@@ -95,10 +91,6 @@ contract UniswapV2 is IUniswapV2, ERC20("Uniswap V2", "UNI-V2", 18, 0), SafeTran
         );
     }
 
-    function getBlockNumberLast() external view returns (uint256) {
-        return blockNumberLast;
-    }
-
     function getAmountOutput(uint128 amountInput, uint128 reserveInput, uint128 reserveOutput)
         public pure returns (uint128 amountOutput)
     {
@@ -109,14 +101,12 @@ contract UniswapV2 is IUniswapV2, ERC20("Uniswap V2", "UNI-V2", 18, 0), SafeTran
         amountOutput = (numerator / denominator).downcast128();
     }
 
-    function update(TokenData memory balances) private {
+    function update(TokenData memory reservesNext) private {
         // if any blocks have gone by since the last time this function was called, we have to update
         if (block.number > blockNumberLast) {
             // make sure that this isn't the first time this function is being called
             if (blockNumberLast > 0) {
-                uint128 blocksElapsed = (block.number - blockNumberLast).downcast128();
-
-                // TODO address ratio of sum / sum of ratios / price accumulator issue
+                uint128 blocksElapsed = block.number.sub(blockNumberLast).downcast128();
 
                 // multiply previous reserves by elapsed blocks in an overflow-safe way
                 TokenData memory remaindersMul;
@@ -130,16 +120,10 @@ contract UniswapV2 is IUniswapV2, ERC20("Uniswap V2", "UNI-V2", 18, 0), SafeTran
                 (reservesCumulative.token1, overflowsAdd.token1) = reservesCumulative.token1.oadd(remaindersMul.token1);
 
                 // update cumulative reserves overflows
-                TokenData memory overflows = TokenData({
-                    token0: overflowsMul.token0.add(overflowsAdd.token0),
-                    token1: overflowsMul.token1.add(overflowsAdd.token1)
+                reservesCumulativeOverflows = TokenData({
+                    token0: reservesCumulativeOverflows.token0.add(overflowsMul.token0.add(overflowsAdd.token0)),
+                    token1: reservesCumulativeOverflows.token1.add(overflowsMul.token1.add(overflowsAdd.token1))
                 });
-                if (overflows.token0 > 0 || overflows.token1 > 0) {
-                    reservesCumulativeOverflows = TokenData({
-                        token0: reservesCumulativeOverflows.token0.add(overflows.token0),
-                        token1: reservesCumulativeOverflows.token1.add(overflows.token1)
-                    });
-                }
             }
 
             // update the last block number
@@ -147,7 +131,7 @@ contract UniswapV2 is IUniswapV2, ERC20("Uniswap V2", "UNI-V2", 18, 0), SafeTran
         }
 
         // update reserves
-        reserves = balances;
+        reserves = reservesNext;
     }
 
     function mintLiquidity(address recipient) external lock returns (uint256 liquidity) {
@@ -155,6 +139,7 @@ contract UniswapV2 is IUniswapV2, ERC20("Uniswap V2", "UNI-V2", 18, 0), SafeTran
             token0: IERC20(token0).balanceOf(address(this)).downcast128(),
             token1: IERC20(token1).balanceOf(address(this)).downcast128()
         });
+
         TokenData memory amounts = TokenData({
             token0: balances.token0.sub(reserves.token0),
             token1: balances.token1.sub(reserves.token1)
@@ -176,11 +161,11 @@ contract UniswapV2 is IUniswapV2, ERC20("Uniswap V2", "UNI-V2", 18, 0), SafeTran
 
     function burnLiquidity(address recipient) external lock returns (uint128 amountToken0, uint128 amountToken1) {
         uint256 liquidity = balanceOf[address(this)];
+
         TokenData memory amounts = TokenData({
             token0: (amountToken0 = (liquidity.mul(reserves.token0) / totalSupply).downcast128()),
             token1: (amountToken1 = (liquidity.mul(reserves.token1) / totalSupply).downcast128())
         });
-
         require(amounts.token0 == 0 || safeTransfer(token0, recipient, amounts.token0), "UniswapV2: TRANSFER_0_FAILED");
         require(amounts.token1 == 0 || safeTransfer(token1, recipient, amounts.token1), "UniswapV2: TRANSFER_1_FAILED");
 
@@ -193,22 +178,33 @@ contract UniswapV2 is IUniswapV2, ERC20("Uniswap V2", "UNI-V2", 18, 0), SafeTran
     }
 
     function swap(address input, address recipient) external lock returns (uint128 amountOutput) {
-        TokenData memory balances;
-        TokenData memory amounts;
+        uint128 balanceInput = IERC20(input).balanceOf(address(this)).downcast128();
 
+        TokenData memory amounts;
+        TokenData memory balances;
         if (input == token0) {
-            balances.token0 = IERC20(input).balanceOf(address(this)).downcast128();
-            amounts.token0 = balances.token0.sub(reserves.token0);
-            amounts.token1 = (amountOutput = getAmountOutput(amounts.token0, reserves.token0, reserves.token1));
-            require(safeTransfer(token1, recipient, amounts.token1), "UniswapV2: TRANSFER_1_FAILED");
-            balances.token1 = IERC20(token1).balanceOf(address(this)).downcast128();
+            uint128 amountInput = balanceInput.sub(reserves.token0);
+            amounts = TokenData({
+                token0: amountInput,
+                token1: (amountOutput = getAmountOutput(amountInput, reserves.token0, reserves.token1))
+            });
+            require(amounts.token1 == 0 || safeTransfer(token1, recipient, amounts.token1), "UniswapV2: TRANSFER_1_FAILED");
+            balances = TokenData({
+                token0: balanceInput,
+                token1: IERC20(token1).balanceOf(address(this)).downcast128()
+            });
         } else {
             require(input == token1, "UniswapV2: INVALID_INPUT");
-            balances.token1 = IERC20(input).balanceOf(address(this)).downcast128();
-            amounts.token1 = balances.token1.sub(reserves.token1);
-            amounts.token0 = (amountOutput = getAmountOutput(amounts.token1, reserves.token1, reserves.token0));
-            require(safeTransfer(token0, recipient, amounts.token0), "UniswapV2: TRANSFER_0_FAILED");
-            balances.token0 = IERC20(token0).balanceOf(address(this)).downcast128();
+            uint128 amountInput = balanceInput.sub(reserves.token1);
+            amounts = TokenData({
+                token0: (amountOutput = getAmountOutput(amountInput, reserves.token1, reserves.token0)),
+                token1: amountInput
+            });
+            require(amounts.token0 == 0 || safeTransfer(token0, recipient, amounts.token0), "UniswapV2: TRANSFER_0_FAILED");
+            balances = TokenData({
+                token0: IERC20(token0).balanceOf(address(this)).downcast128(),
+                token1: balanceInput
+            });
         }
 
         update(balances);
