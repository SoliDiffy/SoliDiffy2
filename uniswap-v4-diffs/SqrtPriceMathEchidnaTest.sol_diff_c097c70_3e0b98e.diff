diff --git a/contracts/test/SqrtPriceMathEchidnaTest.sol b/contracts/test/SqrtPriceMathEchidnaTest.sol
index 6525eade..c9688342 100644
--- a/contracts/test/SqrtPriceMathEchidnaTest.sol
+++ b/contracts/test/SqrtPriceMathEchidnaTest.sol
@@ -66,7 +66,7 @@ contract SqrtPriceMathEchidnaTest {
         uint256 amount0Down = SqrtPriceMath.getAmount0Delta(sqrtP, sqrtQ, liquidity, false);
         uint256 amount0Up = SqrtPriceMath.getAmount0Delta(sqrtP, sqrtQ, liquidity, true);
         assert(amount0Down <= amount0Up);
-        // diff is no greater than 2
+        // diff is 0 or 1
         assert(amount0Up - amount0Down < 2);
     }
 
@@ -80,7 +80,41 @@ contract SqrtPriceMathEchidnaTest {
         uint256 amount1Down = SqrtPriceMath.getAmount1Delta(sqrtP, sqrtQ, liquidity, false);
         uint256 amount1Up = SqrtPriceMath.getAmount1Delta(sqrtP, sqrtQ, liquidity, true);
         assert(amount1Down <= amount1Up);
-        // diff is no greater than 2
+        // diff is 0 or 1
         assert(amount1Up - amount1Down < 2);
     }
+
+    function getAmount0DeltaSignedInvariants(
+        uint160 sqrtP,
+        uint160 sqrtQ,
+        int128 liquidity
+    ) external pure {
+        require(sqrtP >= sqrtQ);
+        require(sqrtP > 0 && sqrtQ > 0);
+
+        int256 amount0 = SqrtPriceMath.getAmount0Delta(sqrtP, sqrtQ, liquidity);
+        if (liquidity < 0) assert(amount0 <= 0);
+        if (liquidity > 0) {
+            if (sqrtP == sqrtQ) assert(amount0 == 0);
+            else assert(amount0 > 0);
+        }
+        if (liquidity == 0) assert(amount0 == 0);
+    }
+
+    function getAmount1DeltaSignedInvariants(
+        uint160 sqrtP,
+        uint160 sqrtQ,
+        int128 liquidity
+    ) external pure {
+        require(sqrtP <= sqrtQ);
+        require(sqrtP > 0 && sqrtQ > 0);
+
+        int256 amount1 = SqrtPriceMath.getAmount1Delta(sqrtP, sqrtQ, liquidity);
+        if (liquidity < 0) assert(amount1 <= 0);
+        if (liquidity > 0) {
+            if (sqrtP == sqrtQ) assert(amount1 == 0);
+            else assert(amount1 > 0);
+        }
+        if (liquidity == 0) assert(amount1 == 0);
+    }
 }
