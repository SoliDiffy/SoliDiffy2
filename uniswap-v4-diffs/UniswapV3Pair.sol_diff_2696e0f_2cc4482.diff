diff --git a/contracts/UniswapV3Pair.sol b/contracts/UniswapV3Pair.sol
index 3e813f23..c68760ae 100644
--- a/contracts/UniswapV3Pair.sol
+++ b/contracts/UniswapV3Pair.sol
@@ -16,7 +16,6 @@ import './libraries/SqrtTickMath.sol';
 import './libraries/SpacedTickBitmap.sol';
 import './libraries/FixedPoint128.sol';
 import './libraries/Tick.sol';
-import './libraries/SecondsOutside.sol';
 import './libraries/Position.sol';
 import './libraries/Oracle.sol';
 
@@ -35,7 +34,6 @@ contract UniswapV3Pair is IUniswapV3Pair, NoDelegateCall {
     using SafeCast for uint256;
     using LiquidityMath for uint128;
     using SpacedTickBitmap for mapping(int16 => uint256);
-    using SecondsOutside for mapping(int24 => uint256);
     using Tick for mapping(int24 => Tick.Info);
     using Position for mapping(bytes32 => Position.Info);
     using Position for Position.Info;
@@ -95,7 +93,6 @@ contract UniswapV3Pair is IUniswapV3Pair, NoDelegateCall {
     mapping(int16 => uint256) public override tickBitmap;
     mapping(bytes32 => Position.Info) public override positions;
     Oracle.Observation[65535] public override observations;
-    mapping(int24 => uint256) public override secondsOutside;
 
     modifier lock() {
         require(slot0.unlocked, 'LOK');
@@ -151,12 +148,6 @@ contract UniswapV3Pair is IUniswapV3Pair, NoDelegateCall {
         emit ObservationCardinalityIncreased(_slot0.observationCardinalityTarget, observationCardinalityTarget);
     }
 
-    function secondsInside(int24 tickLower, int24 tickUpper) external view override noDelegateCall returns (uint32) {
-        checkTicks(tickLower, tickUpper);
-        require(ticks[tickLower].liquidityGross > 0 && ticks[tickUpper].liquidityGross > 0, 'X');
-        return secondsOutside.secondsInside(tickLower, tickUpper, slot0.tick, tickSpacing, _blockTimestamp());
-    }
-
     function scry(uint32 secondsAgo)
         external
         view
@@ -234,6 +225,7 @@ contract UniswapV3Pair is IUniswapV3Pair, NoDelegateCall {
                 liquidityDelta,
                 _feeGrowthGlobal0X128,
                 _feeGrowthGlobal1X128,
+                blockTimestamp,
                 false,
                 maxLiquidityPerTick
             );
@@ -243,18 +235,13 @@ contract UniswapV3Pair is IUniswapV3Pair, NoDelegateCall {
                 liquidityDelta,
                 _feeGrowthGlobal0X128,
                 _feeGrowthGlobal1X128,
+                blockTimestamp,
                 true,
                 maxLiquidityPerTick
             );
 
-            if (flippedLower) {
-                tickBitmap.flipTick(tickLower, tickSpacing);
-                secondsOutside.initialize(tickLower, tick, tickSpacing, blockTimestamp);
-            }
-            if (flippedUpper) {
-                tickBitmap.flipTick(tickUpper, tickSpacing);
-                secondsOutside.initialize(tickUpper, tick, tickSpacing, blockTimestamp);
-            }
+            if (flippedLower) tickBitmap.flipTick(tickLower, tickSpacing);
+            if (flippedUpper) tickBitmap.flipTick(tickUpper, tickSpacing);
         }
 
         (uint256 feeGrowthInside0X128, uint256 feeGrowthInside1X128) =
@@ -270,14 +257,8 @@ contract UniswapV3Pair is IUniswapV3Pair, NoDelegateCall {
 
         // clear any tick data that is no longer needed
         if (liquidityDelta < 0) {
-            if (flippedLower) {
-                ticks.clear(tickLower);
-                secondsOutside.clear(tickLower, tickSpacing);
-            }
-            if (flippedUpper) {
-                ticks.clear(tickUpper);
-                secondsOutside.clear(tickUpper, tickSpacing);
-            }
+            if (flippedLower) ticks.clear(tickLower);
+            if (flippedUpper) ticks.clear(tickUpper);
         }
     }
 
@@ -556,11 +537,10 @@ contract UniswapV3Pair is IUniswapV3Pair, NoDelegateCall {
                         ticks.cross(
                             step.tickNext,
                             (zeroForOne ? state.feeGrowthGlobalX128 : feeGrowthGlobal0X128),
-                            (zeroForOne ? feeGrowthGlobal1X128 : state.feeGrowthGlobalX128)
+                            (zeroForOne ? feeGrowthGlobal1X128 : state.feeGrowthGlobalX128),
+                            cache.blockTimestamp
                         );
 
-                    secondsOutside.cross(step.tickNext, tickSpacing, cache.blockTimestamp);
-
                     // update liquidity, subtract from right to left, add from left to right
                     state.liquidity = zeroForOne
                         ? state.liquidity.subDelta(liquidityDelta)
