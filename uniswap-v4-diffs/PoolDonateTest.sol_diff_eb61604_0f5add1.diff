diff --git a/contracts/test/PoolDonateTest.sol b/contracts/test/PoolDonateTest.sol
index a26fc169..b8d225d5 100644
--- a/contracts/test/PoolDonateTest.sol
+++ b/contracts/test/PoolDonateTest.sol
@@ -1,16 +1,15 @@
 // SPDX-License-Identifier: UNLICENSED
 pragma solidity =0.8.19;
 
-import {Currency, CurrencyLibrary} from "../libraries/CurrencyLibrary.sol";
-import {IERC20Minimal} from "../interfaces/external/IERC20Minimal.sol";
+import {Currency, CurrencyLibrary} from '../libraries/CurrencyLibrary.sol';
+import {IERC20Minimal} from '../interfaces/external/IERC20Minimal.sol';
 
-import {Currency} from "../libraries/CurrencyLibrary.sol";
-import {ILockCallback} from "../interfaces/callback/ILockCallback.sol";
-import {IPoolManager} from "../interfaces/IPoolManager.sol";
+import {Currency} from '../libraries/CurrencyLibrary.sol';
+import {ILockCallback} from '../interfaces/callback/ILockCallback.sol';
+import {IPoolManager} from '../interfaces/IPoolManager.sol';
 
 contract PoolDonateTest is ILockCallback {
     using CurrencyLibrary for Currency;
-
     IPoolManager public immutable manager;
 
     constructor(IPoolManager _manager) {
@@ -24,13 +23,14 @@ contract PoolDonateTest is ILockCallback {
         uint256 amount1;
     }
 
-    function donate(IPoolManager.PoolKey memory key, uint256 amount0, uint256 amount1)
-        external
-        payable
-        returns (IPoolManager.BalanceDelta memory delta)
-    {
+    function donate(
+        IPoolManager.PoolKey memory key,
+        uint256 amount0,
+        uint256 amount1
+    ) external payable returns (IPoolManager.BalanceDelta memory delta) {
         delta = abi.decode(
-            manager.lock(abi.encode(CallbackData(msg.sender, key, amount0, amount1))), (IPoolManager.BalanceDelta)
+            manager.lock(abi.encode(CallbackData(msg.sender, key, amount0, amount1))),
+            (IPoolManager.BalanceDelta)
         );
 
         uint256 ethBalance = address(this).balance;
@@ -51,7 +51,9 @@ contract PoolDonateTest is ILockCallback {
                 manager.settle{value: uint256(delta.amount0)}(data.key.currency0);
             } else {
                 IERC20Minimal(Currency.unwrap(data.key.currency0)).transferFrom(
-                    data.sender, address(manager), uint256(delta.amount0)
+                    data.sender,
+                    address(manager),
+                    uint256(delta.amount0)
                 );
                 manager.settle(data.key.currency0);
             }
@@ -61,7 +63,9 @@ contract PoolDonateTest is ILockCallback {
                 manager.settle{value: uint256(delta.amount1)}(data.key.currency1);
             } else {
                 IERC20Minimal(Currency.unwrap(data.key.currency1)).transferFrom(
-                    data.sender, address(manager), uint256(delta.amount1)
+                    data.sender,
+                    address(manager),
+                    uint256(delta.amount1)
                 );
                 manager.settle(data.key.currency1);
             }
