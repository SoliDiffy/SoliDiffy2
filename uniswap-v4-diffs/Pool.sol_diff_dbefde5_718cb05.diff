diff --git a/contracts/libraries/Pool.sol b/contracts/libraries/Pool.sol
index a0de6cd1..ed939356 100644
--- a/contracts/libraries/Pool.sol
+++ b/contracts/libraries/Pool.sol
@@ -11,8 +11,6 @@ import {FixedPoint128} from './FixedPoint128.sol';
 import {TickMath} from './TickMath.sol';
 import {SqrtPriceMath} from './SqrtPriceMath.sol';
 import {SwapMath} from './SwapMath.sol';
-import {IHooks} from '../interfaces/IHooks.sol';
-import {IPoolManager} from '../interfaces/IPoolManager.sol';
 
 library Pool {
     using SafeCast for *;
@@ -61,6 +59,13 @@ library Pool {
     /// @param feeProtocol The invalid feeProtocol
     error InvalidFeeProtocol(uint8 feeProtocol);
 
+    /// @notice Represents a change in the pool's balance of token0 and token1.
+    /// @dev This is returned from most pool operations
+    struct BalanceDelta {
+        int256 amount0;
+        int256 amount1;
+    }
+
     struct Slot0 {
         // the current price
         uint160 sqrtPriceX96;
@@ -275,7 +280,7 @@ library Pool {
     /// @return result the deltas of the token balances of the pool
     function modifyPosition(State storage self, ModifyPositionParams memory params)
         internal
-        returns (IPoolManager.BalanceDelta memory result)
+        returns (BalanceDelta memory result)
     {
         if (self.slot0.sqrtPriceX96 == 0) revert PoolNotInitialized();
 
@@ -458,10 +463,7 @@ library Pool {
     }
 
     /// @dev Executes a swap against the state, and returns the amount deltas of the pool
-    function swap(State storage self, SwapParams memory params)
-        internal
-        returns (IPoolManager.BalanceDelta memory result)
-    {
+    function swap(State storage self, SwapParams memory params) internal returns (BalanceDelta memory result) {
         if (params.amountSpecified == 0) revert SwapAmountCannotBeZero();
 
         Slot0 memory slot0Start = self.slot0;
@@ -583,7 +585,6 @@ library Pool {
                             );
                         cache.computedLatestObservation = true;
                     }
-
                     int128 liquidityNet = self.ticks.cross(
                         step.tickNext,
                         (params.zeroForOne ? state.feeGrowthGlobalX128 : self.feeGrowthGlobal0X128),
